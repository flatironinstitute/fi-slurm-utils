<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="598" onload="init(evt)" viewBox="0 0 1200 598" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="598" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="581.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="581.00"> </text><svg id="frames" x="10" width="1180" total_samples="72608143"><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1,570,688 samples, 2.16%)</title><rect x="0.0000%" y="517" width="2.1632%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1570688"/><text x="0.2500%" y="527.50">&lt;..</text></g><g><title>[fi_node] (784,445 samples, 1.08%)</title><rect x="2.1632%" y="517" width="1.0804%" height="15" fill="rgb(217,0,24)" fg:x="1570688" fg:w="784445"/><text x="2.4132%" y="527.50"></text></g><g><title>&lt;fi_slurm::nodes::NodeState as core::convert::From&lt;u32&gt;&gt;::from (784,445 samples, 1.08%)</title><rect x="2.1632%" y="501" width="1.0804%" height="15" fill="rgb(221,193,54)" fg:x="1570688" fg:w="784445"/><text x="2.4132%" y="511.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (790,948 samples, 1.09%)</title><rect x="8.1919%" y="501" width="1.0893%" height="15" fill="rgb(248,212,6)" fg:x="5947954" fg:w="790948"/><text x="8.4419%" y="511.50"></text></g><g><title>_int_free (790,948 samples, 1.09%)</title><rect x="8.1919%" y="485" width="1.0893%" height="15" fill="rgb(208,68,35)" fg:x="5947954" fg:w="790948"/><text x="8.4419%" y="495.50"></text></g><g><title>&lt;fi_slurm::nodes::NodeState as core::convert::From&lt;u32&gt;&gt;::from (766,637 samples, 1.06%)</title><rect x="9.2812%" y="501" width="1.0559%" height="15" fill="rgb(232,128,0)" fg:x="6738902" fg:w="766637"/><text x="9.5312%" y="511.50"></text></g><g><title>alloc::fmt::format::format_inner (766,637 samples, 1.06%)</title><rect x="9.2812%" y="485" width="1.0559%" height="15" fill="rgb(207,160,47)" fg:x="6738902" fg:w="766637"/><text x="9.5312%" y="495.50"></text></g><g><title>core::fmt::write (766,637 samples, 1.06%)</title><rect x="9.2812%" y="469" width="1.0559%" height="15" fill="rgb(228,23,34)" fg:x="6738902" fg:w="766637"/><text x="9.5312%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (766,637 samples, 1.06%)</title><rect x="9.2812%" y="453" width="1.0559%" height="15" fill="rgb(218,30,26)" fg:x="6738902" fg:w="766637"/><text x="9.5312%" y="463.50"></text></g><g><title>__memcpy_avx512_unaligned_erms (766,637 samples, 1.06%)</title><rect x="9.2812%" y="437" width="1.0559%" height="15" fill="rgb(220,122,19)" fg:x="6738902" fg:w="766637"/><text x="9.5312%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (788,800 samples, 1.09%)</title><rect x="10.3370%" y="485" width="1.0864%" height="15" fill="rgb(250,228,42)" fg:x="7505539" fg:w="788800"/><text x="10.5870%" y="495.50"></text></g><g><title>bitflags::parser::to_writer (788,800 samples, 1.09%)</title><rect x="10.3370%" y="469" width="1.0864%" height="15" fill="rgb(240,193,28)" fg:x="7505539" fg:w="788800"/><text x="10.5870%" y="479.50"></text></g><g><title>__GI___libc_malloc (788,462 samples, 1.09%)</title><rect x="14.6699%" y="421" width="1.0859%" height="15" fill="rgb(216,20,37)" fg:x="10651558" fg:w="788462"/><text x="14.9199%" y="431.50"></text></g><g><title>_int_malloc (788,462 samples, 1.09%)</title><rect x="14.6699%" y="405" width="1.0859%" height="15" fill="rgb(206,188,39)" fg:x="10651558" fg:w="788462"/><text x="14.9199%" y="415.50"></text></g><g><title>&lt;fi_slurm::states::NodeStateFlags as core::fmt::Debug&gt;::fmt (5,501,276 samples, 7.58%)</title><rect x="10.3370%" y="501" width="7.5767%" height="15" fill="rgb(217,207,13)" fg:x="7505539" fg:w="5501276"/><text x="10.5870%" y="511.50">&lt;fi_slurm:..</text></g><g><title>core::fmt::Formatter::debug_tuple_field1_finish (4,712,476 samples, 6.49%)</title><rect x="11.4234%" y="485" width="6.4903%" height="15" fill="rgb(231,73,38)" fg:x="8294339" fg:w="4712476"/><text x="11.6734%" y="495.50">core::fmt..</text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3,926,139 samples, 5.41%)</title><rect x="12.5064%" y="469" width="5.4073%" height="15" fill="rgb(225,20,46)" fg:x="9080676" fg:w="3926139"/><text x="12.7564%" y="479.50">&lt;alloc:..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (2,355,257 samples, 3.24%)</title><rect x="14.6699%" y="453" width="3.2438%" height="15" fill="rgb(210,31,41)" fg:x="10651558" fg:w="2355257"/><text x="14.9199%" y="463.50">all..</text></g><g><title>alloc::raw_vec::finish_grow (2,355,257 samples, 3.24%)</title><rect x="14.6699%" y="437" width="3.2438%" height="15" fill="rgb(221,200,47)" fg:x="10651558" fg:w="2355257"/><text x="14.9199%" y="447.50">all..</text></g><g><title>__GI___libc_realloc (1,566,795 samples, 2.16%)</title><rect x="15.7558%" y="421" width="2.1579%" height="15" fill="rgb(226,26,5)" fg:x="11440020" fg:w="1566795"/><text x="16.0058%" y="431.50">_..</text></g><g><title>_int_realloc (1,566,795 samples, 2.16%)</title><rect x="15.7558%" y="405" width="2.1579%" height="15" fill="rgb(249,33,26)" fg:x="11440020" fg:w="1566795"/><text x="16.0058%" y="415.50">_..</text></g><g><title>_int_free (780,174 samples, 1.07%)</title><rect x="16.8392%" y="389" width="1.0745%" height="15" fill="rgb(235,183,28)" fg:x="12226641" fg:w="780174"/><text x="17.0892%" y="399.50"></text></g><g><title>malloc_consolidate (780,174 samples, 1.07%)</title><rect x="16.8392%" y="373" width="1.0745%" height="15" fill="rgb(221,5,38)" fg:x="12226641" fg:w="780174"/><text x="17.0892%" y="383.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (802,567 samples, 1.11%)</title><rect x="17.9137%" y="501" width="1.1053%" height="15" fill="rgb(247,18,42)" fg:x="13006815" fg:w="802567"/><text x="18.1637%" y="511.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (802,567 samples, 1.11%)</title><rect x="17.9137%" y="485" width="1.1053%" height="15" fill="rgb(241,131,45)" fg:x="13006815" fg:w="802567"/><text x="18.1637%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (787,733 samples, 1.08%)</title><rect x="19.0191%" y="485" width="1.0849%" height="15" fill="rgb(249,31,29)" fg:x="13809382" fg:w="787733"/><text x="19.2691%" y="495.50"></text></g><g><title>__GI___libc_malloc (787,733 samples, 1.08%)</title><rect x="19.0191%" y="469" width="1.0849%" height="15" fill="rgb(225,111,53)" fg:x="13809382" fg:w="787733"/><text x="19.2691%" y="479.50"></text></g><g><title>_int_malloc (787,733 samples, 1.08%)</title><rect x="19.0191%" y="453" width="1.0849%" height="15" fill="rgb(238,160,17)" fg:x="13809382" fg:w="787733"/><text x="19.2691%" y="463.50"></text></g><g><title>[unknown] (789,781 samples, 1.09%)</title><rect x="20.1040%" y="485" width="1.0877%" height="15" fill="rgb(214,148,48)" fg:x="14597115" fg:w="789781"/><text x="20.3540%" y="495.50"></text></g><g><title>[unknown] (789,781 samples, 1.09%)</title><rect x="20.1040%" y="469" width="1.0877%" height="15" fill="rgb(232,36,49)" fg:x="14597115" fg:w="789781"/><text x="20.3540%" y="479.50"></text></g><g><title>[unknown] (789,781 samples, 1.09%)</title><rect x="20.1040%" y="453" width="1.0877%" height="15" fill="rgb(209,103,24)" fg:x="14597115" fg:w="789781"/><text x="20.3540%" y="463.50"></text></g><g><title>[unknown] (789,781 samples, 1.09%)</title><rect x="20.1040%" y="437" width="1.0877%" height="15" fill="rgb(229,88,8)" fg:x="14597115" fg:w="789781"/><text x="20.3540%" y="447.50"></text></g><g><title>[unknown] (789,781 samples, 1.09%)</title><rect x="20.1040%" y="421" width="1.0877%" height="15" fill="rgb(213,181,19)" fg:x="14597115" fg:w="789781"/><text x="20.3540%" y="431.50"></text></g><g><title>[unknown] (789,781 samples, 1.09%)</title><rect x="20.1040%" y="405" width="1.0877%" height="15" fill="rgb(254,191,54)" fg:x="14597115" fg:w="789781"/><text x="20.3540%" y="415.50"></text></g><g><title>[unknown] (789,781 samples, 1.09%)</title><rect x="20.1040%" y="389" width="1.0877%" height="15" fill="rgb(241,83,37)" fg:x="14597115" fg:w="789781"/><text x="20.3540%" y="399.50"></text></g><g><title>[unknown] (789,781 samples, 1.09%)</title><rect x="20.1040%" y="373" width="1.0877%" height="15" fill="rgb(233,36,39)" fg:x="14597115" fg:w="789781"/><text x="20.3540%" y="383.50"></text></g><g><title>[unknown] (4,715,550 samples, 6.49%)</title><rect x="19.0191%" y="501" width="6.4945%" height="15" fill="rgb(226,3,54)" fg:x="13809382" fg:w="4715550"/><text x="19.2691%" y="511.50">[unknown]</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (3,138,036 samples, 4.32%)</title><rect x="21.1917%" y="485" width="4.3219%" height="15" fill="rgb(245,192,40)" fg:x="15386896" fg:w="3138036"/><text x="21.4417%" y="495.50">hashb..</text></g><g><title>__memcpy_avx512_unaligned_erms (3,138,036 samples, 4.32%)</title><rect x="21.1917%" y="469" width="4.3219%" height="15" fill="rgb(238,167,29)" fg:x="15386896" fg:w="3138036"/><text x="21.4417%" y="479.50">__mem..</text></g><g><title>[unknown] (3,138,036 samples, 4.32%)</title><rect x="21.1917%" y="453" width="4.3219%" height="15" fill="rgb(232,182,51)" fg:x="15386896" fg:w="3138036"/><text x="21.4417%" y="463.50">[unkn..</text></g><g><title>[unknown] (3,138,036 samples, 4.32%)</title><rect x="21.1917%" y="437" width="4.3219%" height="15" fill="rgb(231,60,39)" fg:x="15386896" fg:w="3138036"/><text x="21.4417%" y="447.50">[unkn..</text></g><g><title>[unknown] (3,138,036 samples, 4.32%)</title><rect x="21.1917%" y="421" width="4.3219%" height="15" fill="rgb(208,69,12)" fg:x="15386896" fg:w="3138036"/><text x="21.4417%" y="431.50">[unkn..</text></g><g><title>[unknown] (3,138,036 samples, 4.32%)</title><rect x="21.1917%" y="405" width="4.3219%" height="15" fill="rgb(235,93,37)" fg:x="15386896" fg:w="3138036"/><text x="21.4417%" y="415.50">[unkn..</text></g><g><title>[unknown] (3,138,036 samples, 4.32%)</title><rect x="21.1917%" y="389" width="4.3219%" height="15" fill="rgb(213,116,39)" fg:x="15386896" fg:w="3138036"/><text x="21.4417%" y="399.50">[unkn..</text></g><g><title>[unknown] (1,561,032 samples, 2.15%)</title><rect x="23.3636%" y="373" width="2.1499%" height="15" fill="rgb(222,207,29)" fg:x="16963900" fg:w="1561032"/><text x="23.6136%" y="383.50">[..</text></g><g><title>[unknown] (1,561,032 samples, 2.15%)</title><rect x="23.3636%" y="357" width="2.1499%" height="15" fill="rgb(206,96,30)" fg:x="16963900" fg:w="1561032"/><text x="23.6136%" y="367.50">[..</text></g><g><title>[unknown] (1,561,032 samples, 2.15%)</title><rect x="23.3636%" y="341" width="2.1499%" height="15" fill="rgb(218,138,4)" fg:x="16963900" fg:w="1561032"/><text x="23.6136%" y="351.50">[..</text></g><g><title>[unknown] (1,561,032 samples, 2.15%)</title><rect x="23.3636%" y="325" width="2.1499%" height="15" fill="rgb(250,191,14)" fg:x="16963900" fg:w="1561032"/><text x="23.6136%" y="335.50">[..</text></g><g><title>[unknown] (781,426 samples, 1.08%)</title><rect x="24.4373%" y="309" width="1.0762%" height="15" fill="rgb(239,60,40)" fg:x="17743506" fg:w="781426"/><text x="24.6873%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1,567,640 samples, 2.16%)</title><rect x="25.5136%" y="501" width="2.1590%" height="15" fill="rgb(206,27,48)" fg:x="18524932" fg:w="1567640"/><text x="25.7636%" y="511.50">a..</text></g><g><title>__GI___libc_realloc (1,567,640 samples, 2.16%)</title><rect x="25.5136%" y="485" width="2.1590%" height="15" fill="rgb(225,35,8)" fg:x="18524932" fg:w="1567640"/><text x="25.7636%" y="495.50">_..</text></g><g><title>_int_realloc (1,567,640 samples, 2.16%)</title><rect x="25.5136%" y="469" width="2.1590%" height="15" fill="rgb(250,213,24)" fg:x="18524932" fg:w="1567640"/><text x="25.7636%" y="479.50">_..</text></g><g><title>_int_malloc (775,576 samples, 1.07%)</title><rect x="26.6044%" y="453" width="1.0682%" height="15" fill="rgb(247,123,22)" fg:x="19316996" fg:w="775576"/><text x="26.8544%" y="463.50"></text></g><g><title>[unknown] (775,576 samples, 1.07%)</title><rect x="26.6044%" y="437" width="1.0682%" height="15" fill="rgb(231,138,38)" fg:x="19316996" fg:w="775576"/><text x="26.8544%" y="447.50"></text></g><g><title>[unknown] (775,576 samples, 1.07%)</title><rect x="26.6044%" y="421" width="1.0682%" height="15" fill="rgb(231,145,46)" fg:x="19316996" fg:w="775576"/><text x="26.8544%" y="431.50"></text></g><g><title>[unknown] (775,576 samples, 1.07%)</title><rect x="26.6044%" y="405" width="1.0682%" height="15" fill="rgb(251,118,11)" fg:x="19316996" fg:w="775576"/><text x="26.8544%" y="415.50"></text></g><g><title>__GI___libc_malloc (2,338,506 samples, 3.22%)</title><rect x="28.7434%" y="485" width="3.2207%" height="15" fill="rgb(217,147,25)" fg:x="20870068" fg:w="2338506"/><text x="28.9934%" y="495.50">__G..</text></g><g><title>_int_malloc (773,022 samples, 1.06%)</title><rect x="30.8995%" y="469" width="1.0646%" height="15" fill="rgb(247,81,37)" fg:x="22435552" fg:w="773022"/><text x="31.1495%" y="479.50"></text></g><g><title>alloc::fmt::format::format_inner (1,563,852 samples, 2.15%)</title><rect x="31.9641%" y="485" width="2.1538%" height="15" fill="rgb(209,12,38)" fg:x="23208574" fg:w="1563852"/><text x="32.2141%" y="495.50">a..</text></g><g><title>[unknown] (778,999 samples, 1.07%)</title><rect x="33.0451%" y="469" width="1.0729%" height="15" fill="rgb(227,1,9)" fg:x="23993427" fg:w="778999"/><text x="33.2951%" y="479.50"></text></g><g><title>[unknown] (778,999 samples, 1.07%)</title><rect x="33.0451%" y="453" width="1.0729%" height="15" fill="rgb(248,47,43)" fg:x="23993427" fg:w="778999"/><text x="33.2951%" y="463.50"></text></g><g><title>[unknown] (778,999 samples, 1.07%)</title><rect x="33.0451%" y="437" width="1.0729%" height="15" fill="rgb(221,10,30)" fg:x="23993427" fg:w="778999"/><text x="33.2951%" y="447.50"></text></g><g><title>[unknown] (778,999 samples, 1.07%)</title><rect x="33.0451%" y="421" width="1.0729%" height="15" fill="rgb(210,229,1)" fg:x="23993427" fg:w="778999"/><text x="33.2951%" y="431.50"></text></g><g><title>[unknown] (778,999 samples, 1.07%)</title><rect x="33.0451%" y="405" width="1.0729%" height="15" fill="rgb(222,148,37)" fg:x="23993427" fg:w="778999"/><text x="33.2951%" y="415.50"></text></g><g><title>[unknown] (778,999 samples, 1.07%)</title><rect x="33.0451%" y="389" width="1.0729%" height="15" fill="rgb(234,67,33)" fg:x="23993427" fg:w="778999"/><text x="33.2951%" y="399.50"></text></g><g><title>[unknown] (778,999 samples, 1.07%)</title><rect x="33.0451%" y="373" width="1.0729%" height="15" fill="rgb(247,98,35)" fg:x="23993427" fg:w="778999"/><text x="33.2951%" y="383.50"></text></g><g><title>[unknown] (778,999 samples, 1.07%)</title><rect x="33.0451%" y="357" width="1.0729%" height="15" fill="rgb(247,138,52)" fg:x="23993427" fg:w="778999"/><text x="33.2951%" y="367.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (5,469,024 samples, 7.53%)</title><rect x="27.6726%" y="501" width="7.5322%" height="15" fill="rgb(213,79,30)" fg:x="20092572" fg:w="5469024"/><text x="27.9226%" y="511.50">core::ops:..</text></g><g><title>core::slice::memchr::memchr_aligned (789,170 samples, 1.09%)</title><rect x="34.1180%" y="485" width="1.0869%" height="15" fill="rgb(246,177,23)" fg:x="24772426" fg:w="789170"/><text x="34.3680%" y="495.50"></text></g><g><title>do_lookup_x (793,487 samples, 1.09%)</title><rect x="35.2049%" y="501" width="1.0928%" height="15" fill="rgb(230,62,27)" fg:x="25561596" fg:w="793487"/><text x="35.4549%" y="511.50"></text></g><g><title>check_match (793,487 samples, 1.09%)</title><rect x="35.2049%" y="485" width="1.0928%" height="15" fill="rgb(216,154,8)" fg:x="25561596" fg:w="793487"/><text x="35.4549%" y="495.50"></text></g><g><title>fi_node::main (793,487 samples, 1.09%)</title><rect x="35.2049%" y="469" width="1.0928%" height="15" fill="rgb(244,35,45)" fg:x="25561596" fg:w="793487"/><text x="35.4549%" y="479.50"></text></g><g><title>fi_slurm::parser::parse_slurm_hostlist (793,487 samples, 1.09%)</title><rect x="35.2049%" y="453" width="1.0928%" height="15" fill="rgb(251,115,12)" fg:x="25561596" fg:w="793487"/><text x="35.4549%" y="463.50"></text></g><g><title>alloc::fmt::format::format_inner (793,487 samples, 1.09%)</title><rect x="35.2049%" y="437" width="1.0928%" height="15" fill="rgb(240,54,50)" fg:x="25561596" fg:w="793487"/><text x="35.4549%" y="447.50"></text></g><g><title>core::fmt::write (793,487 samples, 1.09%)</title><rect x="35.2049%" y="421" width="1.0928%" height="15" fill="rgb(233,84,52)" fg:x="25561596" fg:w="793487"/><text x="35.4549%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (793,487 samples, 1.09%)</title><rect x="35.2049%" y="405" width="1.0928%" height="15" fill="rgb(207,117,47)" fg:x="25561596" fg:w="793487"/><text x="35.4549%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (793,487 samples, 1.09%)</title><rect x="35.2049%" y="389" width="1.0928%" height="15" fill="rgb(249,43,39)" fg:x="25561596" fg:w="793487"/><text x="35.4549%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (793,487 samples, 1.09%)</title><rect x="35.2049%" y="373" width="1.0928%" height="15" fill="rgb(209,38,44)" fg:x="25561596" fg:w="793487"/><text x="35.4549%" y="383.50"></text></g><g><title>__GI___libc_malloc (793,487 samples, 1.09%)</title><rect x="35.2049%" y="357" width="1.0928%" height="15" fill="rgb(236,212,23)" fg:x="25561596" fg:w="793487"/><text x="35.4549%" y="367.50"></text></g><g><title>_int_malloc (793,487 samples, 1.09%)</title><rect x="35.2049%" y="341" width="1.0928%" height="15" fill="rgb(242,79,21)" fg:x="25561596" fg:w="793487"/><text x="35.4549%" y="351.50"></text></g><g><title>fi_node::summary_report::build_summary_report (793,035 samples, 1.09%)</title><rect x="36.2977%" y="501" width="1.0922%" height="15" fill="rgb(211,96,35)" fg:x="26355083" fg:w="793035"/><text x="36.5477%" y="511.50"></text></g><g><title>fi_slurm::jobs::Job::from_raw_binding (797,654 samples, 1.10%)</title><rect x="37.3899%" y="501" width="1.0986%" height="15" fill="rgb(253,215,40)" fg:x="27148118" fg:w="797654"/><text x="37.6399%" y="511.50"></text></g><g><title>fi_slurm::jobs::RawSlurmJobInfo::into_slurm_jobs (796,572 samples, 1.10%)</title><rect x="38.4885%" y="501" width="1.0971%" height="15" fill="rgb(211,81,21)" fg:x="27945772" fg:w="796572"/><text x="38.7385%" y="511.50"></text></g><g><title>slurm_free_job_info_msg (796,572 samples, 1.10%)</title><rect x="38.4885%" y="485" width="1.0971%" height="15" fill="rgb(208,190,38)" fg:x="27945772" fg:w="796572"/><text x="38.7385%" y="495.50"></text></g><g><title>_free_all_job_info (796,572 samples, 1.10%)</title><rect x="38.4885%" y="469" width="1.0971%" height="15" fill="rgb(235,213,38)" fg:x="27945772" fg:w="796572"/><text x="38.7385%" y="479.50"></text></g><g><title>slurm_free_job_info_members (796,572 samples, 1.10%)</title><rect x="38.4885%" y="453" width="1.0971%" height="15" fill="rgb(237,122,38)" fg:x="27945772" fg:w="796572"/><text x="38.7385%" y="463.50"></text></g><g><title>slurm_xfree (796,572 samples, 1.10%)</title><rect x="38.4885%" y="437" width="1.0971%" height="15" fill="rgb(244,218,35)" fg:x="27945772" fg:w="796572"/><text x="38.7385%" y="447.50"></text></g><g><title>_int_free (796,572 samples, 1.10%)</title><rect x="38.4885%" y="421" width="1.0971%" height="15" fill="rgb(240,68,47)" fg:x="27945772" fg:w="796572"/><text x="38.7385%" y="431.50"></text></g><g><title>fi_slurm::nodes::Node::from_raw_binding (788,587 samples, 1.09%)</title><rect x="39.5856%" y="501" width="1.0861%" height="15" fill="rgb(210,16,53)" fg:x="28742344" fg:w="788587"/><text x="39.8356%" y="511.50"></text></g><g><title>fi_slurm::nodes::Node::from_raw_binding (787,289 samples, 1.08%)</title><rect x="40.6717%" y="485" width="1.0843%" height="15" fill="rgb(235,124,12)" fg:x="29530931" fg:w="787289"/><text x="40.9217%" y="495.50"></text></g><g><title>alloc::ffi::c_str::&lt;impl core::ffi::c_str::CStr&gt;::to_string_lossy (787,289 samples, 1.08%)</title><rect x="40.6717%" y="469" width="1.0843%" height="15" fill="rgb(224,169,11)" fg:x="29530931" fg:w="787289"/><text x="40.9217%" y="479.50"></text></g><g><title>alloc::string::String::from_utf8_lossy (787,289 samples, 1.08%)</title><rect x="40.6717%" y="453" width="1.0843%" height="15" fill="rgb(250,166,2)" fg:x="29530931" fg:w="787289"/><text x="40.9217%" y="463.50"></text></g><g><title>fi_slurm::nodes::RawSlurmNodeInfo::into_slurm_nodes (1,576,408 samples, 2.17%)</title><rect x="40.6717%" y="501" width="2.1711%" height="15" fill="rgb(242,216,29)" fg:x="29530931" fg:w="1576408"/><text x="40.9217%" y="511.50">f..</text></g><g><title>slurm_free_node_info_msg (789,119 samples, 1.09%)</title><rect x="41.7560%" y="485" width="1.0868%" height="15" fill="rgb(230,116,27)" fg:x="30318220" fg:w="789119"/><text x="42.0060%" y="495.50"></text></g><g><title>_free_all_node_info (789,119 samples, 1.09%)</title><rect x="41.7560%" y="469" width="1.0868%" height="15" fill="rgb(228,99,48)" fg:x="30318220" fg:w="789119"/><text x="42.0060%" y="479.50"></text></g><g><title>slurm_xfree (789,119 samples, 1.09%)</title><rect x="41.7560%" y="453" width="1.0868%" height="15" fill="rgb(253,11,6)" fg:x="30318220" fg:w="789119"/><text x="42.0060%" y="463.50"></text></g><g><title>[unknown] (29,509,556 samples, 40.64%)</title><rect x="3.2436%" y="517" width="40.6422%" height="15" fill="rgb(247,143,39)" fg:x="2355133" fg:w="29509556"/><text x="3.4936%" y="527.50">[unknown]</text></g><g><title>re_node_set_insert_last (757,350 samples, 1.04%)</title><rect x="42.8428%" y="501" width="1.0431%" height="15" fill="rgb(236,97,10)" fg:x="31107339" fg:w="757350"/><text x="43.0928%" y="511.50"></text></g><g><title>__rdl_alloc (2,373,749 samples, 3.27%)</title><rect x="43.8858%" y="517" width="3.2693%" height="15" fill="rgb(233,208,19)" fg:x="31864689" fg:w="2373749"/><text x="44.1358%" y="527.50">__r..</text></g><g><title>__rdl_dealloc (792,816 samples, 1.09%)</title><rect x="47.1551%" y="517" width="1.0919%" height="15" fill="rgb(216,164,2)" fg:x="34238438" fg:w="792816"/><text x="47.4051%" y="527.50"></text></g><g><title>_dl_start_user (672,908 samples, 0.93%)</title><rect x="48.2470%" y="517" width="0.9268%" height="15" fill="rgb(220,129,5)" fg:x="35031254" fg:w="672908"/><text x="48.4970%" y="527.50"></text></g><g><title>_dl_init (672,908 samples, 0.93%)</title><rect x="48.2470%" y="501" width="0.9268%" height="15" fill="rgb(242,17,10)" fg:x="35031254" fg:w="672908"/><text x="48.4970%" y="511.50"></text></g><g><title>call_init (672,908 samples, 0.93%)</title><rect x="48.2470%" y="485" width="0.9268%" height="15" fill="rgb(242,107,0)" fg:x="35031254" fg:w="672908"/><text x="48.4970%" y="495.50"></text></g><g><title>call_init (672,908 samples, 0.93%)</title><rect x="48.2470%" y="469" width="0.9268%" height="15" fill="rgb(251,28,31)" fg:x="35031254" fg:w="672908"/><text x="48.4970%" y="479.50"></text></g><g><title>__cpu_indicator_init (672,908 samples, 0.93%)</title><rect x="48.2470%" y="453" width="0.9268%" height="15" fill="rgb(233,223,10)" fg:x="35031254" fg:w="672908"/><text x="48.4970%" y="463.50"></text></g><g><title>cpu_indicator_init (672,908 samples, 0.93%)</title><rect x="48.2470%" y="437" width="0.9268%" height="15" fill="rgb(215,21,27)" fg:x="35031254" fg:w="672908"/><text x="48.4970%" y="447.50"></text></g><g><title>__get_cpuid (672,908 samples, 0.93%)</title><rect x="48.2470%" y="421" width="0.9268%" height="15" fill="rgb(232,23,21)" fg:x="35031254" fg:w="672908"/><text x="48.4970%" y="431.50"></text></g><g><title>__GI___xstat (489,429 samples, 0.67%)</title><rect x="49.1738%" y="357" width="0.6741%" height="15" fill="rgb(244,5,23)" fg:x="35704162" fg:w="489429"/><text x="49.4238%" y="367.50"></text></g><g><title>[unknown] (489,429 samples, 0.67%)</title><rect x="49.1738%" y="341" width="0.6741%" height="15" fill="rgb(226,81,46)" fg:x="35704162" fg:w="489429"/><text x="49.4238%" y="351.50"></text></g><g><title>[unknown] (489,429 samples, 0.67%)</title><rect x="49.1738%" y="325" width="0.6741%" height="15" fill="rgb(247,70,30)" fg:x="35704162" fg:w="489429"/><text x="49.4238%" y="335.50"></text></g><g><title>[unknown] (489,429 samples, 0.67%)</title><rect x="49.1738%" y="309" width="0.6741%" height="15" fill="rgb(212,68,19)" fg:x="35704162" fg:w="489429"/><text x="49.4238%" y="319.50"></text></g><g><title>[unknown] (489,429 samples, 0.67%)</title><rect x="49.1738%" y="293" width="0.6741%" height="15" fill="rgb(240,187,13)" fg:x="35704162" fg:w="489429"/><text x="49.4238%" y="303.50"></text></g><g><title>[unknown] (489,429 samples, 0.67%)</title><rect x="49.1738%" y="277" width="0.6741%" height="15" fill="rgb(223,113,26)" fg:x="35704162" fg:w="489429"/><text x="49.4238%" y="287.50"></text></g><g><title>[unknown] (489,429 samples, 0.67%)</title><rect x="49.1738%" y="261" width="0.6741%" height="15" fill="rgb(206,192,2)" fg:x="35704162" fg:w="489429"/><text x="49.4238%" y="271.50"></text></g><g><title>[unknown] (489,429 samples, 0.67%)</title><rect x="49.1738%" y="245" width="0.6741%" height="15" fill="rgb(241,108,4)" fg:x="35704162" fg:w="489429"/><text x="49.4238%" y="255.50"></text></g><g><title>[unknown] (489,429 samples, 0.67%)</title><rect x="49.1738%" y="229" width="0.6741%" height="15" fill="rgb(247,173,49)" fg:x="35704162" fg:w="489429"/><text x="49.4238%" y="239.50"></text></g><g><title>[unknown] (489,429 samples, 0.67%)</title><rect x="49.1738%" y="213" width="0.6741%" height="15" fill="rgb(224,114,35)" fg:x="35704162" fg:w="489429"/><text x="49.4238%" y="223.50"></text></g><g><title>[unknown] (489,429 samples, 0.67%)</title><rect x="49.1738%" y="197" width="0.6741%" height="15" fill="rgb(245,159,27)" fg:x="35704162" fg:w="489429"/><text x="49.4238%" y="207.50"></text></g><g><title>[unknown] (489,429 samples, 0.67%)</title><rect x="49.1738%" y="181" width="0.6741%" height="15" fill="rgb(245,172,44)" fg:x="35704162" fg:w="489429"/><text x="49.4238%" y="191.50"></text></g><g><title>[unknown] (489,429 samples, 0.67%)</title><rect x="49.1738%" y="165" width="0.6741%" height="15" fill="rgb(236,23,11)" fg:x="35704162" fg:w="489429"/><text x="49.4238%" y="175.50"></text></g><g><title>[unknown] (489,429 samples, 0.67%)</title><rect x="49.1738%" y="149" width="0.6741%" height="15" fill="rgb(205,117,38)" fg:x="35704162" fg:w="489429"/><text x="49.4238%" y="159.50"></text></g><g><title>[unknown] (489,429 samples, 0.67%)</title><rect x="49.1738%" y="133" width="0.6741%" height="15" fill="rgb(237,72,25)" fg:x="35704162" fg:w="489429"/><text x="49.4238%" y="143.50"></text></g><g><title>[unknown] (489,429 samples, 0.67%)</title><rect x="49.1738%" y="117" width="0.6741%" height="15" fill="rgb(244,70,9)" fg:x="35704162" fg:w="489429"/><text x="49.4238%" y="127.50"></text></g><g><title>_dl_map_object_deps (2,020,112 samples, 2.78%)</title><rect x="49.1738%" y="437" width="2.7822%" height="15" fill="rgb(217,125,39)" fg:x="35704162" fg:w="2020112"/><text x="49.4238%" y="447.50">_d..</text></g><g><title>_dl_catch_exception (2,020,112 samples, 2.78%)</title><rect x="49.1738%" y="421" width="2.7822%" height="15" fill="rgb(235,36,10)" fg:x="35704162" fg:w="2020112"/><text x="49.4238%" y="431.50">_d..</text></g><g><title>openaux (2,020,112 samples, 2.78%)</title><rect x="49.1738%" y="405" width="2.7822%" height="15" fill="rgb(251,123,47)" fg:x="35704162" fg:w="2020112"/><text x="49.4238%" y="415.50">op..</text></g><g><title>_dl_map_object (2,020,112 samples, 2.78%)</title><rect x="49.1738%" y="389" width="2.7822%" height="15" fill="rgb(221,13,13)" fg:x="35704162" fg:w="2020112"/><text x="49.4238%" y="399.50">_d..</text></g><g><title>open_path (2,020,112 samples, 2.78%)</title><rect x="49.1738%" y="373" width="2.7822%" height="15" fill="rgb(238,131,9)" fg:x="35704162" fg:w="2020112"/><text x="49.4238%" y="383.50">op..</text></g><g><title>open_verify (1,530,683 samples, 2.11%)</title><rect x="49.8478%" y="357" width="2.1081%" height="15" fill="rgb(211,50,8)" fg:x="36193591" fg:w="1530683"/><text x="50.0978%" y="367.50">o..</text></g><g><title>__GI___open64_nocancel (1,530,683 samples, 2.11%)</title><rect x="49.8478%" y="341" width="2.1081%" height="15" fill="rgb(245,182,24)" fg:x="36193591" fg:w="1530683"/><text x="50.0978%" y="351.50">_..</text></g><g><title>[unknown] (1,530,683 samples, 2.11%)</title><rect x="49.8478%" y="325" width="2.1081%" height="15" fill="rgb(242,14,37)" fg:x="36193591" fg:w="1530683"/><text x="50.0978%" y="335.50">[..</text></g><g><title>[unknown] (1,530,683 samples, 2.11%)</title><rect x="49.8478%" y="309" width="2.1081%" height="15" fill="rgb(246,228,12)" fg:x="36193591" fg:w="1530683"/><text x="50.0978%" y="319.50">[..</text></g><g><title>[unknown] (1,071,659 samples, 1.48%)</title><rect x="50.4800%" y="293" width="1.4759%" height="15" fill="rgb(213,55,15)" fg:x="36652615" fg:w="1071659"/><text x="50.7300%" y="303.50"></text></g><g><title>[unknown] (1,071,659 samples, 1.48%)</title><rect x="50.4800%" y="277" width="1.4759%" height="15" fill="rgb(209,9,3)" fg:x="36652615" fg:w="1071659"/><text x="50.7300%" y="287.50"></text></g><g><title>[unknown] (1,071,659 samples, 1.48%)</title><rect x="50.4800%" y="261" width="1.4759%" height="15" fill="rgb(230,59,30)" fg:x="36652615" fg:w="1071659"/><text x="50.7300%" y="271.50"></text></g><g><title>[unknown] (1,071,659 samples, 1.48%)</title><rect x="50.4800%" y="245" width="1.4759%" height="15" fill="rgb(209,121,21)" fg:x="36652615" fg:w="1071659"/><text x="50.7300%" y="255.50"></text></g><g><title>[unknown] (1,071,659 samples, 1.48%)</title><rect x="50.4800%" y="229" width="1.4759%" height="15" fill="rgb(220,109,13)" fg:x="36652615" fg:w="1071659"/><text x="50.7300%" y="239.50"></text></g><g><title>[unknown] (1,071,659 samples, 1.48%)</title><rect x="50.4800%" y="213" width="1.4759%" height="15" fill="rgb(232,18,1)" fg:x="36652615" fg:w="1071659"/><text x="50.7300%" y="223.50"></text></g><g><title>[unknown] (501,504 samples, 0.69%)</title><rect x="51.2653%" y="197" width="0.6907%" height="15" fill="rgb(215,41,42)" fg:x="37222770" fg:w="501504"/><text x="51.5153%" y="207.50"></text></g><g><title>[unknown] (501,504 samples, 0.69%)</title><rect x="51.2653%" y="181" width="0.6907%" height="15" fill="rgb(224,123,36)" fg:x="37222770" fg:w="501504"/><text x="51.5153%" y="191.50"></text></g><g><title>[unknown] (501,504 samples, 0.69%)</title><rect x="51.2653%" y="165" width="0.6907%" height="15" fill="rgb(240,125,3)" fg:x="37222770" fg:w="501504"/><text x="51.5153%" y="175.50"></text></g><g><title>_start (3,258,929 samples, 4.49%)</title><rect x="49.1738%" y="517" width="4.4884%" height="15" fill="rgb(205,98,50)" fg:x="35704162" fg:w="3258929"/><text x="49.4238%" y="527.50">_start</text></g><g><title>_dl_start (3,258,929 samples, 4.49%)</title><rect x="49.1738%" y="501" width="4.4884%" height="15" fill="rgb(205,185,37)" fg:x="35704162" fg:w="3258929"/><text x="49.4238%" y="511.50">_dl_s..</text></g><g><title>_dl_start_final (3,258,929 samples, 4.49%)</title><rect x="49.1738%" y="485" width="4.4884%" height="15" fill="rgb(238,207,15)" fg:x="35704162" fg:w="3258929"/><text x="49.4238%" y="495.50">_dl_s..</text></g><g><title>_dl_sysdep_start (3,258,929 samples, 4.49%)</title><rect x="49.1738%" y="469" width="4.4884%" height="15" fill="rgb(213,199,42)" fg:x="35704162" fg:w="3258929"/><text x="49.4238%" y="479.50">_dl_s..</text></g><g><title>dl_main (3,258,929 samples, 4.49%)</title><rect x="49.1738%" y="453" width="4.4884%" height="15" fill="rgb(235,201,11)" fg:x="35704162" fg:w="3258929"/><text x="49.4238%" y="463.50">dl_ma..</text></g><g><title>_dl_relocate_object (1,238,817 samples, 1.71%)</title><rect x="51.9560%" y="437" width="1.7062%" height="15" fill="rgb(207,46,11)" fg:x="37724274" fg:w="1238817"/><text x="52.2060%" y="447.50"></text></g><g><title>elf_dynamic_do_Rela (1,238,817 samples, 1.71%)</title><rect x="51.9560%" y="421" width="1.7062%" height="15" fill="rgb(241,35,35)" fg:x="37724274" fg:w="1238817"/><text x="52.2060%" y="431.50"></text></g><g><title>elf_machine_rela (605,092 samples, 0.83%)</title><rect x="52.8288%" y="405" width="0.8334%" height="15" fill="rgb(243,32,47)" fg:x="38357999" fg:w="605092"/><text x="53.0788%" y="415.50"></text></g><g><title>_dl_lookup_symbol_x (605,092 samples, 0.83%)</title><rect x="52.8288%" y="389" width="0.8334%" height="15" fill="rgb(247,202,23)" fg:x="38357999" fg:w="605092"/><text x="53.0788%" y="399.50"></text></g><g><title>do_lookup_x (605,092 samples, 0.83%)</title><rect x="52.8288%" y="373" width="0.8334%" height="15" fill="rgb(219,102,11)" fg:x="38357999" fg:w="605092"/><text x="53.0788%" y="383.50"></text></g><g><title>alloc::fmt::format::format_inner (776,014 samples, 1.07%)</title><rect x="53.6622%" y="517" width="1.0688%" height="15" fill="rgb(243,110,44)" fg:x="38963091" fg:w="776014"/><text x="53.9122%" y="527.50"></text></g><g><title>colored::color::Color::closest_color_euclidean (791,033 samples, 1.09%)</title><rect x="54.7309%" y="517" width="1.0895%" height="15" fill="rgb(222,74,54)" fg:x="39739105" fg:w="791033"/><text x="54.9809%" y="527.50"></text></g><g><title>core::fmt::write (786,611 samples, 1.08%)</title><rect x="55.8204%" y="517" width="1.0834%" height="15" fill="rgb(216,99,12)" fg:x="40530138" fg:w="786611"/><text x="56.0704%" y="527.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (782,642 samples, 1.08%)</title><rect x="56.9037%" y="517" width="1.0779%" height="15" fill="rgb(226,22,26)" fg:x="41316749" fg:w="782642"/><text x="57.1537%" y="527.50"></text></g><g><title>__GI___libc_free (782,642 samples, 1.08%)</title><rect x="56.9037%" y="501" width="1.0779%" height="15" fill="rgb(217,163,10)" fg:x="41316749" fg:w="782642"/><text x="57.1537%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;fi_slurm::nodes::Node&gt; (790,060 samples, 1.09%)</title><rect x="57.9816%" y="517" width="1.0881%" height="15" fill="rgb(213,25,53)" fg:x="42099391" fg:w="790060"/><text x="58.2316%" y="527.50"></text></g><g><title>_int_free (790,060 samples, 1.09%)</title><rect x="57.9816%" y="501" width="1.0881%" height="15" fill="rgb(252,105,26)" fg:x="42099391" fg:w="790060"/><text x="58.2316%" y="511.50"></text></g><g><title>malloc_consolidate (790,060 samples, 1.09%)</title><rect x="57.9816%" y="485" width="1.0881%" height="15" fill="rgb(220,39,43)" fg:x="42099391" fg:w="790060"/><text x="58.2316%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;fi_slurm::nodes::NodeState&gt; (3,161,932 samples, 4.35%)</title><rect x="59.0698%" y="517" width="4.3548%" height="15" fill="rgb(229,68,48)" fg:x="42889451" fg:w="3161932"/><text x="59.3198%" y="527.50">core:..</text></g><g><title>_int_free (2,370,816 samples, 3.27%)</title><rect x="60.1593%" y="501" width="3.2652%" height="15" fill="rgb(252,8,32)" fg:x="43680567" fg:w="2370816"/><text x="60.4093%" y="511.50">_in..</text></g><g><title>acct_storage_g_init (783,853 samples, 1.08%)</title><rect x="63.4245%" y="485" width="1.0796%" height="15" fill="rgb(223,20,43)" fg:x="46051383" fg:w="783853"/><text x="63.6745%" y="495.50"></text></g><g><title>plugin_context_create (783,853 samples, 1.08%)</title><rect x="63.4245%" y="469" width="1.0796%" height="15" fill="rgb(229,81,49)" fg:x="46051383" fg:w="783853"/><text x="63.6745%" y="479.50"></text></g><g><title>plugin_load_and_link (783,853 samples, 1.08%)</title><rect x="63.4245%" y="453" width="1.0796%" height="15" fill="rgb(236,28,36)" fg:x="46051383" fg:w="783853"/><text x="63.6745%" y="463.50"></text></g><g><title>plugin_load_from_file (783,853 samples, 1.08%)</title><rect x="63.4245%" y="437" width="1.0796%" height="15" fill="rgb(249,185,26)" fg:x="46051383" fg:w="783853"/><text x="63.6745%" y="447.50"></text></g><g><title>__dlopen_check (783,853 samples, 1.08%)</title><rect x="63.4245%" y="421" width="1.0796%" height="15" fill="rgb(249,174,33)" fg:x="46051383" fg:w="783853"/><text x="63.6745%" y="431.50"></text></g><g><title>_dlerror_run (783,853 samples, 1.08%)</title><rect x="63.4245%" y="405" width="1.0796%" height="15" fill="rgb(233,201,37)" fg:x="46051383" fg:w="783853"/><text x="63.6745%" y="415.50"></text></g><g><title>__GI__dl_catch_error (783,853 samples, 1.08%)</title><rect x="63.4245%" y="389" width="1.0796%" height="15" fill="rgb(221,78,26)" fg:x="46051383" fg:w="783853"/><text x="63.6745%" y="399.50"></text></g><g><title>__GI__dl_catch_exception (783,853 samples, 1.08%)</title><rect x="63.4245%" y="373" width="1.0796%" height="15" fill="rgb(250,127,30)" fg:x="46051383" fg:w="783853"/><text x="63.6745%" y="383.50"></text></g><g><title>dlopen_doit (783,853 samples, 1.08%)</title><rect x="63.4245%" y="357" width="1.0796%" height="15" fill="rgb(230,49,44)" fg:x="46051383" fg:w="783853"/><text x="63.6745%" y="367.50"></text></g><g><title>_dl_open (783,853 samples, 1.08%)</title><rect x="63.4245%" y="341" width="1.0796%" height="15" fill="rgb(229,67,23)" fg:x="46051383" fg:w="783853"/><text x="63.6745%" y="351.50"></text></g><g><title>__GI__dl_catch_exception (783,853 samples, 1.08%)</title><rect x="63.4245%" y="325" width="1.0796%" height="15" fill="rgb(249,83,47)" fg:x="46051383" fg:w="783853"/><text x="63.6745%" y="335.50"></text></g><g><title>dl_open_worker (783,853 samples, 1.08%)</title><rect x="63.4245%" y="309" width="1.0796%" height="15" fill="rgb(215,43,3)" fg:x="46051383" fg:w="783853"/><text x="63.6745%" y="319.50"></text></g><g><title>__GI__dl_catch_exception (783,853 samples, 1.08%)</title><rect x="63.4245%" y="293" width="1.0796%" height="15" fill="rgb(238,154,13)" fg:x="46051383" fg:w="783853"/><text x="63.6745%" y="303.50"></text></g><g><title>dl_open_worker_begin (783,853 samples, 1.08%)</title><rect x="63.4245%" y="277" width="1.0796%" height="15" fill="rgb(219,56,2)" fg:x="46051383" fg:w="783853"/><text x="63.6745%" y="287.50"></text></g><g><title>_dl_map_object (783,853 samples, 1.08%)</title><rect x="63.4245%" y="261" width="1.0796%" height="15" fill="rgb(233,0,4)" fg:x="46051383" fg:w="783853"/><text x="63.6745%" y="271.50"></text></g><g><title>_dl_map_object_from_fd (783,853 samples, 1.08%)</title><rect x="63.4245%" y="245" width="1.0796%" height="15" fill="rgb(235,30,7)" fg:x="46051383" fg:w="783853"/><text x="63.6745%" y="255.50"></text></g><g><title>_dl_map_segments (783,853 samples, 1.08%)</title><rect x="63.4245%" y="229" width="1.0796%" height="15" fill="rgb(250,79,13)" fg:x="46051383" fg:w="783853"/><text x="63.6745%" y="239.50"></text></g><g><title>__mmap64 (783,853 samples, 1.08%)</title><rect x="63.4245%" y="213" width="1.0796%" height="15" fill="rgb(211,146,34)" fg:x="46051383" fg:w="783853"/><text x="63.6745%" y="223.50"></text></g><g><title>__mmap64 (783,853 samples, 1.08%)</title><rect x="63.4245%" y="197" width="1.0796%" height="15" fill="rgb(228,22,38)" fg:x="46051383" fg:w="783853"/><text x="63.6745%" y="207.50"></text></g><g><title>[unknown] (783,853 samples, 1.08%)</title><rect x="63.4245%" y="181" width="1.0796%" height="15" fill="rgb(235,168,5)" fg:x="46051383" fg:w="783853"/><text x="63.6745%" y="191.50"></text></g><g><title>[unknown] (783,853 samples, 1.08%)</title><rect x="63.4245%" y="165" width="1.0796%" height="15" fill="rgb(221,155,16)" fg:x="46051383" fg:w="783853"/><text x="63.6745%" y="175.50"></text></g><g><title>[unknown] (783,853 samples, 1.08%)</title><rect x="63.4245%" y="149" width="1.0796%" height="15" fill="rgb(215,215,53)" fg:x="46051383" fg:w="783853"/><text x="63.6745%" y="159.50"></text></g><g><title>[unknown] (783,853 samples, 1.08%)</title><rect x="63.4245%" y="133" width="1.0796%" height="15" fill="rgb(223,4,10)" fg:x="46051383" fg:w="783853"/><text x="63.6745%" y="143.50"></text></g><g><title>[unknown] (783,853 samples, 1.08%)</title><rect x="63.4245%" y="117" width="1.0796%" height="15" fill="rgb(234,103,6)" fg:x="46051383" fg:w="783853"/><text x="63.6745%" y="127.50"></text></g><g><title>[unknown] (783,853 samples, 1.08%)</title><rect x="63.4245%" y="101" width="1.0796%" height="15" fill="rgb(227,97,0)" fg:x="46051383" fg:w="783853"/><text x="63.6745%" y="111.50"></text></g><g><title>[unknown] (783,853 samples, 1.08%)</title><rect x="63.4245%" y="85" width="1.0796%" height="15" fill="rgb(234,150,53)" fg:x="46051383" fg:w="783853"/><text x="63.6745%" y="95.50"></text></g><g><title>_strip_escapes (720,481 samples, 0.99%)</title><rect x="64.5041%" y="421" width="0.9923%" height="15" fill="rgb(228,201,54)" fg:x="46835236" fg:w="720481"/><text x="64.7541%" y="431.50"></text></g><g><title>_get_next_line (1,492,728 samples, 2.06%)</title><rect x="64.5041%" y="437" width="2.0559%" height="15" fill="rgb(222,22,37)" fg:x="46835236" fg:w="1492728"/><text x="64.7541%" y="447.50">_..</text></g><g><title>fgets (772,247 samples, 1.06%)</title><rect x="65.4964%" y="421" width="1.0636%" height="15" fill="rgb(237,53,32)" fg:x="47555717" fg:w="772247"/><text x="65.7464%" y="431.50"></text></g><g><title>fgets (772,247 samples, 1.06%)</title><rect x="65.4964%" y="405" width="1.0636%" height="15" fill="rgb(233,25,53)" fg:x="47555717" fg:w="772247"/><text x="65.7464%" y="415.50"></text></g><g><title>__GI__IO_getline_info (772,247 samples, 1.06%)</title><rect x="65.4964%" y="389" width="1.0636%" height="15" fill="rgb(210,40,34)" fg:x="47555717" fg:w="772247"/><text x="65.7464%" y="399.50"></text></g><g><title>__GI__IO_default_uflow (772,247 samples, 1.06%)</title><rect x="65.4964%" y="373" width="1.0636%" height="15" fill="rgb(241,220,44)" fg:x="47555717" fg:w="772247"/><text x="65.7464%" y="383.50"></text></g><g><title>__GI__IO_file_underflow (772,247 samples, 1.06%)</title><rect x="65.4964%" y="357" width="1.0636%" height="15" fill="rgb(235,28,35)" fg:x="47555717" fg:w="772247"/><text x="65.7464%" y="367.50"></text></g><g><title>__GI___read (772,247 samples, 1.06%)</title><rect x="65.4964%" y="341" width="1.0636%" height="15" fill="rgb(210,56,17)" fg:x="47555717" fg:w="772247"/><text x="65.7464%" y="351.50"></text></g><g><title>[unknown] (772,247 samples, 1.06%)</title><rect x="65.4964%" y="325" width="1.0636%" height="15" fill="rgb(224,130,29)" fg:x="47555717" fg:w="772247"/><text x="65.7464%" y="335.50"></text></g><g><title>__GI___regcomp (752,003 samples, 1.04%)</title><rect x="66.5600%" y="341" width="1.0357%" height="15" fill="rgb(235,212,8)" fg:x="48327964" fg:w="752003"/><text x="66.8100%" y="351.50"></text></g><g><title>re_compile_internal (752,003 samples, 1.04%)</title><rect x="66.5600%" y="325" width="1.0357%" height="15" fill="rgb(223,33,50)" fg:x="48327964" fg:w="752003"/><text x="66.8100%" y="335.50"></text></g><g><title>postorder (752,003 samples, 1.04%)</title><rect x="66.5600%" y="309" width="1.0357%" height="15" fill="rgb(219,149,13)" fg:x="48327964" fg:w="752003"/><text x="66.8100%" y="319.50"></text></g><g><title>slurm_xcalloc (765,417 samples, 1.05%)</title><rect x="67.5957%" y="341" width="1.0542%" height="15" fill="rgb(250,156,29)" fg:x="49079967" fg:w="765417"/><text x="67.8457%" y="351.50"></text></g><g><title>__calloc (765,417 samples, 1.05%)</title><rect x="67.5957%" y="325" width="1.0542%" height="15" fill="rgb(216,193,19)" fg:x="49079967" fg:w="765417"/><text x="67.8457%" y="335.50"></text></g><g><title>_int_malloc (765,417 samples, 1.05%)</title><rect x="67.5957%" y="309" width="1.0542%" height="15" fill="rgb(216,135,14)" fg:x="49079967" fg:w="765417"/><text x="67.8457%" y="319.50"></text></g><g><title>malloc_consolidate (765,417 samples, 1.05%)</title><rect x="67.5957%" y="293" width="1.0542%" height="15" fill="rgb(241,47,5)" fg:x="49079967" fg:w="765417"/><text x="67.8457%" y="303.50"></text></g><g><title>s_p_hashtbl_create (2,263,592 samples, 3.12%)</title><rect x="66.5600%" y="373" width="3.1175%" height="15" fill="rgb(233,42,35)" fg:x="48327964" fg:w="2263592"/><text x="66.8100%" y="383.50">s_p..</text></g><g><title>s_p_hashtbl_create_cnt (2,263,592 samples, 3.12%)</title><rect x="66.5600%" y="357" width="3.1175%" height="15" fill="rgb(231,13,6)" fg:x="48327964" fg:w="2263592"/><text x="66.8100%" y="367.50">s_p..</text></g><g><title>xstrdup (746,172 samples, 1.03%)</title><rect x="68.6499%" y="341" width="1.0277%" height="15" fill="rgb(207,181,40)" fg:x="49845384" fg:w="746172"/><text x="68.8999%" y="351.50"></text></g><g><title>_parse_nodename (3,001,593 samples, 4.13%)</title><rect x="66.5600%" y="389" width="4.1340%" height="15" fill="rgb(254,173,49)" fg:x="48327964" fg:w="3001593"/><text x="66.8100%" y="399.50">_pars..</text></g><g><title>s_p_parse_line (738,001 samples, 1.02%)</title><rect x="69.6775%" y="373" width="1.0164%" height="15" fill="rgb(221,1,38)" fg:x="50591556" fg:w="738001"/><text x="69.9275%" y="383.50"></text></g><g><title>_keyvalue_regex (738,001 samples, 1.02%)</title><rect x="69.6775%" y="357" width="1.0164%" height="15" fill="rgb(206,124,46)" fg:x="50591556" fg:w="738001"/><text x="69.9275%" y="367.50"></text></g><g><title>__regexec (738,001 samples, 1.02%)</title><rect x="69.6775%" y="341" width="1.0164%" height="15" fill="rgb(249,21,11)" fg:x="50591556" fg:w="738001"/><text x="69.9275%" y="351.50"></text></g><g><title>re_search_internal (738,001 samples, 1.02%)</title><rect x="69.6775%" y="325" width="1.0164%" height="15" fill="rgb(222,201,40)" fg:x="50591556" fg:w="738001"/><text x="69.9275%" y="335.50"></text></g><g><title>build_trtable (738,001 samples, 1.02%)</title><rect x="69.6775%" y="309" width="1.0164%" height="15" fill="rgb(235,61,29)" fg:x="50591556" fg:w="738001"/><text x="69.9275%" y="319.50"></text></g><g><title>re_node_set_merge (738,001 samples, 1.02%)</title><rect x="69.6775%" y="293" width="1.0164%" height="15" fill="rgb(219,207,3)" fg:x="50591556" fg:w="738001"/><text x="69.9275%" y="303.50"></text></g><g><title>__GI___libc_realloc (738,001 samples, 1.02%)</title><rect x="69.6775%" y="277" width="1.0164%" height="15" fill="rgb(222,56,46)" fg:x="50591556" fg:w="738001"/><text x="69.9275%" y="287.50"></text></g><g><title>_int_realloc (738,001 samples, 1.02%)</title><rect x="69.6775%" y="261" width="1.0164%" height="15" fill="rgb(239,76,54)" fg:x="50591556" fg:w="738001"/><text x="69.9275%" y="271.50"></text></g><g><title>_parse_nodeset (769,037 samples, 1.06%)</title><rect x="70.6939%" y="389" width="1.0592%" height="15" fill="rgb(231,124,27)" fg:x="51329557" fg:w="769037"/><text x="70.9439%" y="399.50"></text></g><g><title>s_p_hashtbl_create (769,037 samples, 1.06%)</title><rect x="70.6939%" y="373" width="1.0592%" height="15" fill="rgb(249,195,6)" fg:x="51329557" fg:w="769037"/><text x="70.9439%" y="383.50"></text></g><g><title>s_p_hashtbl_create_cnt (769,037 samples, 1.06%)</title><rect x="70.6939%" y="357" width="1.0592%" height="15" fill="rgb(237,174,47)" fg:x="51329557" fg:w="769037"/><text x="70.9439%" y="367.50"></text></g><g><title>__GI___regcomp (769,037 samples, 1.06%)</title><rect x="70.6939%" y="341" width="1.0592%" height="15" fill="rgb(206,201,31)" fg:x="51329557" fg:w="769037"/><text x="70.9439%" y="351.50"></text></g><g><title>re_compile_internal (769,037 samples, 1.06%)</title><rect x="70.6939%" y="325" width="1.0592%" height="15" fill="rgb(231,57,52)" fg:x="51329557" fg:w="769037"/><text x="70.9439%" y="335.50"></text></g><g><title>calc_eclosure_iter (769,037 samples, 1.06%)</title><rect x="70.6939%" y="309" width="1.0592%" height="15" fill="rgb(248,177,22)" fg:x="51329557" fg:w="769037"/><text x="70.9439%" y="319.50"></text></g><g><title>re_node_set_insert (769,037 samples, 1.06%)</title><rect x="70.6939%" y="293" width="1.0592%" height="15" fill="rgb(215,211,37)" fg:x="51329557" fg:w="769037"/><text x="70.9439%" y="303.50"></text></g><g><title>s_p_get_string (779,775 samples, 1.07%)</title><rect x="71.7531%" y="373" width="1.0739%" height="15" fill="rgb(241,128,51)" fg:x="52098594" fg:w="779775"/><text x="72.0031%" y="383.50"></text></g><g><title>_get_check (779,775 samples, 1.07%)</title><rect x="71.7531%" y="357" width="1.0739%" height="15" fill="rgb(227,165,31)" fg:x="52098594" fg:w="779775"/><text x="72.0031%" y="367.50"></text></g><g><title>_conf_hashtbl_lookup (779,775 samples, 1.07%)</title><rect x="71.7531%" y="341" width="1.0739%" height="15" fill="rgb(228,167,24)" fg:x="52098594" fg:w="779775"/><text x="72.0031%" y="351.50"></text></g><g><title>_conf_hashtbl_index (779,775 samples, 1.07%)</title><rect x="71.7531%" y="325" width="1.0739%" height="15" fill="rgb(228,143,12)" fg:x="52098594" fg:w="779775"/><text x="72.0031%" y="335.50"></text></g><g><title>s_p_hashtbl_create (776,842 samples, 1.07%)</title><rect x="72.8271%" y="373" width="1.0699%" height="15" fill="rgb(249,149,8)" fg:x="52878369" fg:w="776842"/><text x="73.0771%" y="383.50"></text></g><g><title>s_p_hashtbl_create_cnt (776,842 samples, 1.07%)</title><rect x="72.8271%" y="357" width="1.0699%" height="15" fill="rgb(243,35,44)" fg:x="52878369" fg:w="776842"/><text x="73.0771%" y="367.50"></text></g><g><title>__GI___regcomp (776,842 samples, 1.07%)</title><rect x="72.8271%" y="341" width="1.0699%" height="15" fill="rgb(246,89,9)" fg:x="52878369" fg:w="776842"/><text x="73.0771%" y="351.50"></text></g><g><title>re_compile_internal (776,842 samples, 1.07%)</title><rect x="72.8271%" y="325" width="1.0699%" height="15" fill="rgb(233,213,13)" fg:x="52878369" fg:w="776842"/><text x="73.0771%" y="335.50"></text></g><g><title>parse_reg_exp (776,842 samples, 1.07%)</title><rect x="72.8271%" y="309" width="1.0699%" height="15" fill="rgb(233,141,41)" fg:x="52878369" fg:w="776842"/><text x="73.0771%" y="319.50"></text></g><g><title>parse_branch (776,842 samples, 1.07%)</title><rect x="72.8271%" y="293" width="1.0699%" height="15" fill="rgb(239,167,4)" fg:x="52878369" fg:w="776842"/><text x="73.0771%" y="303.50"></text></g><g><title>parse_expression (776,842 samples, 1.07%)</title><rect x="72.8271%" y="277" width="1.0699%" height="15" fill="rgb(209,217,16)" fg:x="52878369" fg:w="776842"/><text x="73.0771%" y="287.50"></text></g><g><title>parse_reg_exp (776,842 samples, 1.07%)</title><rect x="72.8271%" y="261" width="1.0699%" height="15" fill="rgb(219,88,35)" fg:x="52878369" fg:w="776842"/><text x="73.0771%" y="271.50"></text></g><g><title>parse_branch (776,842 samples, 1.07%)</title><rect x="72.8271%" y="245" width="1.0699%" height="15" fill="rgb(220,193,23)" fg:x="52878369" fg:w="776842"/><text x="73.0771%" y="255.50"></text></g><g><title>parse_expression (776,842 samples, 1.07%)</title><rect x="72.8271%" y="229" width="1.0699%" height="15" fill="rgb(230,90,52)" fg:x="52878369" fg:w="776842"/><text x="73.0771%" y="239.50"></text></g><g><title>build_charclass.isra.30 (776,842 samples, 1.07%)</title><rect x="72.8271%" y="213" width="1.0699%" height="15" fill="rgb(252,106,19)" fg:x="52878369" fg:w="776842"/><text x="73.0771%" y="223.50"></text></g><g><title>_int_free (780,989 samples, 1.08%)</title><rect x="73.8970%" y="309" width="1.0756%" height="15" fill="rgb(206,74,20)" fg:x="53655211" fg:w="780989"/><text x="74.1470%" y="319.50"></text></g><g><title>set_regs (782,333 samples, 1.08%)</title><rect x="74.9726%" y="309" width="1.0775%" height="15" fill="rgb(230,138,44)" fg:x="54436200" fg:w="782333"/><text x="75.2226%" y="319.50"></text></g><g><title>_handle_keyvalue_match (7,665,083 samples, 10.56%)</title><rect x="66.5600%" y="421" width="10.5568%" height="15" fill="rgb(235,182,43)" fg:x="48327964" fg:w="7665083"/><text x="66.8100%" y="431.50">_handle_keyvalu..</text></g><g><title>_handle_array (7,665,083 samples, 10.56%)</title><rect x="66.5600%" y="405" width="10.5568%" height="15" fill="rgb(242,16,51)" fg:x="48327964" fg:w="7665083"/><text x="66.8100%" y="415.50">_handle_array</text></g><g><title>_parse_partitionname (3,894,453 samples, 5.36%)</title><rect x="71.7531%" y="389" width="5.3637%" height="15" fill="rgb(248,9,4)" fg:x="52098594" fg:w="3894453"/><text x="72.0031%" y="399.50">_parse_..</text></g><g><title>s_p_parse_line (2,337,836 samples, 3.22%)</title><rect x="73.8970%" y="373" width="3.2198%" height="15" fill="rgb(210,31,22)" fg:x="53655211" fg:w="2337836"/><text x="74.1470%" y="383.50">s_p..</text></g><g><title>_keyvalue_regex (2,337,836 samples, 3.22%)</title><rect x="73.8970%" y="357" width="3.2198%" height="15" fill="rgb(239,54,39)" fg:x="53655211" fg:w="2337836"/><text x="74.1470%" y="367.50">_ke..</text></g><g><title>__regexec (2,337,836 samples, 3.22%)</title><rect x="73.8970%" y="341" width="3.2198%" height="15" fill="rgb(230,99,41)" fg:x="53655211" fg:w="2337836"/><text x="74.1470%" y="351.50">__r..</text></g><g><title>re_search_internal (2,337,836 samples, 3.22%)</title><rect x="73.8970%" y="325" width="3.2198%" height="15" fill="rgb(253,106,12)" fg:x="53655211" fg:w="2337836"/><text x="74.1470%" y="335.50">re_..</text></g><g><title>sift_states_backward (774,514 samples, 1.07%)</title><rect x="76.0501%" y="309" width="1.0667%" height="15" fill="rgb(213,46,41)" fg:x="55218533" fg:w="774514"/><text x="76.3001%" y="319.50"></text></g><g><title>update_cur_sifted_state (774,514 samples, 1.07%)</title><rect x="76.0501%" y="293" width="1.0667%" height="15" fill="rgb(215,133,35)" fg:x="55218533" fg:w="774514"/><text x="76.3001%" y="303.50"></text></g><g><title>re_acquire_state (774,514 samples, 1.07%)</title><rect x="76.0501%" y="277" width="1.0667%" height="15" fill="rgb(213,28,5)" fg:x="55218533" fg:w="774514"/><text x="76.3001%" y="287.50"></text></g><g><title>re_node_set_init_copy (774,514 samples, 1.07%)</title><rect x="76.0501%" y="261" width="1.0667%" height="15" fill="rgb(215,77,49)" fg:x="55218533" fg:w="774514"/><text x="76.3001%" y="271.50"></text></g><g><title>__GI___libc_malloc (774,514 samples, 1.07%)</title><rect x="76.0501%" y="245" width="1.0667%" height="15" fill="rgb(248,100,22)" fg:x="55218533" fg:w="774514"/><text x="76.3001%" y="255.50"></text></g><g><title>fi_node::main (10,648,954 samples, 14.67%)</title><rect x="63.4245%" y="517" width="14.6663%" height="15" fill="rgb(208,67,9)" fg:x="46051383" fg:w="10648954"/><text x="63.6745%" y="527.50">fi_node::main</text></g><g><title>slurm_init (10,648,954 samples, 14.67%)</title><rect x="63.4245%" y="501" width="14.6663%" height="15" fill="rgb(219,133,21)" fg:x="46051383" fg:w="10648954"/><text x="63.6745%" y="511.50">slurm_init</text></g><g><title>slurm_conf_init (9,865,101 samples, 13.59%)</title><rect x="64.5041%" y="485" width="13.5868%" height="15" fill="rgb(246,46,29)" fg:x="46835236" fg:w="9865101"/><text x="64.7541%" y="495.50">slurm_conf_init</text></g><g><title>_init_slurm_conf (9,865,101 samples, 13.59%)</title><rect x="64.5041%" y="469" width="13.5868%" height="15" fill="rgb(246,185,52)" fg:x="46835236" fg:w="9865101"/><text x="64.7541%" y="479.50">_init_slurm_conf</text></g><g><title>s_p_parse_file (9,865,101 samples, 13.59%)</title><rect x="64.5041%" y="453" width="13.5868%" height="15" fill="rgb(252,136,11)" fg:x="46835236" fg:w="9865101"/><text x="64.7541%" y="463.50">s_p_parse_file</text></g><g><title>_parse_next_key (8,372,373 samples, 11.53%)</title><rect x="66.5600%" y="437" width="11.5309%" height="15" fill="rgb(219,138,53)" fg:x="48327964" fg:w="8372373"/><text x="66.8100%" y="447.50">_parse_next_key</text></g><g><title>_keyvalue_regex (707,290 samples, 0.97%)</title><rect x="77.1168%" y="421" width="0.9741%" height="15" fill="rgb(211,51,23)" fg:x="55993047" fg:w="707290"/><text x="77.3668%" y="431.50"></text></g><g><title>__regexec (707,290 samples, 0.97%)</title><rect x="77.1168%" y="405" width="0.9741%" height="15" fill="rgb(247,221,28)" fg:x="55993047" fg:w="707290"/><text x="77.3668%" y="415.50"></text></g><g><title>re_search_internal (707,290 samples, 0.97%)</title><rect x="77.1168%" y="389" width="0.9741%" height="15" fill="rgb(251,222,45)" fg:x="55993047" fg:w="707290"/><text x="77.3668%" y="399.50"></text></g><g><title>sift_states_backward (707,290 samples, 0.97%)</title><rect x="77.1168%" y="373" width="0.9741%" height="15" fill="rgb(217,162,53)" fg:x="55993047" fg:w="707290"/><text x="77.3668%" y="383.50"></text></g><g><title>update_cur_sifted_state (707,290 samples, 0.97%)</title><rect x="77.1168%" y="357" width="0.9741%" height="15" fill="rgb(229,93,14)" fg:x="55993047" fg:w="707290"/><text x="77.3668%" y="367.50"></text></g><g><title>re_node_set_add_intersect (707,290 samples, 0.97%)</title><rect x="77.1168%" y="341" width="0.9741%" height="15" fill="rgb(209,67,49)" fg:x="55993047" fg:w="707290"/><text x="77.3668%" y="351.50"></text></g><g><title>_open_controller (789,271 samples, 1.09%)</title><rect x="78.0909%" y="453" width="1.0870%" height="15" fill="rgb(213,87,29)" fg:x="56700337" fg:w="789271"/><text x="78.3409%" y="463.50"></text></g><g><title>_slurm_api_get_comm_config (789,271 samples, 1.09%)</title><rect x="78.0909%" y="437" width="1.0870%" height="15" fill="rgb(205,151,52)" fg:x="56700337" fg:w="789271"/><text x="78.3409%" y="447.50"></text></g><g><title>slurm_set_addr (789,271 samples, 1.09%)</title><rect x="78.0909%" y="421" width="1.0870%" height="15" fill="rgb(253,215,39)" fg:x="56700337" fg:w="789271"/><text x="78.3409%" y="431.50"></text></g><g><title>xgetaddrinfo_port (789,271 samples, 1.09%)</title><rect x="78.0909%" y="405" width="1.0870%" height="15" fill="rgb(221,220,41)" fg:x="56700337" fg:w="789271"/><text x="78.3409%" y="415.50"></text></g><g><title>xgetaddrinfo (789,271 samples, 1.09%)</title><rect x="78.0909%" y="389" width="1.0870%" height="15" fill="rgb(218,133,21)" fg:x="56700337" fg:w="789271"/><text x="78.3409%" y="399.50"></text></g><g><title>_xgetaddrinfo (789,271 samples, 1.09%)</title><rect x="78.0909%" y="373" width="1.0870%" height="15" fill="rgb(221,193,43)" fg:x="56700337" fg:w="789271"/><text x="78.3409%" y="383.50"></text></g><g><title>__GI_getaddrinfo (789,271 samples, 1.09%)</title><rect x="78.0909%" y="357" width="1.0870%" height="15" fill="rgb(240,128,52)" fg:x="56700337" fg:w="789271"/><text x="78.3409%" y="367.50"></text></g><g><title>__check_pf (789,271 samples, 1.09%)</title><rect x="78.0909%" y="341" width="1.0870%" height="15" fill="rgb(253,114,12)" fg:x="56700337" fg:w="789271"/><text x="78.3409%" y="351.50"></text></g><g><title>__GI___libc_malloc (789,271 samples, 1.09%)</title><rect x="78.0909%" y="325" width="1.0870%" height="15" fill="rgb(215,223,47)" fg:x="56700337" fg:w="789271"/><text x="78.3409%" y="335.50"></text></g><g><title>_int_malloc (789,271 samples, 1.09%)</title><rect x="78.0909%" y="309" width="1.0870%" height="15" fill="rgb(248,225,23)" fg:x="56700337" fg:w="789271"/><text x="78.3409%" y="319.50"></text></g><g><title>malloc_consolidate (789,271 samples, 1.09%)</title><rect x="78.0909%" y="293" width="1.0870%" height="15" fill="rgb(250,108,0)" fg:x="56700337" fg:w="789271"/><text x="78.3409%" y="303.50"></text></g><g><title>slurm_msg_recvfrom_timeout (789,467 samples, 1.09%)</title><rect x="79.1779%" y="405" width="1.0873%" height="15" fill="rgb(228,208,7)" fg:x="57489608" fg:w="789467"/><text x="79.4279%" y="415.50"></text></g><g><title>slurm_recv_timeout (789,467 samples, 1.09%)</title><rect x="79.1779%" y="389" width="1.0873%" height="15" fill="rgb(244,45,10)" fg:x="57489608" fg:w="789467"/><text x="79.4279%" y="399.50"></text></g><g><title>recv (789,467 samples, 1.09%)</title><rect x="79.1779%" y="373" width="1.0873%" height="15" fill="rgb(207,125,25)" fg:x="57489608" fg:w="789467"/><text x="79.4279%" y="383.50"></text></g><g><title>__libc_recv (789,467 samples, 1.09%)</title><rect x="79.1779%" y="357" width="1.0873%" height="15" fill="rgb(210,195,18)" fg:x="57489608" fg:w="789467"/><text x="79.4279%" y="367.50"></text></g><g><title>[unknown] (789,467 samples, 1.09%)</title><rect x="79.1779%" y="341" width="1.0873%" height="15" fill="rgb(249,80,12)" fg:x="57489608" fg:w="789467"/><text x="79.4279%" y="351.50"></text></g><g><title>[unknown] (789,467 samples, 1.09%)</title><rect x="79.1779%" y="325" width="1.0873%" height="15" fill="rgb(221,65,9)" fg:x="57489608" fg:w="789467"/><text x="79.4279%" y="335.50"></text></g><g><title>[unknown] (789,467 samples, 1.09%)</title><rect x="79.1779%" y="309" width="1.0873%" height="15" fill="rgb(235,49,36)" fg:x="57489608" fg:w="789467"/><text x="79.4279%" y="319.50"></text></g><g><title>[unknown] (789,467 samples, 1.09%)</title><rect x="79.1779%" y="293" width="1.0873%" height="15" fill="rgb(225,32,20)" fg:x="57489608" fg:w="789467"/><text x="79.4279%" y="303.50"></text></g><g><title>[unknown] (789,467 samples, 1.09%)</title><rect x="79.1779%" y="277" width="1.0873%" height="15" fill="rgb(215,141,46)" fg:x="57489608" fg:w="789467"/><text x="79.4279%" y="287.50"></text></g><g><title>[unknown] (789,467 samples, 1.09%)</title><rect x="79.1779%" y="261" width="1.0873%" height="15" fill="rgb(250,160,47)" fg:x="57489608" fg:w="789467"/><text x="79.4279%" y="271.50"></text></g><g><title>[unknown] (789,467 samples, 1.09%)</title><rect x="79.1779%" y="245" width="1.0873%" height="15" fill="rgb(216,222,40)" fg:x="57489608" fg:w="789467"/><text x="79.4279%" y="255.50"></text></g><g><title>[unknown] (789,467 samples, 1.09%)</title><rect x="79.1779%" y="229" width="1.0873%" height="15" fill="rgb(234,217,39)" fg:x="57489608" fg:w="789467"/><text x="79.4279%" y="239.50"></text></g><g><title>[unknown] (789,467 samples, 1.09%)</title><rect x="79.1779%" y="213" width="1.0873%" height="15" fill="rgb(207,178,40)" fg:x="57489608" fg:w="789467"/><text x="79.4279%" y="223.50"></text></g><g><title>[unknown] (789,467 samples, 1.09%)</title><rect x="79.1779%" y="197" width="1.0873%" height="15" fill="rgb(221,136,13)" fg:x="57489608" fg:w="789467"/><text x="79.4279%" y="207.50"></text></g><g><title>[unknown] (789,467 samples, 1.09%)</title><rect x="79.1779%" y="181" width="1.0873%" height="15" fill="rgb(249,199,10)" fg:x="57489608" fg:w="789467"/><text x="79.4279%" y="191.50"></text></g><g><title>bit_unfmt_hexmask (1,628,732 samples, 2.24%)</title><rect x="81.1753%" y="341" width="2.2432%" height="15" fill="rgb(249,222,13)" fg:x="58939855" fg:w="1628732"/><text x="81.4253%" y="351.50">b..</text></g><g><title>[unknown] (1,510,921 samples, 2.08%)</title><rect x="83.4184%" y="277" width="2.0809%" height="15" fill="rgb(244,185,38)" fg:x="60568587" fg:w="1510921"/><text x="83.6684%" y="287.50">[..</text></g><g><title>[unknown] (1,510,921 samples, 2.08%)</title><rect x="83.4184%" y="261" width="2.0809%" height="15" fill="rgb(236,202,9)" fg:x="60568587" fg:w="1510921"/><text x="83.6684%" y="271.50">[..</text></g><g><title>[unknown] (1,510,921 samples, 2.08%)</title><rect x="83.4184%" y="245" width="2.0809%" height="15" fill="rgb(250,229,37)" fg:x="60568587" fg:w="1510921"/><text x="83.6684%" y="255.50">[..</text></g><g><title>[unknown] (806,792 samples, 1.11%)</title><rect x="84.3882%" y="229" width="1.1112%" height="15" fill="rgb(206,174,23)" fg:x="61272716" fg:w="806792"/><text x="84.6382%" y="239.50"></text></g><g><title>[unknown] (806,792 samples, 1.11%)</title><rect x="84.3882%" y="213" width="1.1112%" height="15" fill="rgb(211,33,43)" fg:x="61272716" fg:w="806792"/><text x="84.6382%" y="223.50"></text></g><g><title>malloc_consolidate (810,013 samples, 1.12%)</title><rect x="85.4994%" y="277" width="1.1156%" height="15" fill="rgb(245,58,50)" fg:x="62079508" fg:w="810013"/><text x="85.7494%" y="287.50"></text></g><g><title>bitstr2inx (3,141,193 samples, 4.33%)</title><rect x="83.4184%" y="341" width="4.3262%" height="15" fill="rgb(244,68,36)" fg:x="60568587" fg:w="3141193"/><text x="83.6684%" y="351.50">bitst..</text></g><g><title>slurm_xcalloc (3,141,193 samples, 4.33%)</title><rect x="83.4184%" y="325" width="4.3262%" height="15" fill="rgb(232,229,15)" fg:x="60568587" fg:w="3141193"/><text x="83.6684%" y="335.50">slurm..</text></g><g><title>__GI___libc_malloc (3,141,193 samples, 4.33%)</title><rect x="83.4184%" y="309" width="4.3262%" height="15" fill="rgb(254,30,23)" fg:x="60568587" fg:w="3141193"/><text x="83.6684%" y="319.50">__GI_..</text></g><g><title>_int_malloc (3,141,193 samples, 4.33%)</title><rect x="83.4184%" y="293" width="4.3262%" height="15" fill="rgb(235,160,14)" fg:x="60568587" fg:w="3141193"/><text x="83.6684%" y="303.50">_int_..</text></g><g><title>sysmalloc (820,259 samples, 1.13%)</title><rect x="86.6150%" y="277" width="1.1297%" height="15" fill="rgb(212,155,44)" fg:x="62889521" fg:w="820259"/><text x="86.8650%" y="287.50"></text></g><g><title>[unknown] (820,259 samples, 1.13%)</title><rect x="86.6150%" y="261" width="1.1297%" height="15" fill="rgb(226,2,50)" fg:x="62889521" fg:w="820259"/><text x="86.8650%" y="271.50"></text></g><g><title>[unknown] (820,259 samples, 1.13%)</title><rect x="86.6150%" y="245" width="1.1297%" height="15" fill="rgb(234,177,6)" fg:x="62889521" fg:w="820259"/><text x="86.8650%" y="255.50"></text></g><g><title>[unknown] (820,259 samples, 1.13%)</title><rect x="86.6150%" y="229" width="1.1297%" height="15" fill="rgb(217,24,9)" fg:x="62889521" fg:w="820259"/><text x="86.8650%" y="239.50"></text></g><g><title>[unknown] (820,259 samples, 1.13%)</title><rect x="86.6150%" y="213" width="1.1297%" height="15" fill="rgb(220,13,46)" fg:x="62889521" fg:w="820259"/><text x="86.8650%" y="223.50"></text></g><g><title>fi_slurm::jobs::get_jobs (9,308,648 samples, 12.82%)</title><rect x="78.0909%" y="517" width="12.8204%" height="15" fill="rgb(239,221,27)" fg:x="56700337" fg:w="9308648"/><text x="78.3409%" y="527.50">fi_slurm::jobs::get..</text></g><g><title>slurm_load_jobs (9,308,648 samples, 12.82%)</title><rect x="78.0909%" y="501" width="12.8204%" height="15" fill="rgb(222,198,25)" fg:x="56700337" fg:w="9308648"/><text x="78.3409%" y="511.50">slurm_load_jobs</text></g><g><title>_load_cluster_jobs (9,308,648 samples, 12.82%)</title><rect x="78.0909%" y="485" width="12.8204%" height="15" fill="rgb(211,99,13)" fg:x="56700337" fg:w="9308648"/><text x="78.3409%" y="495.50">_load_cluster_jobs</text></g><g><title>slurm_send_recv_controller_msg (9,308,648 samples, 12.82%)</title><rect x="78.0909%" y="469" width="12.8204%" height="15" fill="rgb(232,111,31)" fg:x="56700337" fg:w="9308648"/><text x="78.3409%" y="479.50">slurm_send_recv_con..</text></g><g><title>_send_and_recv_msg (8,519,377 samples, 11.73%)</title><rect x="79.1779%" y="453" width="11.7334%" height="15" fill="rgb(245,82,37)" fg:x="57489608" fg:w="8519377"/><text x="79.4279%" y="463.50">_send_and_recv_msg</text></g><g><title>slurm_send_recv_msg (8,519,377 samples, 11.73%)</title><rect x="79.1779%" y="437" width="11.7334%" height="15" fill="rgb(227,149,46)" fg:x="57489608" fg:w="8519377"/><text x="79.4279%" y="447.50">slurm_send_recv_m..</text></g><g><title>slurm_receive_msg (8,519,377 samples, 11.73%)</title><rect x="79.1779%" y="421" width="11.7334%" height="15" fill="rgb(218,36,50)" fg:x="57489608" fg:w="8519377"/><text x="79.4279%" y="431.50">slurm_receive_msg</text></g><g><title>slurm_unpack_received_msg (7,729,910 samples, 10.65%)</title><rect x="80.2652%" y="405" width="10.6461%" height="15" fill="rgb(226,80,48)" fg:x="58279075" fg:w="7729910"/><text x="80.5152%" y="415.50">slurm_unpack_rec..</text></g><g><title>unpack_msg (7,729,910 samples, 10.65%)</title><rect x="80.2652%" y="389" width="10.6461%" height="15" fill="rgb(238,224,15)" fg:x="58279075" fg:w="7729910"/><text x="80.5152%" y="399.50">unpack_msg</text></g><g><title>_unpack_job_info_msg (7,729,910 samples, 10.65%)</title><rect x="80.2652%" y="373" width="10.6461%" height="15" fill="rgb(241,136,10)" fg:x="58279075" fg:w="7729910"/><text x="80.5152%" y="383.50">_unpack_job_info..</text></g><g><title>_unpack_job_info_members (7,729,910 samples, 10.65%)</title><rect x="80.2652%" y="357" width="10.6461%" height="15" fill="rgb(208,32,45)" fg:x="58279075" fg:w="7729910"/><text x="80.5152%" y="367.50">_unpack_job_info..</text></g><g><title>unpackstr_xmalloc_chooser (2,299,205 samples, 3.17%)</title><rect x="87.7447%" y="341" width="3.1666%" height="15" fill="rgb(207,135,9)" fg:x="63709780" fg:w="2299205"/><text x="87.9947%" y="351.50">unp..</text></g><g><title>unpackstr_xmalloc (2,299,205 samples, 3.17%)</title><rect x="87.7447%" y="325" width="3.1666%" height="15" fill="rgb(206,86,44)" fg:x="63709780" fg:w="2299205"/><text x="87.9947%" y="335.50">unp..</text></g><g><title>slurm_xcalloc (1,620,825 samples, 2.23%)</title><rect x="88.6790%" y="309" width="2.2323%" height="15" fill="rgb(245,177,15)" fg:x="64388160" fg:w="1620825"/><text x="88.9290%" y="319.50">s..</text></g><g><title>__calloc (804,428 samples, 1.11%)</title><rect x="89.8034%" y="293" width="1.1079%" height="15" fill="rgb(206,64,50)" fg:x="65204557" fg:w="804428"/><text x="90.0534%" y="303.50"></text></g><g><title>_int_malloc (804,428 samples, 1.11%)</title><rect x="89.8034%" y="277" width="1.1079%" height="15" fill="rgb(234,36,40)" fg:x="65204557" fg:w="804428"/><text x="90.0534%" y="287.50"></text></g><g><title>slurm_msg_recvfrom_timeout (1,420,934 samples, 1.96%)</title><rect x="90.9113%" y="405" width="1.9570%" height="15" fill="rgb(213,64,8)" fg:x="66008985" fg:w="1420934"/><text x="91.1613%" y="415.50">s..</text></g><g><title>slurm_recv_timeout (1,420,934 samples, 1.96%)</title><rect x="90.9113%" y="389" width="1.9570%" height="15" fill="rgb(210,75,36)" fg:x="66008985" fg:w="1420934"/><text x="91.1613%" y="399.50">s..</text></g><g><title>recv (1,420,934 samples, 1.96%)</title><rect x="90.9113%" y="373" width="1.9570%" height="15" fill="rgb(229,88,21)" fg:x="66008985" fg:w="1420934"/><text x="91.1613%" y="383.50">r..</text></g><g><title>__libc_recv (1,420,934 samples, 1.96%)</title><rect x="90.9113%" y="357" width="1.9570%" height="15" fill="rgb(252,204,47)" fg:x="66008985" fg:w="1420934"/><text x="91.1613%" y="367.50">_..</text></g><g><title>[unknown] (1,420,934 samples, 1.96%)</title><rect x="90.9113%" y="341" width="1.9570%" height="15" fill="rgb(208,77,27)" fg:x="66008985" fg:w="1420934"/><text x="91.1613%" y="351.50">[..</text></g><g><title>[unknown] (1,420,934 samples, 1.96%)</title><rect x="90.9113%" y="325" width="1.9570%" height="15" fill="rgb(221,76,26)" fg:x="66008985" fg:w="1420934"/><text x="91.1613%" y="335.50">[..</text></g><g><title>[unknown] (1,420,934 samples, 1.96%)</title><rect x="90.9113%" y="309" width="1.9570%" height="15" fill="rgb(225,139,18)" fg:x="66008985" fg:w="1420934"/><text x="91.1613%" y="319.50">[..</text></g><g><title>[unknown] (1,420,934 samples, 1.96%)</title><rect x="90.9113%" y="293" width="1.9570%" height="15" fill="rgb(230,137,11)" fg:x="66008985" fg:w="1420934"/><text x="91.1613%" y="303.50">[..</text></g><g><title>[unknown] (1,420,934 samples, 1.96%)</title><rect x="90.9113%" y="277" width="1.9570%" height="15" fill="rgb(212,28,1)" fg:x="66008985" fg:w="1420934"/><text x="91.1613%" y="287.50">[..</text></g><g><title>[unknown] (1,420,934 samples, 1.96%)</title><rect x="90.9113%" y="261" width="1.9570%" height="15" fill="rgb(248,164,17)" fg:x="66008985" fg:w="1420934"/><text x="91.1613%" y="271.50">[..</text></g><g><title>[unknown] (1,420,934 samples, 1.96%)</title><rect x="90.9113%" y="245" width="1.9570%" height="15" fill="rgb(222,171,42)" fg:x="66008985" fg:w="1420934"/><text x="91.1613%" y="255.50">[..</text></g><g><title>[unknown] (1,420,934 samples, 1.96%)</title><rect x="90.9113%" y="229" width="1.9570%" height="15" fill="rgb(243,84,45)" fg:x="66008985" fg:w="1420934"/><text x="91.1613%" y="239.50">[..</text></g><g><title>[unknown] (1,420,934 samples, 1.96%)</title><rect x="90.9113%" y="213" width="1.9570%" height="15" fill="rgb(252,49,23)" fg:x="66008985" fg:w="1420934"/><text x="91.1613%" y="223.50">[..</text></g><g><title>[unknown] (1,420,934 samples, 1.96%)</title><rect x="90.9113%" y="197" width="1.9570%" height="15" fill="rgb(215,19,7)" fg:x="66008985" fg:w="1420934"/><text x="91.1613%" y="207.50">[..</text></g><g><title>[unknown] (1,420,934 samples, 1.96%)</title><rect x="90.9113%" y="181" width="1.9570%" height="15" fill="rgb(238,81,41)" fg:x="66008985" fg:w="1420934"/><text x="91.1613%" y="191.50">[..</text></g><g><title>[unknown] (1,420,934 samples, 1.96%)</title><rect x="90.9113%" y="165" width="1.9570%" height="15" fill="rgb(210,199,37)" fg:x="66008985" fg:w="1420934"/><text x="91.1613%" y="175.50">[..</text></g><g><title>[unknown] (710,467 samples, 0.98%)</title><rect x="91.8898%" y="149" width="0.9785%" height="15" fill="rgb(244,192,49)" fg:x="66719452" fg:w="710467"/><text x="92.1398%" y="159.50"></text></g><g><title>[unknown] (710,467 samples, 0.98%)</title><rect x="91.8898%" y="133" width="0.9785%" height="15" fill="rgb(226,211,11)" fg:x="66719452" fg:w="710467"/><text x="92.1398%" y="143.50"></text></g><g><title>[unknown] (710,467 samples, 0.98%)</title><rect x="91.8898%" y="117" width="0.9785%" height="15" fill="rgb(236,162,54)" fg:x="66719452" fg:w="710467"/><text x="92.1398%" y="127.50"></text></g><g><title>[unknown] (710,467 samples, 0.98%)</title><rect x="91.8898%" y="101" width="0.9785%" height="15" fill="rgb(220,229,9)" fg:x="66719452" fg:w="710467"/><text x="92.1398%" y="111.50"></text></g><g><title>[unknown] (710,467 samples, 0.98%)</title><rect x="91.8898%" y="85" width="0.9785%" height="15" fill="rgb(250,87,22)" fg:x="66719452" fg:w="710467"/><text x="92.1398%" y="95.50"></text></g><g><title>[unknown] (710,467 samples, 0.98%)</title><rect x="91.8898%" y="69" width="0.9785%" height="15" fill="rgb(239,43,17)" fg:x="66719452" fg:w="710467"/><text x="92.1398%" y="79.50"></text></g><g><title>select_g_select_nodeinfo_unpack (756,482 samples, 1.04%)</title><rect x="92.8683%" y="341" width="1.0419%" height="15" fill="rgb(231,177,25)" fg:x="67429919" fg:w="756482"/><text x="93.1183%" y="351.50"></text></g><g><title>slurm_xcalloc (756,482 samples, 1.04%)</title><rect x="92.8683%" y="325" width="1.0419%" height="15" fill="rgb(219,179,1)" fg:x="67429919" fg:w="756482"/><text x="93.1183%" y="335.50"></text></g><g><title>__calloc (756,482 samples, 1.04%)</title><rect x="92.8683%" y="309" width="1.0419%" height="15" fill="rgb(238,219,53)" fg:x="67429919" fg:w="756482"/><text x="93.1183%" y="319.50"></text></g><g><title>slurm_init_node_info_t (697,562 samples, 0.96%)</title><rect x="93.9101%" y="341" width="0.9607%" height="15" fill="rgb(232,167,36)" fg:x="68186401" fg:w="697562"/><text x="94.1601%" y="351.50"></text></g><g><title>[unknown] (697,562 samples, 0.96%)</title><rect x="93.9101%" y="325" width="0.9607%" height="15" fill="rgb(244,19,51)" fg:x="68186401" fg:w="697562"/><text x="94.1601%" y="335.50"></text></g><g><title>[unknown] (697,562 samples, 0.96%)</title><rect x="93.9101%" y="309" width="0.9607%" height="15" fill="rgb(224,6,22)" fg:x="68186401" fg:w="697562"/><text x="94.1601%" y="319.50"></text></g><g><title>[unknown] (697,562 samples, 0.96%)</title><rect x="93.9101%" y="293" width="0.9607%" height="15" fill="rgb(224,145,5)" fg:x="68186401" fg:w="697562"/><text x="94.1601%" y="303.50"></text></g><g><title>[unknown] (697,562 samples, 0.96%)</title><rect x="93.9101%" y="277" width="0.9607%" height="15" fill="rgb(234,130,49)" fg:x="68186401" fg:w="697562"/><text x="94.1601%" y="287.50"></text></g><g><title>[unknown] (697,562 samples, 0.96%)</title><rect x="93.9101%" y="261" width="0.9607%" height="15" fill="rgb(254,6,2)" fg:x="68186401" fg:w="697562"/><text x="94.1601%" y="271.50"></text></g><g><title>fi_slurm::nodes::get_nodes (4,381,927 samples, 6.04%)</title><rect x="90.9113%" y="517" width="6.0350%" height="15" fill="rgb(208,96,46)" fg:x="66008985" fg:w="4381927"/><text x="91.1613%" y="527.50">fi_slurm..</text></g><g><title>slurm_load_node (4,381,927 samples, 6.04%)</title><rect x="90.9113%" y="501" width="6.0350%" height="15" fill="rgb(239,3,39)" fg:x="66008985" fg:w="4381927"/><text x="91.1613%" y="511.50">slurm_lo..</text></g><g><title>_load_cluster_nodes (4,381,927 samples, 6.04%)</title><rect x="90.9113%" y="485" width="6.0350%" height="15" fill="rgb(233,210,1)" fg:x="66008985" fg:w="4381927"/><text x="91.1613%" y="495.50">_load_cl..</text></g><g><title>slurm_send_recv_controller_msg (4,381,927 samples, 6.04%)</title><rect x="90.9113%" y="469" width="6.0350%" height="15" fill="rgb(244,137,37)" fg:x="66008985" fg:w="4381927"/><text x="91.1613%" y="479.50">slurm_se..</text></g><g><title>_send_and_recv_msg (4,381,927 samples, 6.04%)</title><rect x="90.9113%" y="453" width="6.0350%" height="15" fill="rgb(240,136,2)" fg:x="66008985" fg:w="4381927"/><text x="91.1613%" y="463.50">_send_an..</text></g><g><title>slurm_send_recv_msg (4,381,927 samples, 6.04%)</title><rect x="90.9113%" y="437" width="6.0350%" height="15" fill="rgb(239,18,37)" fg:x="66008985" fg:w="4381927"/><text x="91.1613%" y="447.50">slurm_se..</text></g><g><title>slurm_receive_msg (4,381,927 samples, 6.04%)</title><rect x="90.9113%" y="421" width="6.0350%" height="15" fill="rgb(218,185,22)" fg:x="66008985" fg:w="4381927"/><text x="91.1613%" y="431.50">slurm_re..</text></g><g><title>slurm_unpack_received_msg (2,960,993 samples, 4.08%)</title><rect x="92.8683%" y="405" width="4.0780%" height="15" fill="rgb(225,218,4)" fg:x="67429919" fg:w="2960993"/><text x="93.1183%" y="415.50">slur..</text></g><g><title>unpack_msg (2,960,993 samples, 4.08%)</title><rect x="92.8683%" y="389" width="4.0780%" height="15" fill="rgb(230,182,32)" fg:x="67429919" fg:w="2960993"/><text x="93.1183%" y="399.50">unpa..</text></g><g><title>_unpack_node_info_msg (2,960,993 samples, 4.08%)</title><rect x="92.8683%" y="373" width="4.0780%" height="15" fill="rgb(242,56,43)" fg:x="67429919" fg:w="2960993"/><text x="93.1183%" y="383.50">_unp..</text></g><g><title>_unpack_node_info_members (2,960,993 samples, 4.08%)</title><rect x="92.8683%" y="357" width="4.0780%" height="15" fill="rgb(233,99,24)" fg:x="67429919" fg:w="2960993"/><text x="93.1183%" y="367.50">_unp..</text></g><g><title>unpackstr_xmalloc_chooser (1,506,949 samples, 2.08%)</title><rect x="94.8709%" y="341" width="2.0755%" height="15" fill="rgb(234,209,42)" fg:x="68883963" fg:w="1506949"/><text x="95.1209%" y="351.50">u..</text></g><g><title>unpackstr_xmalloc (744,665 samples, 1.03%)</title><rect x="95.9207%" y="325" width="1.0256%" height="15" fill="rgb(227,7,12)" fg:x="69646247" fg:w="744665"/><text x="96.1707%" y="335.50"></text></g><g><title>slurm_xcalloc (744,665 samples, 1.03%)</title><rect x="95.9207%" y="309" width="1.0256%" height="15" fill="rgb(245,203,43)" fg:x="69646247" fg:w="744665"/><text x="96.1707%" y="319.50"></text></g><g><title>__calloc (744,665 samples, 1.03%)</title><rect x="95.9207%" y="293" width="1.0256%" height="15" fill="rgb(238,205,33)" fg:x="69646247" fg:w="744665"/><text x="96.1707%" y="303.50"></text></g><g><title>_int_malloc (744,665 samples, 1.03%)</title><rect x="95.9207%" y="277" width="1.0256%" height="15" fill="rgb(231,56,7)" fg:x="69646247" fg:w="744665"/><text x="96.1707%" y="287.50"></text></g><g><title>fi_slurm::utils::SlurmConfig::load (782,873 samples, 1.08%)</title><rect x="96.9463%" y="517" width="1.0782%" height="15" fill="rgb(244,186,29)" fg:x="70390912" fg:w="782873"/><text x="97.1963%" y="527.50"></text></g><g><title>slurm_load_ctl_conf (782,873 samples, 1.08%)</title><rect x="96.9463%" y="501" width="1.0782%" height="15" fill="rgb(234,111,31)" fg:x="70390912" fg:w="782873"/><text x="97.1963%" y="511.50"></text></g><g><title>slurm_send_recv_controller_msg (782,873 samples, 1.08%)</title><rect x="96.9463%" y="485" width="1.0782%" height="15" fill="rgb(241,149,10)" fg:x="70390912" fg:w="782873"/><text x="97.1963%" y="495.50"></text></g><g><title>_send_and_recv_msg (782,873 samples, 1.08%)</title><rect x="96.9463%" y="469" width="1.0782%" height="15" fill="rgb(249,206,44)" fg:x="70390912" fg:w="782873"/><text x="97.1963%" y="479.50"></text></g><g><title>slurm_send_recv_msg (782,873 samples, 1.08%)</title><rect x="96.9463%" y="453" width="1.0782%" height="15" fill="rgb(251,153,30)" fg:x="70390912" fg:w="782873"/><text x="97.1963%" y="463.50"></text></g><g><title>slurm_receive_msg (782,873 samples, 1.08%)</title><rect x="96.9463%" y="437" width="1.0782%" height="15" fill="rgb(239,152,38)" fg:x="70390912" fg:w="782873"/><text x="97.1963%" y="447.50"></text></g><g><title>slurm_unpack_received_msg (782,873 samples, 1.08%)</title><rect x="96.9463%" y="421" width="1.0782%" height="15" fill="rgb(249,139,47)" fg:x="70390912" fg:w="782873"/><text x="97.1963%" y="431.50"></text></g><g><title>unpack_msg (782,873 samples, 1.08%)</title><rect x="96.9463%" y="405" width="1.0782%" height="15" fill="rgb(244,64,35)" fg:x="70390912" fg:w="782873"/><text x="97.1963%" y="415.50"></text></g><g><title>_unpack_slurm_ctl_conf_msg (782,873 samples, 1.08%)</title><rect x="96.9463%" y="389" width="1.0782%" height="15" fill="rgb(216,46,15)" fg:x="70390912" fg:w="782873"/><text x="97.1963%" y="399.50"></text></g><g><title>unpack_key_pair_list (782,873 samples, 1.08%)</title><rect x="96.9463%" y="373" width="1.0782%" height="15" fill="rgb(250,74,19)" fg:x="70390912" fg:w="782873"/><text x="97.1963%" y="383.50"></text></g><g><title>list_create (782,873 samples, 1.08%)</title><rect x="96.9463%" y="357" width="1.0782%" height="15" fill="rgb(249,42,33)" fg:x="70390912" fg:w="782873"/><text x="97.1963%" y="367.50"></text></g><g><title>slurm_xcalloc (782,873 samples, 1.08%)</title><rect x="96.9463%" y="341" width="1.0782%" height="15" fill="rgb(242,149,17)" fg:x="70390912" fg:w="782873"/><text x="97.1963%" y="351.50"></text></g><g><title>__calloc (782,873 samples, 1.08%)</title><rect x="96.9463%" y="325" width="1.0782%" height="15" fill="rgb(244,29,21)" fg:x="70390912" fg:w="782873"/><text x="97.1963%" y="335.50"></text></g><g><title>_int_malloc (782,873 samples, 1.08%)</title><rect x="96.9463%" y="309" width="1.0782%" height="15" fill="rgb(220,130,37)" fg:x="70390912" fg:w="782873"/><text x="97.1963%" y="319.50"></text></g><g><title>uid_from_string (783,532 samples, 1.08%)</title><rect x="98.0245%" y="517" width="1.0791%" height="15" fill="rgb(211,67,2)" fg:x="71173785" fg:w="783532"/><text x="98.2745%" y="527.50"></text></g><g><title>__getpwnam_r (783,532 samples, 1.08%)</title><rect x="98.0245%" y="501" width="1.0791%" height="15" fill="rgb(235,68,52)" fg:x="71173785" fg:w="783532"/><text x="98.2745%" y="511.50"></text></g><g><title>__GI___nss_lookup (783,532 samples, 1.08%)</title><rect x="98.0245%" y="485" width="1.0791%" height="15" fill="rgb(246,142,3)" fg:x="71173785" fg:w="783532"/><text x="98.2745%" y="495.50"></text></g><g><title>__GI___nss_lookup_function (783,532 samples, 1.08%)</title><rect x="98.0245%" y="469" width="1.0791%" height="15" fill="rgb(241,25,7)" fg:x="71173785" fg:w="783532"/><text x="98.2745%" y="479.50"></text></g><g><title>nss_load_library (783,532 samples, 1.08%)</title><rect x="98.0245%" y="453" width="1.0791%" height="15" fill="rgb(242,119,39)" fg:x="71173785" fg:w="783532"/><text x="98.2745%" y="463.50"></text></g><g><title>__GI___libc_dlopen_mode (783,532 samples, 1.08%)</title><rect x="98.0245%" y="437" width="1.0791%" height="15" fill="rgb(241,98,45)" fg:x="71173785" fg:w="783532"/><text x="98.2745%" y="447.50"></text></g><g><title>dlerror_run (783,532 samples, 1.08%)</title><rect x="98.0245%" y="421" width="1.0791%" height="15" fill="rgb(254,28,30)" fg:x="71173785" fg:w="783532"/><text x="98.2745%" y="431.50"></text></g><g><title>__GI__dl_catch_error (783,532 samples, 1.08%)</title><rect x="98.0245%" y="405" width="1.0791%" height="15" fill="rgb(241,142,54)" fg:x="71173785" fg:w="783532"/><text x="98.2745%" y="415.50"></text></g><g><title>__GI__dl_catch_exception (783,532 samples, 1.08%)</title><rect x="98.0245%" y="389" width="1.0791%" height="15" fill="rgb(222,85,15)" fg:x="71173785" fg:w="783532"/><text x="98.2745%" y="399.50"></text></g><g><title>do_dlopen (783,532 samples, 1.08%)</title><rect x="98.0245%" y="373" width="1.0791%" height="15" fill="rgb(210,85,47)" fg:x="71173785" fg:w="783532"/><text x="98.2745%" y="383.50"></text></g><g><title>_dl_open (783,532 samples, 1.08%)</title><rect x="98.0245%" y="357" width="1.0791%" height="15" fill="rgb(224,206,25)" fg:x="71173785" fg:w="783532"/><text x="98.2745%" y="367.50"></text></g><g><title>__GI__dl_catch_exception (783,532 samples, 1.08%)</title><rect x="98.0245%" y="341" width="1.0791%" height="15" fill="rgb(243,201,19)" fg:x="71173785" fg:w="783532"/><text x="98.2745%" y="351.50"></text></g><g><title>dl_open_worker (783,532 samples, 1.08%)</title><rect x="98.0245%" y="325" width="1.0791%" height="15" fill="rgb(236,59,4)" fg:x="71173785" fg:w="783532"/><text x="98.2745%" y="335.50"></text></g><g><title>__GI__dl_catch_exception (783,532 samples, 1.08%)</title><rect x="98.0245%" y="309" width="1.0791%" height="15" fill="rgb(254,179,45)" fg:x="71173785" fg:w="783532"/><text x="98.2745%" y="319.50"></text></g><g><title>dl_open_worker_begin (783,532 samples, 1.08%)</title><rect x="98.0245%" y="293" width="1.0791%" height="15" fill="rgb(226,14,10)" fg:x="71173785" fg:w="783532"/><text x="98.2745%" y="303.50"></text></g><g><title>_dl_map_object (783,532 samples, 1.08%)</title><rect x="98.0245%" y="277" width="1.0791%" height="15" fill="rgb(244,27,41)" fg:x="71173785" fg:w="783532"/><text x="98.2745%" y="287.50"></text></g><g><title>_dl_map_object_from_fd (783,532 samples, 1.08%)</title><rect x="98.0245%" y="261" width="1.0791%" height="15" fill="rgb(235,35,32)" fg:x="71173785" fg:w="783532"/><text x="98.2745%" y="271.50"></text></g><g><title>_dl_map_segments (783,532 samples, 1.08%)</title><rect x="98.0245%" y="245" width="1.0791%" height="15" fill="rgb(218,68,31)" fg:x="71173785" fg:w="783532"/><text x="98.2745%" y="255.50"></text></g><g><title>__mprotect (783,532 samples, 1.08%)</title><rect x="98.0245%" y="229" width="1.0791%" height="15" fill="rgb(207,120,37)" fg:x="71173785" fg:w="783532"/><text x="98.2745%" y="239.50"></text></g><g><title>[unknown] (783,532 samples, 1.08%)</title><rect x="98.0245%" y="213" width="1.0791%" height="15" fill="rgb(227,98,0)" fg:x="71173785" fg:w="783532"/><text x="98.2745%" y="223.50"></text></g><g><title>[unknown] (783,532 samples, 1.08%)</title><rect x="98.0245%" y="197" width="1.0791%" height="15" fill="rgb(207,7,3)" fg:x="71173785" fg:w="783532"/><text x="98.2745%" y="207.50"></text></g><g><title>[unknown] (783,532 samples, 1.08%)</title><rect x="98.0245%" y="181" width="1.0791%" height="15" fill="rgb(206,98,19)" fg:x="71173785" fg:w="783532"/><text x="98.2745%" y="191.50"></text></g><g><title>[unknown] (783,532 samples, 1.08%)</title><rect x="98.0245%" y="165" width="1.0791%" height="15" fill="rgb(217,5,26)" fg:x="71173785" fg:w="783532"/><text x="98.2745%" y="175.50"></text></g><g><title>[unknown] (783,532 samples, 1.08%)</title><rect x="98.0245%" y="149" width="1.0791%" height="15" fill="rgb(235,190,38)" fg:x="71173785" fg:w="783532"/><text x="98.2745%" y="159.50"></text></g><g><title>[unknown] (783,532 samples, 1.08%)</title><rect x="98.0245%" y="133" width="1.0791%" height="15" fill="rgb(247,86,24)" fg:x="71173785" fg:w="783532"/><text x="98.2745%" y="143.50"></text></g><g><title>[unknown] (783,532 samples, 1.08%)</title><rect x="98.0245%" y="117" width="1.0791%" height="15" fill="rgb(205,101,16)" fg:x="71173785" fg:w="783532"/><text x="98.2745%" y="127.50"></text></g><g><title>[unknown] (783,532 samples, 1.08%)</title><rect x="98.0245%" y="101" width="1.0791%" height="15" fill="rgb(246,168,33)" fg:x="71173785" fg:w="783532"/><text x="98.2745%" y="111.50"></text></g><g><title>[unknown] (783,532 samples, 1.08%)</title><rect x="98.0245%" y="85" width="1.0791%" height="15" fill="rgb(231,114,1)" fg:x="71173785" fg:w="783532"/><text x="98.2745%" y="95.50"></text></g><g><title>[unknown] (783,532 samples, 1.08%)</title><rect x="98.0245%" y="69" width="1.0791%" height="15" fill="rgb(207,184,53)" fg:x="71173785" fg:w="783532"/><text x="98.2745%" y="79.50"></text></g><g><title>[unknown] (783,532 samples, 1.08%)</title><rect x="98.0245%" y="53" width="1.0791%" height="15" fill="rgb(224,95,51)" fg:x="71173785" fg:w="783532"/><text x="98.2745%" y="63.50"></text></g><g><title>[unknown] (783,532 samples, 1.08%)</title><rect x="98.0245%" y="37" width="1.0791%" height="15" fill="rgb(212,188,45)" fg:x="71173785" fg:w="783532"/><text x="98.2745%" y="47.50"></text></g><g><title>all (72,608,143 samples, 100%)</title><rect x="0.0000%" y="549" width="100.0000%" height="15" fill="rgb(223,154,38)" fg:x="0" fg:w="72608143"/><text x="0.2500%" y="559.50"></text></g><g><title>fi_node (72,608,143 samples, 100.00%)</title><rect x="0.0000%" y="533" width="100.0000%" height="15" fill="rgb(251,22,52)" fg:x="0" fg:w="72608143"/><text x="0.2500%" y="543.50">fi_node</text></g><g><title>unpackstr_xmalloc_chooser (650,826 samples, 0.90%)</title><rect x="99.1036%" y="517" width="0.8964%" height="15" fill="rgb(229,209,22)" fg:x="71957317" fg:w="650826"/><text x="99.3536%" y="527.50"></text></g></svg></svg>