/* automatically generated by rust-bindgen 0.72.0 */

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const SYSTEM_DIMENSIONS: u32 = 1;
pub const HIGHEST_DIMENSIONS: u32 = 5;
pub const _ERRNO_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 28;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const _BITS_ERRNO_H: u32 = 1;
pub const EPERM: u32 = 1;
pub const ENOENT: u32 = 2;
pub const ESRCH: u32 = 3;
pub const EINTR: u32 = 4;
pub const EIO: u32 = 5;
pub const ENXIO: u32 = 6;
pub const E2BIG: u32 = 7;
pub const ENOEXEC: u32 = 8;
pub const EBADF: u32 = 9;
pub const ECHILD: u32 = 10;
pub const EAGAIN: u32 = 11;
pub const ENOMEM: u32 = 12;
pub const EACCES: u32 = 13;
pub const EFAULT: u32 = 14;
pub const ENOTBLK: u32 = 15;
pub const EBUSY: u32 = 16;
pub const EEXIST: u32 = 17;
pub const EXDEV: u32 = 18;
pub const ENODEV: u32 = 19;
pub const ENOTDIR: u32 = 20;
pub const EISDIR: u32 = 21;
pub const EINVAL: u32 = 22;
pub const ENFILE: u32 = 23;
pub const EMFILE: u32 = 24;
pub const ENOTTY: u32 = 25;
pub const ETXTBSY: u32 = 26;
pub const EFBIG: u32 = 27;
pub const ENOSPC: u32 = 28;
pub const ESPIPE: u32 = 29;
pub const EROFS: u32 = 30;
pub const EMLINK: u32 = 31;
pub const EPIPE: u32 = 32;
pub const EDOM: u32 = 33;
pub const ERANGE: u32 = 34;
pub const EDEADLK: u32 = 35;
pub const ENAMETOOLONG: u32 = 36;
pub const ENOLCK: u32 = 37;
pub const ENOSYS: u32 = 38;
pub const ENOTEMPTY: u32 = 39;
pub const ELOOP: u32 = 40;
pub const EWOULDBLOCK: u32 = 11;
pub const ENOMSG: u32 = 42;
pub const EIDRM: u32 = 43;
pub const ECHRNG: u32 = 44;
pub const EL2NSYNC: u32 = 45;
pub const EL3HLT: u32 = 46;
pub const EL3RST: u32 = 47;
pub const ELNRNG: u32 = 48;
pub const EUNATCH: u32 = 49;
pub const ENOCSI: u32 = 50;
pub const EL2HLT: u32 = 51;
pub const EBADE: u32 = 52;
pub const EBADR: u32 = 53;
pub const EXFULL: u32 = 54;
pub const ENOANO: u32 = 55;
pub const EBADRQC: u32 = 56;
pub const EBADSLT: u32 = 57;
pub const EDEADLOCK: u32 = 35;
pub const EBFONT: u32 = 59;
pub const ENOSTR: u32 = 60;
pub const ENODATA: u32 = 61;
pub const ETIME: u32 = 62;
pub const ENOSR: u32 = 63;
pub const ENONET: u32 = 64;
pub const ENOPKG: u32 = 65;
pub const EREMOTE: u32 = 66;
pub const ENOLINK: u32 = 67;
pub const EADV: u32 = 68;
pub const ESRMNT: u32 = 69;
pub const ECOMM: u32 = 70;
pub const EPROTO: u32 = 71;
pub const EMULTIHOP: u32 = 72;
pub const EDOTDOT: u32 = 73;
pub const EBADMSG: u32 = 74;
pub const EOVERFLOW: u32 = 75;
pub const ENOTUNIQ: u32 = 76;
pub const EBADFD: u32 = 77;
pub const EREMCHG: u32 = 78;
pub const ELIBACC: u32 = 79;
pub const ELIBBAD: u32 = 80;
pub const ELIBSCN: u32 = 81;
pub const ELIBMAX: u32 = 82;
pub const ELIBEXEC: u32 = 83;
pub const EILSEQ: u32 = 84;
pub const ERESTART: u32 = 85;
pub const ESTRPIPE: u32 = 86;
pub const EUSERS: u32 = 87;
pub const ENOTSOCK: u32 = 88;
pub const EDESTADDRREQ: u32 = 89;
pub const EMSGSIZE: u32 = 90;
pub const EPROTOTYPE: u32 = 91;
pub const ENOPROTOOPT: u32 = 92;
pub const EPROTONOSUPPORT: u32 = 93;
pub const ESOCKTNOSUPPORT: u32 = 94;
pub const EOPNOTSUPP: u32 = 95;
pub const EPFNOSUPPORT: u32 = 96;
pub const EAFNOSUPPORT: u32 = 97;
pub const EADDRINUSE: u32 = 98;
pub const EADDRNOTAVAIL: u32 = 99;
pub const ENETDOWN: u32 = 100;
pub const ENETUNREACH: u32 = 101;
pub const ENETRESET: u32 = 102;
pub const ECONNABORTED: u32 = 103;
pub const ECONNRESET: u32 = 104;
pub const ENOBUFS: u32 = 105;
pub const EISCONN: u32 = 106;
pub const ENOTCONN: u32 = 107;
pub const ESHUTDOWN: u32 = 108;
pub const ETOOMANYREFS: u32 = 109;
pub const ETIMEDOUT: u32 = 110;
pub const ECONNREFUSED: u32 = 111;
pub const EHOSTDOWN: u32 = 112;
pub const EHOSTUNREACH: u32 = 113;
pub const EALREADY: u32 = 114;
pub const EINPROGRESS: u32 = 115;
pub const ESTALE: u32 = 116;
pub const EUCLEAN: u32 = 117;
pub const ENOTNAM: u32 = 118;
pub const ENAVAIL: u32 = 119;
pub const EISNAM: u32 = 120;
pub const EREMOTEIO: u32 = 121;
pub const EDQUOT: u32 = 122;
pub const ENOMEDIUM: u32 = 123;
pub const EMEDIUMTYPE: u32 = 124;
pub const ECANCELED: u32 = 125;
pub const ENOKEY: u32 = 126;
pub const EKEYEXPIRED: u32 = 127;
pub const EKEYREVOKED: u32 = 128;
pub const EKEYREJECTED: u32 = 129;
pub const EOWNERDEAD: u32 = 130;
pub const ENOTRECOVERABLE: u32 = 131;
pub const ERFKILL: u32 = 132;
pub const EHWPOISON: u32 = 133;
pub const ENOTSUP: u32 = 95;
pub const SLURM_SUCCESS: u32 = 0;
pub const ESPANK_SUCCESS: u32 = 0;
pub const SLURM_ERROR: i32 = -1;
pub const SLURM_VERSION_NUMBER: u32 = 1575685;
pub const _INTTYPES_H: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const ____gwchar_t_defined: u32 = 1;
pub const __PRI64_PREFIX: &[u8; 2] = b"l\0";
pub const __PRIPTR_PREFIX: &[u8; 2] = b"l\0";
pub const PRId8: &[u8; 2] = b"d\0";
pub const PRId16: &[u8; 2] = b"d\0";
pub const PRId32: &[u8; 2] = b"d\0";
pub const PRId64: &[u8; 3] = b"ld\0";
pub const PRIdLEAST8: &[u8; 2] = b"d\0";
pub const PRIdLEAST16: &[u8; 2] = b"d\0";
pub const PRIdLEAST32: &[u8; 2] = b"d\0";
pub const PRIdLEAST64: &[u8; 3] = b"ld\0";
pub const PRIdFAST8: &[u8; 2] = b"d\0";
pub const PRIdFAST16: &[u8; 3] = b"ld\0";
pub const PRIdFAST32: &[u8; 3] = b"ld\0";
pub const PRIdFAST64: &[u8; 3] = b"ld\0";
pub const PRIi8: &[u8; 2] = b"i\0";
pub const PRIi16: &[u8; 2] = b"i\0";
pub const PRIi32: &[u8; 2] = b"i\0";
pub const PRIi64: &[u8; 3] = b"li\0";
pub const PRIiLEAST8: &[u8; 2] = b"i\0";
pub const PRIiLEAST16: &[u8; 2] = b"i\0";
pub const PRIiLEAST32: &[u8; 2] = b"i\0";
pub const PRIiLEAST64: &[u8; 3] = b"li\0";
pub const PRIiFAST8: &[u8; 2] = b"i\0";
pub const PRIiFAST16: &[u8; 3] = b"li\0";
pub const PRIiFAST32: &[u8; 3] = b"li\0";
pub const PRIiFAST64: &[u8; 3] = b"li\0";
pub const PRIo8: &[u8; 2] = b"o\0";
pub const PRIo16: &[u8; 2] = b"o\0";
pub const PRIo32: &[u8; 2] = b"o\0";
pub const PRIo64: &[u8; 3] = b"lo\0";
pub const PRIoLEAST8: &[u8; 2] = b"o\0";
pub const PRIoLEAST16: &[u8; 2] = b"o\0";
pub const PRIoLEAST32: &[u8; 2] = b"o\0";
pub const PRIoLEAST64: &[u8; 3] = b"lo\0";
pub const PRIoFAST8: &[u8; 2] = b"o\0";
pub const PRIoFAST16: &[u8; 3] = b"lo\0";
pub const PRIoFAST32: &[u8; 3] = b"lo\0";
pub const PRIoFAST64: &[u8; 3] = b"lo\0";
pub const PRIu8: &[u8; 2] = b"u\0";
pub const PRIu16: &[u8; 2] = b"u\0";
pub const PRIu32: &[u8; 2] = b"u\0";
pub const PRIu64: &[u8; 3] = b"lu\0";
pub const PRIuLEAST8: &[u8; 2] = b"u\0";
pub const PRIuLEAST16: &[u8; 2] = b"u\0";
pub const PRIuLEAST32: &[u8; 2] = b"u\0";
pub const PRIuLEAST64: &[u8; 3] = b"lu\0";
pub const PRIuFAST8: &[u8; 2] = b"u\0";
pub const PRIuFAST16: &[u8; 3] = b"lu\0";
pub const PRIuFAST32: &[u8; 3] = b"lu\0";
pub const PRIuFAST64: &[u8; 3] = b"lu\0";
pub const PRIx8: &[u8; 2] = b"x\0";
pub const PRIx16: &[u8; 2] = b"x\0";
pub const PRIx32: &[u8; 2] = b"x\0";
pub const PRIx64: &[u8; 3] = b"lx\0";
pub const PRIxLEAST8: &[u8; 2] = b"x\0";
pub const PRIxLEAST16: &[u8; 2] = b"x\0";
pub const PRIxLEAST32: &[u8; 2] = b"x\0";
pub const PRIxLEAST64: &[u8; 3] = b"lx\0";
pub const PRIxFAST8: &[u8; 2] = b"x\0";
pub const PRIxFAST16: &[u8; 3] = b"lx\0";
pub const PRIxFAST32: &[u8; 3] = b"lx\0";
pub const PRIxFAST64: &[u8; 3] = b"lx\0";
pub const PRIX8: &[u8; 2] = b"X\0";
pub const PRIX16: &[u8; 2] = b"X\0";
pub const PRIX32: &[u8; 2] = b"X\0";
pub const PRIX64: &[u8; 3] = b"lX\0";
pub const PRIXLEAST8: &[u8; 2] = b"X\0";
pub const PRIXLEAST16: &[u8; 2] = b"X\0";
pub const PRIXLEAST32: &[u8; 2] = b"X\0";
pub const PRIXLEAST64: &[u8; 3] = b"lX\0";
pub const PRIXFAST8: &[u8; 2] = b"X\0";
pub const PRIXFAST16: &[u8; 3] = b"lX\0";
pub const PRIXFAST32: &[u8; 3] = b"lX\0";
pub const PRIXFAST64: &[u8; 3] = b"lX\0";
pub const PRIdMAX: &[u8; 3] = b"ld\0";
pub const PRIiMAX: &[u8; 3] = b"li\0";
pub const PRIoMAX: &[u8; 3] = b"lo\0";
pub const PRIuMAX: &[u8; 3] = b"lu\0";
pub const PRIxMAX: &[u8; 3] = b"lx\0";
pub const PRIXMAX: &[u8; 3] = b"lX\0";
pub const PRIdPTR: &[u8; 3] = b"ld\0";
pub const PRIiPTR: &[u8; 3] = b"li\0";
pub const PRIoPTR: &[u8; 3] = b"lo\0";
pub const PRIuPTR: &[u8; 3] = b"lu\0";
pub const PRIxPTR: &[u8; 3] = b"lx\0";
pub const PRIXPTR: &[u8; 3] = b"lX\0";
pub const SCNd8: &[u8; 4] = b"hhd\0";
pub const SCNd16: &[u8; 3] = b"hd\0";
pub const SCNd32: &[u8; 2] = b"d\0";
pub const SCNd64: &[u8; 3] = b"ld\0";
pub const SCNdLEAST8: &[u8; 4] = b"hhd\0";
pub const SCNdLEAST16: &[u8; 3] = b"hd\0";
pub const SCNdLEAST32: &[u8; 2] = b"d\0";
pub const SCNdLEAST64: &[u8; 3] = b"ld\0";
pub const SCNdFAST8: &[u8; 4] = b"hhd\0";
pub const SCNdFAST16: &[u8; 3] = b"ld\0";
pub const SCNdFAST32: &[u8; 3] = b"ld\0";
pub const SCNdFAST64: &[u8; 3] = b"ld\0";
pub const SCNi8: &[u8; 4] = b"hhi\0";
pub const SCNi16: &[u8; 3] = b"hi\0";
pub const SCNi32: &[u8; 2] = b"i\0";
pub const SCNi64: &[u8; 3] = b"li\0";
pub const SCNiLEAST8: &[u8; 4] = b"hhi\0";
pub const SCNiLEAST16: &[u8; 3] = b"hi\0";
pub const SCNiLEAST32: &[u8; 2] = b"i\0";
pub const SCNiLEAST64: &[u8; 3] = b"li\0";
pub const SCNiFAST8: &[u8; 4] = b"hhi\0";
pub const SCNiFAST16: &[u8; 3] = b"li\0";
pub const SCNiFAST32: &[u8; 3] = b"li\0";
pub const SCNiFAST64: &[u8; 3] = b"li\0";
pub const SCNu8: &[u8; 4] = b"hhu\0";
pub const SCNu16: &[u8; 3] = b"hu\0";
pub const SCNu32: &[u8; 2] = b"u\0";
pub const SCNu64: &[u8; 3] = b"lu\0";
pub const SCNuLEAST8: &[u8; 4] = b"hhu\0";
pub const SCNuLEAST16: &[u8; 3] = b"hu\0";
pub const SCNuLEAST32: &[u8; 2] = b"u\0";
pub const SCNuLEAST64: &[u8; 3] = b"lu\0";
pub const SCNuFAST8: &[u8; 4] = b"hhu\0";
pub const SCNuFAST16: &[u8; 3] = b"lu\0";
pub const SCNuFAST32: &[u8; 3] = b"lu\0";
pub const SCNuFAST64: &[u8; 3] = b"lu\0";
pub const SCNo8: &[u8; 4] = b"hho\0";
pub const SCNo16: &[u8; 3] = b"ho\0";
pub const SCNo32: &[u8; 2] = b"o\0";
pub const SCNo64: &[u8; 3] = b"lo\0";
pub const SCNoLEAST8: &[u8; 4] = b"hho\0";
pub const SCNoLEAST16: &[u8; 3] = b"ho\0";
pub const SCNoLEAST32: &[u8; 2] = b"o\0";
pub const SCNoLEAST64: &[u8; 3] = b"lo\0";
pub const SCNoFAST8: &[u8; 4] = b"hho\0";
pub const SCNoFAST16: &[u8; 3] = b"lo\0";
pub const SCNoFAST32: &[u8; 3] = b"lo\0";
pub const SCNoFAST64: &[u8; 3] = b"lo\0";
pub const SCNx8: &[u8; 4] = b"hhx\0";
pub const SCNx16: &[u8; 3] = b"hx\0";
pub const SCNx32: &[u8; 2] = b"x\0";
pub const SCNx64: &[u8; 3] = b"lx\0";
pub const SCNxLEAST8: &[u8; 4] = b"hhx\0";
pub const SCNxLEAST16: &[u8; 3] = b"hx\0";
pub const SCNxLEAST32: &[u8; 2] = b"x\0";
pub const SCNxLEAST64: &[u8; 3] = b"lx\0";
pub const SCNxFAST8: &[u8; 4] = b"hhx\0";
pub const SCNxFAST16: &[u8; 3] = b"lx\0";
pub const SCNxFAST32: &[u8; 3] = b"lx\0";
pub const SCNxFAST64: &[u8; 3] = b"lx\0";
pub const SCNdMAX: &[u8; 3] = b"ld\0";
pub const SCNiMAX: &[u8; 3] = b"li\0";
pub const SCNoMAX: &[u8; 3] = b"lo\0";
pub const SCNuMAX: &[u8; 3] = b"lu\0";
pub const SCNxMAX: &[u8; 3] = b"lx\0";
pub const SCNdPTR: &[u8; 3] = b"ld\0";
pub const SCNiPTR: &[u8; 3] = b"li\0";
pub const SCNoPTR: &[u8; 3] = b"lo\0";
pub const SCNuPTR: &[u8; 3] = b"lu\0";
pub const SCNxPTR: &[u8; 3] = b"lx\0";
pub const _NETINET_IN_H: u32 = 1;
pub const _SYS_SOCKET_H: u32 = 1;
pub const __iovec_defined: u32 = 1;
pub const _SYS_TYPES_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __FD_ZERO_STOS: &[u8; 6] = b"stosq\0";
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const __PTHREAD_MUTEX_LOCK_ELISION: u32 = 1;
pub const __PTHREAD_MUTEX_NUSERS_AFTER_KIND: u32 = 0;
pub const __PTHREAD_MUTEX_USE_UNION: u32 = 0;
pub const __PTHREAD_RWLOCK_INT_FLAGS_SHARED: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const PF_UNSPEC: u32 = 0;
pub const PF_LOCAL: u32 = 1;
pub const PF_UNIX: u32 = 1;
pub const PF_FILE: u32 = 1;
pub const PF_INET: u32 = 2;
pub const PF_AX25: u32 = 3;
pub const PF_IPX: u32 = 4;
pub const PF_APPLETALK: u32 = 5;
pub const PF_NETROM: u32 = 6;
pub const PF_BRIDGE: u32 = 7;
pub const PF_ATMPVC: u32 = 8;
pub const PF_X25: u32 = 9;
pub const PF_INET6: u32 = 10;
pub const PF_ROSE: u32 = 11;
pub const PF_DECnet: u32 = 12;
pub const PF_NETBEUI: u32 = 13;
pub const PF_SECURITY: u32 = 14;
pub const PF_KEY: u32 = 15;
pub const PF_NETLINK: u32 = 16;
pub const PF_ROUTE: u32 = 16;
pub const PF_PACKET: u32 = 17;
pub const PF_ASH: u32 = 18;
pub const PF_ECONET: u32 = 19;
pub const PF_ATMSVC: u32 = 20;
pub const PF_RDS: u32 = 21;
pub const PF_SNA: u32 = 22;
pub const PF_IRDA: u32 = 23;
pub const PF_PPPOX: u32 = 24;
pub const PF_WANPIPE: u32 = 25;
pub const PF_LLC: u32 = 26;
pub const PF_IB: u32 = 27;
pub const PF_MPLS: u32 = 28;
pub const PF_CAN: u32 = 29;
pub const PF_TIPC: u32 = 30;
pub const PF_BLUETOOTH: u32 = 31;
pub const PF_IUCV: u32 = 32;
pub const PF_RXRPC: u32 = 33;
pub const PF_ISDN: u32 = 34;
pub const PF_PHONET: u32 = 35;
pub const PF_IEEE802154: u32 = 36;
pub const PF_CAIF: u32 = 37;
pub const PF_ALG: u32 = 38;
pub const PF_NFC: u32 = 39;
pub const PF_VSOCK: u32 = 40;
pub const PF_KCM: u32 = 41;
pub const PF_QIPCRTR: u32 = 42;
pub const PF_SMC: u32 = 43;
pub const PF_XDP: u32 = 44;
pub const PF_MAX: u32 = 45;
pub const AF_UNSPEC: u32 = 0;
pub const AF_LOCAL: u32 = 1;
pub const AF_UNIX: u32 = 1;
pub const AF_FILE: u32 = 1;
pub const AF_INET: u32 = 2;
pub const AF_AX25: u32 = 3;
pub const AF_IPX: u32 = 4;
pub const AF_APPLETALK: u32 = 5;
pub const AF_NETROM: u32 = 6;
pub const AF_BRIDGE: u32 = 7;
pub const AF_ATMPVC: u32 = 8;
pub const AF_X25: u32 = 9;
pub const AF_INET6: u32 = 10;
pub const AF_ROSE: u32 = 11;
pub const AF_DECnet: u32 = 12;
pub const AF_NETBEUI: u32 = 13;
pub const AF_SECURITY: u32 = 14;
pub const AF_KEY: u32 = 15;
pub const AF_NETLINK: u32 = 16;
pub const AF_ROUTE: u32 = 16;
pub const AF_PACKET: u32 = 17;
pub const AF_ASH: u32 = 18;
pub const AF_ECONET: u32 = 19;
pub const AF_ATMSVC: u32 = 20;
pub const AF_RDS: u32 = 21;
pub const AF_SNA: u32 = 22;
pub const AF_IRDA: u32 = 23;
pub const AF_PPPOX: u32 = 24;
pub const AF_WANPIPE: u32 = 25;
pub const AF_LLC: u32 = 26;
pub const AF_IB: u32 = 27;
pub const AF_MPLS: u32 = 28;
pub const AF_CAN: u32 = 29;
pub const AF_TIPC: u32 = 30;
pub const AF_BLUETOOTH: u32 = 31;
pub const AF_IUCV: u32 = 32;
pub const AF_RXRPC: u32 = 33;
pub const AF_ISDN: u32 = 34;
pub const AF_PHONET: u32 = 35;
pub const AF_IEEE802154: u32 = 36;
pub const AF_CAIF: u32 = 37;
pub const AF_ALG: u32 = 38;
pub const AF_NFC: u32 = 39;
pub const AF_VSOCK: u32 = 40;
pub const AF_KCM: u32 = 41;
pub const AF_QIPCRTR: u32 = 42;
pub const AF_SMC: u32 = 43;
pub const AF_XDP: u32 = 44;
pub const AF_MAX: u32 = 45;
pub const SOL_RAW: u32 = 255;
pub const SOL_DECNET: u32 = 261;
pub const SOL_X25: u32 = 262;
pub const SOL_PACKET: u32 = 263;
pub const SOL_ATM: u32 = 264;
pub const SOL_AAL: u32 = 265;
pub const SOL_IRDA: u32 = 266;
pub const SOL_NETBEUI: u32 = 267;
pub const SOL_LLC: u32 = 268;
pub const SOL_DCCP: u32 = 269;
pub const SOL_NETLINK: u32 = 270;
pub const SOL_TIPC: u32 = 271;
pub const SOL_RXRPC: u32 = 272;
pub const SOL_PPPOL2TP: u32 = 273;
pub const SOL_BLUETOOTH: u32 = 274;
pub const SOL_PNPIPE: u32 = 275;
pub const SOL_RDS: u32 = 276;
pub const SOL_IUCV: u32 = 277;
pub const SOL_CAIF: u32 = 278;
pub const SOL_ALG: u32 = 279;
pub const SOL_NFC: u32 = 280;
pub const SOL_KCM: u32 = 281;
pub const SOL_TLS: u32 = 282;
pub const SOL_XDP: u32 = 283;
pub const SOMAXCONN: u32 = 128;
pub const _BITS_SOCKADDR_H: u32 = 1;
pub const _SS_SIZE: u32 = 128;
pub const FIOSETOWN: u32 = 35073;
pub const SIOCSPGRP: u32 = 35074;
pub const FIOGETOWN: u32 = 35075;
pub const SIOCGPGRP: u32 = 35076;
pub const SIOCATMARK: u32 = 35077;
pub const SIOCGSTAMP: u32 = 35078;
pub const SIOCGSTAMPNS: u32 = 35079;
pub const SOL_SOCKET: u32 = 1;
pub const SO_DEBUG: u32 = 1;
pub const SO_REUSEADDR: u32 = 2;
pub const SO_TYPE: u32 = 3;
pub const SO_ERROR: u32 = 4;
pub const SO_DONTROUTE: u32 = 5;
pub const SO_BROADCAST: u32 = 6;
pub const SO_SNDBUF: u32 = 7;
pub const SO_RCVBUF: u32 = 8;
pub const SO_SNDBUFFORCE: u32 = 32;
pub const SO_RCVBUFFORCE: u32 = 33;
pub const SO_KEEPALIVE: u32 = 9;
pub const SO_OOBINLINE: u32 = 10;
pub const SO_NO_CHECK: u32 = 11;
pub const SO_PRIORITY: u32 = 12;
pub const SO_LINGER: u32 = 13;
pub const SO_BSDCOMPAT: u32 = 14;
pub const SO_REUSEPORT: u32 = 15;
pub const SO_PASSCRED: u32 = 16;
pub const SO_PEERCRED: u32 = 17;
pub const SO_RCVLOWAT: u32 = 18;
pub const SO_SNDLOWAT: u32 = 19;
pub const SO_RCVTIMEO: u32 = 20;
pub const SO_SNDTIMEO: u32 = 21;
pub const SO_SECURITY_AUTHENTICATION: u32 = 22;
pub const SO_SECURITY_ENCRYPTION_TRANSPORT: u32 = 23;
pub const SO_SECURITY_ENCRYPTION_NETWORK: u32 = 24;
pub const SO_BINDTODEVICE: u32 = 25;
pub const SO_ATTACH_FILTER: u32 = 26;
pub const SO_DETACH_FILTER: u32 = 27;
pub const SO_GET_FILTER: u32 = 26;
pub const SO_PEERNAME: u32 = 28;
pub const SO_TIMESTAMP: u32 = 29;
pub const SCM_TIMESTAMP: u32 = 29;
pub const SO_ACCEPTCONN: u32 = 30;
pub const SO_PEERSEC: u32 = 31;
pub const SO_PASSSEC: u32 = 34;
pub const SO_TIMESTAMPNS: u32 = 35;
pub const SCM_TIMESTAMPNS: u32 = 35;
pub const SO_MARK: u32 = 36;
pub const SO_TIMESTAMPING: u32 = 37;
pub const SCM_TIMESTAMPING: u32 = 37;
pub const SO_PROTOCOL: u32 = 38;
pub const SO_DOMAIN: u32 = 39;
pub const SO_RXQ_OVFL: u32 = 40;
pub const SO_WIFI_STATUS: u32 = 41;
pub const SCM_WIFI_STATUS: u32 = 41;
pub const SO_PEEK_OFF: u32 = 42;
pub const SO_NOFCS: u32 = 43;
pub const SO_LOCK_FILTER: u32 = 44;
pub const SO_SELECT_ERR_QUEUE: u32 = 45;
pub const SO_BUSY_POLL: u32 = 46;
pub const SO_MAX_PACING_RATE: u32 = 47;
pub const SO_BPF_EXTENSIONS: u32 = 48;
pub const SO_INCOMING_CPU: u32 = 49;
pub const SO_ATTACH_BPF: u32 = 50;
pub const SO_DETACH_BPF: u32 = 27;
pub const SO_ATTACH_REUSEPORT_CBPF: u32 = 51;
pub const SO_ATTACH_REUSEPORT_EBPF: u32 = 52;
pub const SO_CNX_ADVICE: u32 = 53;
pub const SCM_TIMESTAMPING_OPT_STATS: u32 = 54;
pub const SO_MEMINFO: u32 = 55;
pub const SO_INCOMING_NAPI_ID: u32 = 56;
pub const SO_COOKIE: u32 = 57;
pub const SCM_TIMESTAMPING_PKTINFO: u32 = 58;
pub const SO_PEERGROUPS: u32 = 59;
pub const SO_ZEROCOPY: u32 = 60;
pub const SO_TXTIME: u32 = 61;
pub const SCM_TXTIME: u32 = 61;
pub const SO_BINDTOIFINDEX: u32 = 62;
pub const SO_DETACH_REUSEPORT_BPF: u32 = 68;
pub const SO_PREFER_BUSY_POLL: u32 = 69;
pub const SO_BUSY_POLL_BUDGET: u32 = 70;
pub const __osockaddr_defined: u32 = 1;
pub const __USE_KERNEL_IPV6_DEFS: u32 = 0;
pub const IP_OPTIONS: u32 = 4;
pub const IP_HDRINCL: u32 = 3;
pub const IP_TOS: u32 = 1;
pub const IP_TTL: u32 = 2;
pub const IP_RECVOPTS: u32 = 6;
pub const IP_RETOPTS: u32 = 7;
pub const IP_MULTICAST_IF: u32 = 32;
pub const IP_MULTICAST_TTL: u32 = 33;
pub const IP_MULTICAST_LOOP: u32 = 34;
pub const IP_ADD_MEMBERSHIP: u32 = 35;
pub const IP_DROP_MEMBERSHIP: u32 = 36;
pub const IP_UNBLOCK_SOURCE: u32 = 37;
pub const IP_BLOCK_SOURCE: u32 = 38;
pub const IP_ADD_SOURCE_MEMBERSHIP: u32 = 39;
pub const IP_DROP_SOURCE_MEMBERSHIP: u32 = 40;
pub const IP_MSFILTER: u32 = 41;
pub const MCAST_JOIN_GROUP: u32 = 42;
pub const MCAST_BLOCK_SOURCE: u32 = 43;
pub const MCAST_UNBLOCK_SOURCE: u32 = 44;
pub const MCAST_LEAVE_GROUP: u32 = 45;
pub const MCAST_JOIN_SOURCE_GROUP: u32 = 46;
pub const MCAST_LEAVE_SOURCE_GROUP: u32 = 47;
pub const MCAST_MSFILTER: u32 = 48;
pub const IP_MULTICAST_ALL: u32 = 49;
pub const IP_UNICAST_IF: u32 = 50;
pub const MCAST_EXCLUDE: u32 = 0;
pub const MCAST_INCLUDE: u32 = 1;
pub const IP_ROUTER_ALERT: u32 = 5;
pub const IP_PKTINFO: u32 = 8;
pub const IP_PKTOPTIONS: u32 = 9;
pub const IP_PMTUDISC: u32 = 10;
pub const IP_MTU_DISCOVER: u32 = 10;
pub const IP_RECVERR: u32 = 11;
pub const IP_RECVTTL: u32 = 12;
pub const IP_RECVTOS: u32 = 13;
pub const IP_MTU: u32 = 14;
pub const IP_FREEBIND: u32 = 15;
pub const IP_IPSEC_POLICY: u32 = 16;
pub const IP_XFRM_POLICY: u32 = 17;
pub const IP_PASSSEC: u32 = 18;
pub const IP_TRANSPARENT: u32 = 19;
pub const IP_ORIGDSTADDR: u32 = 20;
pub const IP_RECVORIGDSTADDR: u32 = 20;
pub const IP_MINTTL: u32 = 21;
pub const IP_NODEFRAG: u32 = 22;
pub const IP_CHECKSUM: u32 = 23;
pub const IP_BIND_ADDRESS_NO_PORT: u32 = 24;
pub const IP_RECVFRAGSIZE: u32 = 25;
pub const IP_PMTUDISC_DONT: u32 = 0;
pub const IP_PMTUDISC_WANT: u32 = 1;
pub const IP_PMTUDISC_DO: u32 = 2;
pub const IP_PMTUDISC_PROBE: u32 = 3;
pub const IP_PMTUDISC_INTERFACE: u32 = 4;
pub const IP_PMTUDISC_OMIT: u32 = 5;
pub const SOL_IP: u32 = 0;
pub const IP_DEFAULT_MULTICAST_TTL: u32 = 1;
pub const IP_DEFAULT_MULTICAST_LOOP: u32 = 1;
pub const IP_MAX_MEMBERSHIPS: u32 = 20;
pub const IPV6_ADDRFORM: u32 = 1;
pub const IPV6_2292PKTINFO: u32 = 2;
pub const IPV6_2292HOPOPTS: u32 = 3;
pub const IPV6_2292DSTOPTS: u32 = 4;
pub const IPV6_2292RTHDR: u32 = 5;
pub const IPV6_2292PKTOPTIONS: u32 = 6;
pub const IPV6_CHECKSUM: u32 = 7;
pub const IPV6_2292HOPLIMIT: u32 = 8;
pub const IPV6_NEXTHOP: u32 = 9;
pub const IPV6_AUTHHDR: u32 = 10;
pub const IPV6_UNICAST_HOPS: u32 = 16;
pub const IPV6_MULTICAST_IF: u32 = 17;
pub const IPV6_MULTICAST_HOPS: u32 = 18;
pub const IPV6_MULTICAST_LOOP: u32 = 19;
pub const IPV6_JOIN_GROUP: u32 = 20;
pub const IPV6_LEAVE_GROUP: u32 = 21;
pub const IPV6_ROUTER_ALERT: u32 = 22;
pub const IPV6_MTU_DISCOVER: u32 = 23;
pub const IPV6_MTU: u32 = 24;
pub const IPV6_RECVERR: u32 = 25;
pub const IPV6_V6ONLY: u32 = 26;
pub const IPV6_JOIN_ANYCAST: u32 = 27;
pub const IPV6_LEAVE_ANYCAST: u32 = 28;
pub const IPV6_IPSEC_POLICY: u32 = 34;
pub const IPV6_XFRM_POLICY: u32 = 35;
pub const IPV6_HDRINCL: u32 = 36;
pub const IPV6_RECVPKTINFO: u32 = 49;
pub const IPV6_PKTINFO: u32 = 50;
pub const IPV6_RECVHOPLIMIT: u32 = 51;
pub const IPV6_HOPLIMIT: u32 = 52;
pub const IPV6_RECVHOPOPTS: u32 = 53;
pub const IPV6_HOPOPTS: u32 = 54;
pub const IPV6_RTHDRDSTOPTS: u32 = 55;
pub const IPV6_RECVRTHDR: u32 = 56;
pub const IPV6_RTHDR: u32 = 57;
pub const IPV6_RECVDSTOPTS: u32 = 58;
pub const IPV6_DSTOPTS: u32 = 59;
pub const IPV6_RECVPATHMTU: u32 = 60;
pub const IPV6_PATHMTU: u32 = 61;
pub const IPV6_DONTFRAG: u32 = 62;
pub const IPV6_RECVTCLASS: u32 = 66;
pub const IPV6_TCLASS: u32 = 67;
pub const IPV6_AUTOFLOWLABEL: u32 = 70;
pub const IPV6_ADDR_PREFERENCES: u32 = 72;
pub const IPV6_MINHOPCOUNT: u32 = 73;
pub const IPV6_ORIGDSTADDR: u32 = 74;
pub const IPV6_RECVORIGDSTADDR: u32 = 74;
pub const IPV6_TRANSPARENT: u32 = 75;
pub const IPV6_UNICAST_IF: u32 = 76;
pub const IPV6_RECVFRAGSIZE: u32 = 77;
pub const IPV6_FREEBIND: u32 = 78;
pub const IPV6_ADD_MEMBERSHIP: u32 = 20;
pub const IPV6_DROP_MEMBERSHIP: u32 = 21;
pub const IPV6_RXHOPOPTS: u32 = 54;
pub const IPV6_RXDSTOPTS: u32 = 59;
pub const IPV6_PMTUDISC_DONT: u32 = 0;
pub const IPV6_PMTUDISC_WANT: u32 = 1;
pub const IPV6_PMTUDISC_DO: u32 = 2;
pub const IPV6_PMTUDISC_PROBE: u32 = 3;
pub const IPV6_PMTUDISC_INTERFACE: u32 = 4;
pub const IPV6_PMTUDISC_OMIT: u32 = 5;
pub const SOL_IPV6: u32 = 41;
pub const SOL_ICMPV6: u32 = 58;
pub const IPV6_RTHDR_LOOSE: u32 = 0;
pub const IPV6_RTHDR_STRICT: u32 = 1;
pub const IPV6_RTHDR_TYPE_0: u32 = 0;
pub const IN_CLASSA_NET: u32 = 4278190080;
pub const IN_CLASSA_NSHIFT: u32 = 24;
pub const IN_CLASSA_HOST: u32 = 16777215;
pub const IN_CLASSA_MAX: u32 = 128;
pub const IN_CLASSB_NET: u32 = 4294901760;
pub const IN_CLASSB_NSHIFT: u32 = 16;
pub const IN_CLASSB_HOST: u32 = 65535;
pub const IN_CLASSB_MAX: u32 = 65536;
pub const IN_CLASSC_NET: u32 = 4294967040;
pub const IN_CLASSC_NSHIFT: u32 = 8;
pub const IN_CLASSC_HOST: u32 = 255;
pub const IN_LOOPBACKNET: u32 = 127;
pub const INET_ADDRSTRLEN: u32 = 16;
pub const INET6_ADDRSTRLEN: u32 = 46;
pub const __bool_true_false_are_defined: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const _STDIO_H: u32 = 1;
pub const _____fpos_t_defined: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _____fpos64_t_defined: u32 = 1;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const __struct_FILE_defined: u32 = 1;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_USER_LOCK: u32 = 32768;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const EOF: i32 = -1;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const P_tmpdir: &[u8; 5] = b"/tmp\0";
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const _TIME_H: u32 = 1;
pub const _BITS_TIME_H: u32 = 1;
pub const CLOCK_REALTIME: u32 = 0;
pub const CLOCK_MONOTONIC: u32 = 1;
pub const CLOCK_PROCESS_CPUTIME_ID: u32 = 2;
pub const CLOCK_THREAD_CPUTIME_ID: u32 = 3;
pub const CLOCK_MONOTONIC_RAW: u32 = 4;
pub const CLOCK_REALTIME_COARSE: u32 = 5;
pub const CLOCK_MONOTONIC_COARSE: u32 = 6;
pub const CLOCK_BOOTTIME: u32 = 7;
pub const CLOCK_REALTIME_ALARM: u32 = 8;
pub const CLOCK_BOOTTIME_ALARM: u32 = 9;
pub const CLOCK_TAI: u32 = 11;
pub const TIMER_ABSTIME: u32 = 1;
pub const __struct_tm_defined: u32 = 1;
pub const __itimerspec_defined: u32 = 1;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const TIME_UTC: u32 = 1;
pub const _UNISTD_H: u32 = 1;
pub const _POSIX_VERSION: u32 = 200809;
pub const __POSIX2_THIS_VERSION: u32 = 200809;
pub const _POSIX2_VERSION: u32 = 200809;
pub const _POSIX2_C_VERSION: u32 = 200809;
pub const _POSIX2_C_BIND: u32 = 200809;
pub const _POSIX2_C_DEV: u32 = 200809;
pub const _POSIX2_SW_DEV: u32 = 200809;
pub const _POSIX2_LOCALEDEF: u32 = 200809;
pub const _XOPEN_VERSION: u32 = 700;
pub const _XOPEN_XCU_VERSION: u32 = 4;
pub const _XOPEN_XPG2: u32 = 1;
pub const _XOPEN_XPG3: u32 = 1;
pub const _XOPEN_XPG4: u32 = 1;
pub const _XOPEN_UNIX: u32 = 1;
pub const _XOPEN_ENH_I18N: u32 = 1;
pub const _XOPEN_LEGACY: u32 = 1;
pub const _BITS_POSIX_OPT_H: u32 = 1;
pub const _POSIX_JOB_CONTROL: u32 = 1;
pub const _POSIX_SAVED_IDS: u32 = 1;
pub const _POSIX_PRIORITY_SCHEDULING: u32 = 200809;
pub const _POSIX_SYNCHRONIZED_IO: u32 = 200809;
pub const _POSIX_FSYNC: u32 = 200809;
pub const _POSIX_MAPPED_FILES: u32 = 200809;
pub const _POSIX_MEMLOCK: u32 = 200809;
pub const _POSIX_MEMLOCK_RANGE: u32 = 200809;
pub const _POSIX_MEMORY_PROTECTION: u32 = 200809;
pub const _POSIX_CHOWN_RESTRICTED: u32 = 0;
pub const _POSIX_VDISABLE: u8 = 0u8;
pub const _POSIX_NO_TRUNC: u32 = 1;
pub const _XOPEN_REALTIME: u32 = 1;
pub const _XOPEN_REALTIME_THREADS: u32 = 1;
pub const _XOPEN_SHM: u32 = 1;
pub const _POSIX_THREADS: u32 = 200809;
pub const _POSIX_REENTRANT_FUNCTIONS: u32 = 1;
pub const _POSIX_THREAD_SAFE_FUNCTIONS: u32 = 200809;
pub const _POSIX_THREAD_PRIORITY_SCHEDULING: u32 = 200809;
pub const _POSIX_THREAD_ATTR_STACKSIZE: u32 = 200809;
pub const _POSIX_THREAD_ATTR_STACKADDR: u32 = 200809;
pub const _POSIX_THREAD_PRIO_INHERIT: u32 = 200809;
pub const _POSIX_THREAD_PRIO_PROTECT: u32 = 200809;
pub const _POSIX_THREAD_ROBUST_PRIO_INHERIT: u32 = 200809;
pub const _POSIX_THREAD_ROBUST_PRIO_PROTECT: i32 = -1;
pub const _POSIX_SEMAPHORES: u32 = 200809;
pub const _POSIX_REALTIME_SIGNALS: u32 = 200809;
pub const _POSIX_ASYNCHRONOUS_IO: u32 = 200809;
pub const _POSIX_ASYNC_IO: u32 = 1;
pub const _LFS_ASYNCHRONOUS_IO: u32 = 1;
pub const _POSIX_PRIORITIZED_IO: u32 = 200809;
pub const _LFS64_ASYNCHRONOUS_IO: u32 = 1;
pub const _LFS_LARGEFILE: u32 = 1;
pub const _LFS64_LARGEFILE: u32 = 1;
pub const _LFS64_STDIO: u32 = 1;
pub const _POSIX_SHARED_MEMORY_OBJECTS: u32 = 200809;
pub const _POSIX_CPUTIME: u32 = 0;
pub const _POSIX_THREAD_CPUTIME: u32 = 0;
pub const _POSIX_REGEXP: u32 = 1;
pub const _POSIX_READER_WRITER_LOCKS: u32 = 200809;
pub const _POSIX_SHELL: u32 = 1;
pub const _POSIX_TIMEOUTS: u32 = 200809;
pub const _POSIX_SPIN_LOCKS: u32 = 200809;
pub const _POSIX_SPAWN: u32 = 200809;
pub const _POSIX_TIMERS: u32 = 200809;
pub const _POSIX_BARRIERS: u32 = 200809;
pub const _POSIX_MESSAGE_PASSING: u32 = 200809;
pub const _POSIX_THREAD_PROCESS_SHARED: u32 = 200809;
pub const _POSIX_MONOTONIC_CLOCK: u32 = 0;
pub const _POSIX_CLOCK_SELECTION: u32 = 200809;
pub const _POSIX_ADVISORY_INFO: u32 = 200809;
pub const _POSIX_IPV6: u32 = 200809;
pub const _POSIX_RAW_SOCKETS: u32 = 200809;
pub const _POSIX2_CHAR_TERM: u32 = 200809;
pub const _POSIX_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_THREAD_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_TRACE: i32 = -1;
pub const _POSIX_TRACE_EVENT_FILTER: i32 = -1;
pub const _POSIX_TRACE_INHERIT: i32 = -1;
pub const _POSIX_TRACE_LOG: i32 = -1;
pub const _POSIX_TYPED_MEMORY_OBJECTS: i32 = -1;
pub const _XOPEN_STREAMS: i32 = -1;
pub const _POSIX_V7_LPBIG_OFFBIG: i32 = -1;
pub const _POSIX_V6_LPBIG_OFFBIG: i32 = -1;
pub const _XBS5_LPBIG_OFFBIG: i32 = -1;
pub const _POSIX_V7_LP64_OFF64: u32 = 1;
pub const _POSIX_V6_LP64_OFF64: u32 = 1;
pub const _XBS5_LP64_OFF64: u32 = 1;
pub const __ILP32_OFF32_CFLAGS: &[u8; 5] = b"-m32\0";
pub const __ILP32_OFF32_LDFLAGS: &[u8; 5] = b"-m32\0";
pub const __ILP32_OFFBIG_CFLAGS: &[u8; 48] = b"-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64\0";
pub const __ILP32_OFFBIG_LDFLAGS: &[u8; 5] = b"-m32\0";
pub const __LP64_OFF64_CFLAGS: &[u8; 5] = b"-m64\0";
pub const __LP64_OFF64_LDFLAGS: &[u8; 5] = b"-m64\0";
pub const STDIN_FILENO: u32 = 0;
pub const STDOUT_FILENO: u32 = 1;
pub const STDERR_FILENO: u32 = 2;
pub const R_OK: u32 = 4;
pub const W_OK: u32 = 2;
pub const X_OK: u32 = 1;
pub const F_OK: u32 = 0;
pub const L_SET: u32 = 0;
pub const L_INCR: u32 = 1;
pub const L_XTND: u32 = 2;
pub const _GETOPT_POSIX_H: u32 = 1;
pub const _GETOPT_CORE_H: u32 = 1;
pub const F_ULOCK: u32 = 0;
pub const F_LOCK: u32 = 1;
pub const F_TLOCK: u32 = 2;
pub const F_TEST: u32 = 3;
pub const HOST_NAME_MAX: u32 = 64;
pub const INFINITE8: u32 = 255;
pub const INFINITE16: u32 = 65535;
pub const INFINITE: u32 = 4294967295;
pub const INFINITE64: i32 = -1;
pub const NO_VAL8: u32 = 254;
pub const NO_VAL16: u32 = 65534;
pub const NO_VAL: u32 = 4294967294;
pub const NO_VAL64: i32 = -2;
pub const NO_CONSUME_VAL64: i32 = -3;
pub const MAX_TASKS_PER_NODE: u32 = 512;
pub const MAX_JOB_ID: u32 = 67108863;
pub const MAX_FED_JOB_ID: u32 = 4294967293;
pub const MAX_HET_JOB_COMPONENTS: u32 = 128;
pub const MAX_FED_CLUSTERS: u32 = 63;
pub const MAX_JOB_SIZE_BITMAP: u32 = 16384;
pub const MAX_SLURM_NODES: u32 = 65536;
pub const SLURM_MAX_NORMAL_STEP_ID: u32 = 4294967280;
pub const SLURM_PENDING_STEP: u32 = 4294967293;
pub const SLURM_EXTERN_CONT: u32 = 4294967292;
pub const SLURM_BATCH_SCRIPT: u32 = 4294967291;
pub const SLURM_INTERACTIVE_STEP: u32 = 4294967290;
pub const DEFAULT_EIO_SHUTDOWN_WAIT: u32 = 60;
pub const JOB_STATE_BASE: u32 = 255;
pub const JOB_STATE_FLAGS: u32 = 4294967040;
pub const READY_JOB_FATAL: i32 = -2;
pub const READY_JOB_ERROR: i32 = -1;
pub const ARRAY_TASK_REQUEUED: u32 = 1;
pub const NICE_OFFSET: u32 = 2147483648;
pub const PARTITION_SUBMIT: u32 = 1;
pub const PARTITION_SCHED: u32 = 2;
pub const PARTITION_DOWN: u32 = 1;
pub const PARTITION_UP: u32 = 3;
pub const PARTITION_DRAIN: u32 = 2;
pub const PARTITION_INACTIVE: u32 = 0;
pub const PARTITION_ENFORCE_NONE: u32 = 0;
pub const PARTITION_ENFORCE_ALL: u32 = 1;
pub const PARTITION_ENFORCE_ANY: u32 = 2;
pub const ACCT_GATHER_PROFILE_NOT_SET: u32 = 0;
pub const ACCT_GATHER_PROFILE_ALL: u32 = 4294967295;
pub const SLURM_DIST_STATE_BASE: u32 = 65535;
pub const SLURM_DIST_STATE_FLAGS: u32 = 16711680;
pub const SLURM_DIST_PACK_NODES: u32 = 8388608;
pub const SLURM_DIST_NO_PACK_NODES: u32 = 4194304;
pub const SLURM_DIST_NODEMASK: u32 = 61455;
pub const SLURM_DIST_SOCKMASK: u32 = 61680;
pub const SLURM_DIST_COREMASK: u32 = 65280;
pub const SLURM_DIST_NODESOCKMASK: u32 = 61695;
pub const OPEN_MODE_APPEND: u32 = 1;
pub const OPEN_MODE_TRUNCATE: u32 = 2;
pub const CPU_BIND_T_TO_MASK: u32 = 30;
pub const CPU_BIND_T_AUTO_TO_MASK: u32 = 212992;
pub const CPU_BIND_T_MASK: u32 = 4064;
pub const CPU_FREQ_RANGE_FLAG: u32 = 2147483648;
pub const CPU_FREQ_LOW: u32 = 2147483649;
pub const CPU_FREQ_MEDIUM: u32 = 2147483650;
pub const CPU_FREQ_HIGH: u32 = 2147483651;
pub const CPU_FREQ_HIGHM1: u32 = 2147483652;
pub const CPU_FREQ_CONSERVATIVE: u32 = 2281701376;
pub const CPU_FREQ_ONDEMAND: u32 = 2214592512;
pub const CPU_FREQ_PERFORMANCE: u32 = 2181038080;
pub const CPU_FREQ_POWERSAVE: u32 = 2164260864;
pub const CPU_FREQ_USERSPACE: u32 = 2155872256;
pub const CPU_FREQ_SCHEDUTIL: u32 = 2151677952;
pub const CPU_FREQ_GOV_MASK: u32 = 2414870528;
pub const MEM_BIND_TYPE_MASK: u32 = 62;
pub const MEM_BIND_TYPE_FLAGS_MASK: u32 = 192;
pub const NODE_STATE_BASE: u32 = 15;
pub const NODE_STATE_FLAGS: u32 = 4294967280;
pub const CR_CPU: u32 = 1;
pub const CR_SOCKET: u32 = 2;
pub const CR_CORE: u32 = 4;
pub const CR_BOARD: u32 = 8;
pub const CR_MEMORY: u32 = 16;
pub const ENFORCE_BINDING_GRES: u32 = 64;
pub const ONE_TASK_PER_SHARING_GRES: u32 = 128;
pub const CR_ONE_TASK_PER_CORE: u32 = 256;
pub const CR_PACK_NODES: u32 = 512;
pub const LL_SHARED_GRES: u32 = 1024;
pub const CR_CORE_DEFAULT_DIST_BLOCK: u32 = 4096;
pub const CR_LLN: u32 = 16384;
pub const MULTIPLE_SHARING_GRES_PJ: u32 = 32768;
pub const CR_LINEAR: u32 = 32768;
pub const MEM_PER_CPU: i64 = -9223372036854775808;
pub const SHARED_FORCE: u32 = 32768;
pub const PRIORITY_RESET_NONE: u32 = 0;
pub const PRIORITY_RESET_NOW: u32 = 1;
pub const PRIORITY_RESET_DAILY: u32 = 2;
pub const PRIORITY_RESET_WEEKLY: u32 = 3;
pub const PRIORITY_RESET_MONTHLY: u32 = 4;
pub const PRIORITY_RESET_QUARTERLY: u32 = 5;
pub const PRIORITY_RESET_YEARLY: u32 = 6;
pub const PROP_PRIO_OFF: u32 = 0;
pub const PROP_PRIO_ON: u32 = 1;
pub const PROP_PRIO_NICER: u32 = 2;
pub const X11_FORWARD_ALL: u32 = 1;
pub const X11_FORWARD_BATCH: u32 = 2;
pub const X11_FORWARD_FIRST: u32 = 4;
pub const X11_FORWARD_LAST: u32 = 8;
pub const ALLOC_SID_ADMIN_HOLD: u32 = 1;
pub const ALLOC_SID_USER_HOLD: u32 = 2;
pub const JOB_SHARED_NONE: u32 = 0;
pub const JOB_SHARED_OK: u32 = 1;
pub const JOB_SHARED_USER: u32 = 2;
pub const JOB_SHARED_MCS: u32 = 3;
pub const JOB_SHARED_TOPO: u32 = 4;
pub const CORE_SPEC_THREAD: u32 = 32768;
pub const JOB_DEF_CPU_PER_GPU: u32 = 1;
pub const JOB_DEF_MEM_PER_GPU: u32 = 2;
pub const PREEMPT_MODE_OFF: u32 = 0;
pub const PREEMPT_MODE_SUSPEND: u32 = 1;
pub const PREEMPT_MODE_REQUEUE: u32 = 2;
pub const PREEMPT_MODE_CANCEL: u32 = 8;
pub const PREEMPT_MODE_COND_OFF: u32 = 16;
pub const PREEMPT_MODE_WITHIN: u32 = 16384;
pub const PREEMPT_MODE_GANG: u32 = 32768;
pub const HEALTH_CHECK_NODE_IDLE: u32 = 1;
pub const HEALTH_CHECK_NODE_ALLOC: u32 = 2;
pub const HEALTH_CHECK_NODE_MIXED: u32 = 4;
pub const HEALTH_CHECK_NODE_NONDRAINED_IDLE: u32 = 8;
pub const HEALTH_CHECK_CYCLE: u32 = 32768;
pub const HEALTH_CHECK_NODE_ANY: u32 = 15;
pub const PROLOG_FLAG_ALLOC: u32 = 1;
pub const PROLOG_FLAG_NOHOLD: u32 = 2;
pub const PROLOG_FLAG_CONTAIN: u32 = 4;
pub const PROLOG_FLAG_SERIAL: u32 = 8;
pub const PROLOG_FLAG_X11: u32 = 16;
pub const PROLOG_FLAG_DEFER_BATCH: u32 = 32;
pub const PROLOG_FLAG_FORCE_REQUEUE_ON_FAIL: u32 = 64;
pub const PROLOG_FLAG_RUN_IN_JOB: u32 = 128;
pub const LOG_FMT_ISO8601_MS: u32 = 0;
pub const LOG_FMT_ISO8601: u32 = 1;
pub const LOG_FMT_RFC5424_MS: u32 = 2;
pub const LOG_FMT_RFC5424: u32 = 3;
pub const LOG_FMT_CLOCK: u32 = 4;
pub const LOG_FMT_SHORT: u32 = 5;
pub const LOG_FMT_THREAD_ID: u32 = 6;
pub const LOG_FMT_RFC3339: u32 = 7;
pub const STAT_COMMAND_RESET: u32 = 0;
pub const STAT_COMMAND_GET: u32 = 1;
pub const TRIGGER_FLAG_PERM: u32 = 1;
pub const TRIGGER_RES_TYPE_JOB: u32 = 1;
pub const TRIGGER_RES_TYPE_NODE: u32 = 2;
pub const TRIGGER_RES_TYPE_SLURMCTLD: u32 = 3;
pub const TRIGGER_RES_TYPE_SLURMDBD: u32 = 4;
pub const TRIGGER_RES_TYPE_DATABASE: u32 = 5;
pub const TRIGGER_RES_TYPE_FRONT_END: u32 = 6;
pub const TRIGGER_RES_TYPE_OTHER: u32 = 7;
pub const ASSOC_MGR_INFO_FLAG_ASSOC: u32 = 1;
pub const ASSOC_MGR_INFO_FLAG_USERS: u32 = 2;
pub const ASSOC_MGR_INFO_FLAG_QOS: u32 = 4;
pub const BB_FLAG_DISABLE_PERSISTENT: u32 = 1;
pub const BB_FLAG_ENABLE_PERSISTENT: u32 = 2;
pub const BB_FLAG_EMULATE_CRAY: u32 = 4;
pub const BB_FLAG_PRIVATE_DATA: u32 = 8;
pub const BB_FLAG_TEARDOWN_FAILURE: u32 = 16;
pub const BB_SIZE_IN_NODES: i64 = -9223372036854775808;
pub const BB_STATE_PENDING: u32 = 0;
pub const BB_STATE_ALLOCATING: u32 = 1;
pub const BB_STATE_ALLOCATED: u32 = 2;
pub const BB_STATE_DELETING: u32 = 5;
pub const BB_STATE_DELETED: u32 = 6;
pub const BB_STATE_STAGING_IN: u32 = 17;
pub const BB_STATE_STAGED_IN: u32 = 18;
pub const BB_STATE_PRE_RUN: u32 = 24;
pub const BB_STATE_ALLOC_REVOKE: u32 = 26;
pub const BB_STATE_RUNNING: u32 = 33;
pub const BB_STATE_SUSPEND: u32 = 34;
pub const BB_STATE_POST_RUN: u32 = 41;
pub const BB_STATE_STAGING_OUT: u32 = 49;
pub const BB_STATE_STAGED_OUT: u32 = 50;
pub const BB_STATE_TEARDOWN: u32 = 65;
pub const BB_STATE_TEARDOWN_FAIL: u32 = 67;
pub const BB_STATE_COMPLETE: u32 = 69;
pub const QOS_FLAG_BASE: u32 = 268435455;
pub const QOS_FLAG_NOTSET: u32 = 268435456;
pub const QOS_FLAG_ADD: u32 = 536870912;
pub const QOS_FLAG_REMOVE: u32 = 1073741824;
pub const SLURMDB_RES_FLAG_BASE: u32 = 268435455;
pub const SLURMDB_RES_FLAG_NOTSET: u32 = 268435456;
pub const SLURMDB_RES_FLAG_ADD: u32 = 536870912;
pub const SLURMDB_RES_FLAG_REMOVE: u32 = 1073741824;
pub const FEDERATION_FLAG_BASE: u32 = 268435455;
pub const FEDERATION_FLAG_NOTSET: u32 = 268435456;
pub const FEDERATION_FLAG_ADD: u32 = 536870912;
pub const FEDERATION_FLAG_REMOVE: u32 = 1073741824;
pub const CLUSTER_FED_STATE_BASE: u32 = 15;
pub const CLUSTER_FED_STATE_FLAGS: u32 = 65520;
pub const CLUSTER_FED_STATE_DRAIN: u32 = 16;
pub const CLUSTER_FED_STATE_REMOVE: u32 = 32;
pub const SLURMDB_JOB_FLAG_NONE: u32 = 0;
pub const SLURMDB_JOB_CLEAR_SCHED: u32 = 15;
pub const SLURMDB_PURGE_BASE: u32 = 65535;
pub const SLURMDB_PURGE_FLAGS: u32 = 4294901760;
pub const SLURMDB_PURGE_HOURS: u32 = 65536;
pub const SLURMDB_PURGE_DAYS: u32 = 131072;
pub const SLURMDB_PURGE_MONTHS: u32 = 262144;
pub const SLURMDB_PURGE_ARCHIVE: u32 = 524288;
pub const SLURMDB_FS_USE_PARENT: u32 = 2147483647;
pub const SLURMDB_CLASSIFIED_FLAG: u32 = 256;
pub const SLURMDB_CLASS_BASE: u32 = 255;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of max_align_t"][::std::mem::size_of::<max_align_t>() - 32usize];
    ["Alignment of max_align_t"][::std::mem::align_of::<max_align_t>() - 16usize];
    ["Offset of field: max_align_t::__clang_max_align_nonce1"]
        [::std::mem::offset_of!(max_align_t, __clang_max_align_nonce1) - 0usize];
    ["Offset of field: max_align_t::__clang_max_align_nonce2"]
        [::std::mem::offset_of!(max_align_t, __clang_max_align_nonce2) - 16usize];
};
unsafe extern "C" {
    pub fn __errno_location() -> *mut ::std::os::raw::c_int;
}
pub const slurm_err_t_SLURM_UNEXPECTED_MSG_ERROR: slurm_err_t = 1000;
pub const slurm_err_t_SLURM_COMMUNICATIONS_CONNECTION_ERROR: slurm_err_t = 1001;
pub const slurm_err_t_SLURM_COMMUNICATIONS_SEND_ERROR: slurm_err_t = 1002;
pub const slurm_err_t_SLURM_COMMUNICATIONS_RECEIVE_ERROR: slurm_err_t = 1003;
pub const slurm_err_t_SLURM_COMMUNICATIONS_SHUTDOWN_ERROR: slurm_err_t = 1004;
pub const slurm_err_t_SLURM_PROTOCOL_VERSION_ERROR: slurm_err_t = 1005;
pub const slurm_err_t_SLURM_PROTOCOL_IO_STREAM_VERSION_ERROR: slurm_err_t = 1006;
pub const slurm_err_t_SLURM_PROTOCOL_AUTHENTICATION_ERROR: slurm_err_t = 1007;
pub const slurm_err_t_SLURM_PROTOCOL_INSANE_MSG_LENGTH: slurm_err_t = 1008;
pub const slurm_err_t_SLURM_MPI_PLUGIN_NAME_INVALID: slurm_err_t = 1009;
pub const slurm_err_t_SLURM_MPI_PLUGIN_PRELAUNCH_SETUP_FAILED: slurm_err_t = 1010;
pub const slurm_err_t_SLURM_PLUGIN_NAME_INVALID: slurm_err_t = 1011;
pub const slurm_err_t_SLURM_UNKNOWN_FORWARD_ADDR: slurm_err_t = 1012;
pub const slurm_err_t_SLURM_COMMUNICATIONS_MISSING_SOCKET_ERROR: slurm_err_t = 1013;
pub const slurm_err_t_SLURM_COMMUNICATIONS_INVALID_INCOMING_FD: slurm_err_t = 1014;
pub const slurm_err_t_SLURM_COMMUNICATIONS_INVALID_OUTGOING_FD: slurm_err_t = 1015;
pub const slurm_err_t_SLURM_COMMUNICATIONS_INVALID_FD: slurm_err_t = 1016;
pub const slurm_err_t_SLURMCTLD_COMMUNICATIONS_CONNECTION_ERROR: slurm_err_t = 1800;
pub const slurm_err_t_SLURMCTLD_COMMUNICATIONS_SEND_ERROR: slurm_err_t = 1801;
pub const slurm_err_t_SLURMCTLD_COMMUNICATIONS_RECEIVE_ERROR: slurm_err_t = 1802;
pub const slurm_err_t_SLURMCTLD_COMMUNICATIONS_SHUTDOWN_ERROR: slurm_err_t = 1803;
pub const slurm_err_t_SLURMCTLD_COMMUNICATIONS_BACKOFF: slurm_err_t = 1804;
pub const slurm_err_t_SLURMCTLD_COMMUNICATIONS_HARD_DROP: slurm_err_t = 1805;
pub const slurm_err_t_SLURM_NO_CHANGE_IN_DATA: slurm_err_t = 1900;
pub const slurm_err_t_ESLURM_INVALID_PARTITION_NAME: slurm_err_t = 2000;
pub const slurm_err_t_ESLURM_DEFAULT_PARTITION_NOT_SET: slurm_err_t = 2001;
pub const slurm_err_t_ESLURM_ACCESS_DENIED: slurm_err_t = 2002;
pub const slurm_err_t_ESLURM_JOB_MISSING_REQUIRED_PARTITION_GROUP: slurm_err_t = 2003;
pub const slurm_err_t_ESLURM_REQUESTED_NODES_NOT_IN_PARTITION: slurm_err_t = 2004;
pub const slurm_err_t_ESLURM_TOO_MANY_REQUESTED_CPUS: slurm_err_t = 2005;
pub const slurm_err_t_ESLURM_INVALID_NODE_COUNT: slurm_err_t = 2006;
pub const slurm_err_t_ESLURM_ERROR_ON_DESC_TO_RECORD_COPY: slurm_err_t = 2007;
pub const slurm_err_t_ESLURM_JOB_MISSING_SIZE_SPECIFICATION: slurm_err_t = 2008;
pub const slurm_err_t_ESLURM_JOB_SCRIPT_MISSING: slurm_err_t = 2009;
pub const slurm_err_t_ESLURM_USER_ID_MISSING: slurm_err_t = 2010;
pub const slurm_err_t_ESLURM_DUPLICATE_JOB_ID: slurm_err_t = 2011;
pub const slurm_err_t_ESLURM_PATHNAME_TOO_LONG: slurm_err_t = 2012;
pub const slurm_err_t_ESLURM_NOT_TOP_PRIORITY: slurm_err_t = 2013;
pub const slurm_err_t_ESLURM_REQUESTED_NODE_CONFIG_UNAVAILABLE: slurm_err_t = 2014;
pub const slurm_err_t_ESLURM_REQUESTED_PART_CONFIG_UNAVAILABLE: slurm_err_t = 2015;
pub const slurm_err_t_ESLURM_NODES_BUSY: slurm_err_t = 2016;
pub const slurm_err_t_ESLURM_INVALID_JOB_ID: slurm_err_t = 2017;
pub const slurm_err_t_ESLURM_INVALID_NODE_NAME: slurm_err_t = 2018;
pub const slurm_err_t_ESLURM_WRITING_TO_FILE: slurm_err_t = 2019;
pub const slurm_err_t_ESLURM_TRANSITION_STATE_NO_UPDATE: slurm_err_t = 2020;
pub const slurm_err_t_ESLURM_ALREADY_DONE: slurm_err_t = 2021;
pub const slurm_err_t_ESLURM_INTERCONNECT_FAILURE: slurm_err_t = 2022;
pub const slurm_err_t_ESLURM_BAD_DIST: slurm_err_t = 2023;
pub const slurm_err_t_ESLURM_JOB_PENDING: slurm_err_t = 2024;
pub const slurm_err_t_ESLURM_BAD_TASK_COUNT: slurm_err_t = 2025;
pub const slurm_err_t_ESLURM_INVALID_JOB_CREDENTIAL: slurm_err_t = 2026;
pub const slurm_err_t_ESLURM_IN_STANDBY_MODE: slurm_err_t = 2027;
pub const slurm_err_t_ESLURM_INVALID_NODE_STATE: slurm_err_t = 2028;
pub const slurm_err_t_ESLURM_INVALID_FEATURE: slurm_err_t = 2029;
pub const slurm_err_t_ESLURM_INVALID_AUTHTYPE_CHANGE: slurm_err_t = 2030;
pub const slurm_err_t_ESLURM_ACTIVE_FEATURE_NOT_SUBSET: slurm_err_t = 2031;
pub const slurm_err_t_ESLURM_INVALID_SCHEDTYPE_CHANGE: slurm_err_t = 2032;
pub const slurm_err_t_ESLURM_INVALID_SELECTTYPE_CHANGE: slurm_err_t = 2033;
pub const slurm_err_t_ESLURM_INVALID_SWITCHTYPE_CHANGE: slurm_err_t = 2034;
pub const slurm_err_t_ESLURM_FRAGMENTATION: slurm_err_t = 2035;
pub const slurm_err_t_ESLURM_NOT_SUPPORTED: slurm_err_t = 2036;
pub const slurm_err_t_ESLURM_DISABLED: slurm_err_t = 2037;
pub const slurm_err_t_ESLURM_DEPENDENCY: slurm_err_t = 2038;
pub const slurm_err_t_ESLURM_BATCH_ONLY: slurm_err_t = 2039;
pub const slurm_err_t_ESLURM_LICENSES_UNAVAILABLE: slurm_err_t = 2040;
pub const slurm_err_t_ESLURM_TAKEOVER_NO_HEARTBEAT: slurm_err_t = 2041;
pub const slurm_err_t_ESLURM_JOB_HELD: slurm_err_t = 2042;
pub const slurm_err_t_ESLURM_INVALID_CRED_TYPE_CHANGE: slurm_err_t = 2043;
pub const slurm_err_t_ESLURM_INVALID_TASK_MEMORY: slurm_err_t = 2044;
pub const slurm_err_t_ESLURM_INVALID_ACCOUNT: slurm_err_t = 2045;
pub const slurm_err_t_ESLURM_INVALID_PARENT_ACCOUNT: slurm_err_t = 2046;
pub const slurm_err_t_ESLURM_SAME_PARENT_ACCOUNT: slurm_err_t = 2047;
pub const slurm_err_t_ESLURM_INVALID_LICENSES: slurm_err_t = 2048;
pub const slurm_err_t_ESLURM_NEED_RESTART: slurm_err_t = 2049;
pub const slurm_err_t_ESLURM_ACCOUNTING_POLICY: slurm_err_t = 2050;
pub const slurm_err_t_ESLURM_INVALID_TIME_LIMIT: slurm_err_t = 2051;
pub const slurm_err_t_ESLURM_RESERVATION_ACCESS: slurm_err_t = 2052;
pub const slurm_err_t_ESLURM_RESERVATION_INVALID: slurm_err_t = 2053;
pub const slurm_err_t_ESLURM_INVALID_TIME_VALUE: slurm_err_t = 2054;
pub const slurm_err_t_ESLURM_RESERVATION_BUSY: slurm_err_t = 2055;
pub const slurm_err_t_ESLURM_RESERVATION_NOT_USABLE: slurm_err_t = 2056;
pub const slurm_err_t_ESLURM_INVALID_WCKEY: slurm_err_t = 2057;
pub const slurm_err_t_ESLURM_RESERVATION_OVERLAP: slurm_err_t = 2058;
pub const slurm_err_t_ESLURM_PORTS_BUSY: slurm_err_t = 2059;
pub const slurm_err_t_ESLURM_PORTS_INVALID: slurm_err_t = 2060;
pub const slurm_err_t_ESLURM_PROLOG_RUNNING: slurm_err_t = 2061;
pub const slurm_err_t_ESLURM_NO_STEPS: slurm_err_t = 2062;
pub const slurm_err_t_ESLURM_MISSING_WORK_DIR: slurm_err_t = 2063;
pub const slurm_err_t_ESLURM_INVALID_QOS: slurm_err_t = 2066;
pub const slurm_err_t_ESLURM_QOS_PREEMPTION_LOOP: slurm_err_t = 2067;
pub const slurm_err_t_ESLURM_NODE_NOT_AVAIL: slurm_err_t = 2068;
pub const slurm_err_t_ESLURM_INVALID_CPU_COUNT: slurm_err_t = 2069;
pub const slurm_err_t_ESLURM_PARTITION_NOT_AVAIL: slurm_err_t = 2070;
pub const slurm_err_t_ESLURM_CIRCULAR_DEPENDENCY: slurm_err_t = 2071;
pub const slurm_err_t_ESLURM_INVALID_GRES: slurm_err_t = 2072;
pub const slurm_err_t_ESLURM_JOB_NOT_PENDING: slurm_err_t = 2073;
pub const slurm_err_t_ESLURM_QOS_THRES: slurm_err_t = 2074;
pub const slurm_err_t_ESLURM_PARTITION_IN_USE: slurm_err_t = 2075;
pub const slurm_err_t_ESLURM_STEP_LIMIT: slurm_err_t = 2076;
pub const slurm_err_t_ESLURM_JOB_SUSPENDED: slurm_err_t = 2077;
pub const slurm_err_t_ESLURM_CAN_NOT_START_IMMEDIATELY: slurm_err_t = 2078;
pub const slurm_err_t_ESLURM_INTERCONNECT_BUSY: slurm_err_t = 2079;
pub const slurm_err_t_ESLURM_RESERVATION_EMPTY: slurm_err_t = 2080;
pub const slurm_err_t_ESLURM_INVALID_ARRAY: slurm_err_t = 2081;
pub const slurm_err_t_ESLURM_RESERVATION_NAME_DUP: slurm_err_t = 2082;
pub const slurm_err_t_ESLURM_JOB_STARTED: slurm_err_t = 2083;
pub const slurm_err_t_ESLURM_JOB_FINISHED: slurm_err_t = 2084;
pub const slurm_err_t_ESLURM_JOB_NOT_RUNNING: slurm_err_t = 2085;
pub const slurm_err_t_ESLURM_JOB_NOT_PENDING_NOR_RUNNING: slurm_err_t = 2086;
pub const slurm_err_t_ESLURM_JOB_NOT_SUSPENDED: slurm_err_t = 2087;
pub const slurm_err_t_ESLURM_JOB_NOT_FINISHED: slurm_err_t = 2088;
pub const slurm_err_t_ESLURM_TRIGGER_DUP: slurm_err_t = 2089;
pub const slurm_err_t_ESLURM_INTERNAL: slurm_err_t = 2090;
pub const slurm_err_t_ESLURM_INVALID_BURST_BUFFER_CHANGE: slurm_err_t = 2091;
pub const slurm_err_t_ESLURM_BURST_BUFFER_PERMISSION: slurm_err_t = 2092;
pub const slurm_err_t_ESLURM_BURST_BUFFER_LIMIT: slurm_err_t = 2093;
pub const slurm_err_t_ESLURM_INVALID_BURST_BUFFER_REQUEST: slurm_err_t = 2094;
pub const slurm_err_t_ESLURM_PRIO_RESET_FAIL: slurm_err_t = 2095;
pub const slurm_err_t_ESLURM_CANNOT_MODIFY_CRON_JOB: slurm_err_t = 2096;
pub const slurm_err_t_ESLURM_INVALID_JOB_CONTAINER_CHANGE: slurm_err_t = 2097;
pub const slurm_err_t_ESLURM_CANNOT_CANCEL_CRON_JOB: slurm_err_t = 2098;
pub const slurm_err_t_ESLURM_INVALID_MCS_LABEL: slurm_err_t = 2099;
pub const slurm_err_t_ESLURM_BURST_BUFFER_WAIT: slurm_err_t = 2100;
pub const slurm_err_t_ESLURM_PARTITION_DOWN: slurm_err_t = 2101;
pub const slurm_err_t_ESLURM_DUPLICATE_GRES: slurm_err_t = 2102;
pub const slurm_err_t_ESLURM_RSV_ALREADY_STARTED: slurm_err_t = 2104;
pub const slurm_err_t_ESLURM_SUBMISSIONS_DISABLED: slurm_err_t = 2105;
pub const slurm_err_t_ESLURM_NOT_HET_JOB: slurm_err_t = 2106;
pub const slurm_err_t_ESLURM_NOT_HET_JOB_LEADER: slurm_err_t = 2107;
pub const slurm_err_t_ESLURM_NOT_WHOLE_HET_JOB: slurm_err_t = 2108;
pub const slurm_err_t_ESLURM_CORE_RESERVATION_UPDATE: slurm_err_t = 2109;
pub const slurm_err_t_ESLURM_DUPLICATE_STEP_ID: slurm_err_t = 2110;
pub const slurm_err_t_ESLURM_INVALID_CORE_CNT: slurm_err_t = 2111;
pub const slurm_err_t_ESLURM_X11_NOT_AVAIL: slurm_err_t = 2112;
pub const slurm_err_t_ESLURM_GROUP_ID_MISSING: slurm_err_t = 2113;
pub const slurm_err_t_ESLURM_BATCH_CONSTRAINT: slurm_err_t = 2114;
pub const slurm_err_t_ESLURM_INVALID_TRES: slurm_err_t = 2115;
pub const slurm_err_t_ESLURM_INVALID_TRES_BILLING_WEIGHTS: slurm_err_t = 2116;
pub const slurm_err_t_ESLURM_INVALID_JOB_DEFAULTS: slurm_err_t = 2117;
pub const slurm_err_t_ESLURM_RESERVATION_MAINT: slurm_err_t = 2118;
pub const slurm_err_t_ESLURM_INVALID_GRES_TYPE: slurm_err_t = 2119;
pub const slurm_err_t_ESLURM_REBOOT_IN_PROGRESS: slurm_err_t = 2120;
pub const slurm_err_t_ESLURM_MULTI_KNL_CONSTRAINT: slurm_err_t = 2121;
pub const slurm_err_t_ESLURM_UNSUPPORTED_GRES: slurm_err_t = 2122;
pub const slurm_err_t_ESLURM_INVALID_NICE: slurm_err_t = 2123;
pub const slurm_err_t_ESLURM_INVALID_TIME_MIN_LIMIT: slurm_err_t = 2124;
pub const slurm_err_t_ESLURM_DEFER: slurm_err_t = 2125;
pub const slurm_err_t_ESLURM_CONFIGLESS_DISABLED: slurm_err_t = 2126;
pub const slurm_err_t_ESLURM_ENVIRONMENT_MISSING: slurm_err_t = 2127;
pub const slurm_err_t_ESLURM_RESERVATION_NO_SKIP: slurm_err_t = 2128;
pub const slurm_err_t_ESLURM_RESERVATION_USER_GROUP: slurm_err_t = 2129;
pub const slurm_err_t_ESLURM_PARTITION_ASSOC: slurm_err_t = 2130;
pub const slurm_err_t_ESLURM_IN_STANDBY_USE_BACKUP: slurm_err_t = 2131;
pub const slurm_err_t_ESLURM_BAD_THREAD_PER_CORE: slurm_err_t = 2132;
pub const slurm_err_t_ESLURM_INVALID_PREFER: slurm_err_t = 2133;
pub const slurm_err_t_ESLURM_INSUFFICIENT_GRES: slurm_err_t = 2134;
pub const slurm_err_t_ESLURM_INVALID_CONTAINER_ID: slurm_err_t = 2135;
pub const slurm_err_t_ESLURM_EMPTY_JOB_ID: slurm_err_t = 2136;
pub const slurm_err_t_ESLURM_INVALID_JOB_ID_ZERO: slurm_err_t = 2137;
pub const slurm_err_t_ESLURM_INVALID_JOB_ID_NEGATIVE: slurm_err_t = 2138;
pub const slurm_err_t_ESLURM_INVALID_JOB_ID_TOO_LARGE: slurm_err_t = 2139;
pub const slurm_err_t_ESLURM_INVALID_JOB_ID_NON_NUMERIC: slurm_err_t = 2140;
pub const slurm_err_t_ESLURM_EMPTY_JOB_ARRAY_ID: slurm_err_t = 2141;
pub const slurm_err_t_ESLURM_INVALID_JOB_ARRAY_ID_NEGATIVE: slurm_err_t = 2142;
pub const slurm_err_t_ESLURM_INVALID_JOB_ARRAY_ID_TOO_LARGE: slurm_err_t = 2143;
pub const slurm_err_t_ESLURM_INVALID_JOB_ARRAY_ID_NON_NUMERIC: slurm_err_t = 2144;
pub const slurm_err_t_ESLURM_INVALID_HET_JOB_AND_ARRAY: slurm_err_t = 2145;
pub const slurm_err_t_ESLURM_EMPTY_HET_JOB_COMP: slurm_err_t = 2146;
pub const slurm_err_t_ESLURM_INVALID_HET_JOB_COMP_NEGATIVE: slurm_err_t = 2147;
pub const slurm_err_t_ESLURM_INVALID_HET_JOB_COMP_TOO_LARGE: slurm_err_t = 2148;
pub const slurm_err_t_ESLURM_INVALID_HET_JOB_COMP_NON_NUMERIC: slurm_err_t = 2149;
pub const slurm_err_t_ESLURM_EMPTY_STEP_ID: slurm_err_t = 2150;
pub const slurm_err_t_ESLURM_INVALID_STEP_ID_NEGATIVE: slurm_err_t = 2151;
pub const slurm_err_t_ESLURM_INVALID_STEP_ID_TOO_LARGE: slurm_err_t = 2152;
pub const slurm_err_t_ESLURM_INVALID_STEP_ID_NON_NUMERIC: slurm_err_t = 2153;
pub const slurm_err_t_ESLURM_EMPTY_HET_STEP: slurm_err_t = 2154;
pub const slurm_err_t_ESLURM_INVALID_HET_STEP_ZERO: slurm_err_t = 2155;
pub const slurm_err_t_ESLURM_INVALID_HET_STEP_NEGATIVE: slurm_err_t = 2156;
pub const slurm_err_t_ESLURM_INVALID_HET_STEP_TOO_LARGE: slurm_err_t = 2157;
pub const slurm_err_t_ESLURM_INVALID_HET_STEP_NON_NUMERIC: slurm_err_t = 2158;
pub const slurm_err_t_ESLURM_INVALID_HET_STEP_JOB: slurm_err_t = 2159;
pub const slurm_err_t_ESLURM_JOB_TIMEOUT_KILLED: slurm_err_t = 2160;
pub const slurm_err_t_ESLURM_JOB_NODE_FAIL_KILLED: slurm_err_t = 2161;
pub const slurm_err_t_ESLURM_EMPTY_LIST: slurm_err_t = 2162;
pub const slurm_err_t_ESLURM_GROUP_ID_INVALID: slurm_err_t = 2163;
pub const slurm_err_t_ESLURM_GROUP_ID_UNKNOWN: slurm_err_t = 2164;
pub const slurm_err_t_ESLURM_USER_ID_INVALID: slurm_err_t = 2165;
pub const slurm_err_t_ESLURM_USER_ID_UNKNOWN: slurm_err_t = 2166;
pub const slurm_err_t_ESLURM_INVALID_ASSOC: slurm_err_t = 2167;
pub const slurm_err_t_ESLURM_NODE_ALREADY_EXISTS: slurm_err_t = 2168;
pub const slurm_err_t_ESLURM_NODE_TABLE_FULL: slurm_err_t = 2169;
pub const slurm_err_t_ESLURM_INVALID_RELATIVE_QOS: slurm_err_t = 2170;
pub const slurm_err_t_ESLURM_INVALID_EXTRA: slurm_err_t = 2171;
pub const slurm_err_t_ESLURM_JOB_SIGNAL_FAILED: slurm_err_t = 2172;
pub const slurm_err_t_ESLURM_SIGNAL_JOBS_INVALID: slurm_err_t = 2173;
pub const slurm_err_t_ESLURM_RES_CORES_PER_GPU_UNIQUE: slurm_err_t = 2174;
pub const slurm_err_t_ESLURM_RES_CORES_PER_GPU_TOPO: slurm_err_t = 2175;
pub const slurm_err_t_ESLURM_RES_CORES_PER_GPU_NO: slurm_err_t = 2176;
pub const slurm_err_t_ESLURM_MAX_POWERED_NODES: slurm_err_t = 2177;
pub const slurm_err_t_ESLURM_REQUESTED_TOPO_CONFIG_UNAVAILABLE: slurm_err_t = 2178;
pub const slurm_err_t_ESLURM_PREEMPTION_REQUIRED: slurm_err_t = 2179;
pub const slurm_err_t_ESPANK_ERROR: slurm_err_t = 3000;
pub const slurm_err_t_ESPANK_BAD_ARG: slurm_err_t = 3001;
pub const slurm_err_t_ESPANK_NOT_TASK: slurm_err_t = 3002;
pub const slurm_err_t_ESPANK_ENV_EXISTS: slurm_err_t = 3003;
pub const slurm_err_t_ESPANK_ENV_NOEXIST: slurm_err_t = 3004;
pub const slurm_err_t_ESPANK_NOSPACE: slurm_err_t = 3005;
pub const slurm_err_t_ESPANK_NOT_REMOTE: slurm_err_t = 3006;
pub const slurm_err_t_ESPANK_NOEXIST: slurm_err_t = 3007;
pub const slurm_err_t_ESPANK_NOT_EXECD: slurm_err_t = 3008;
pub const slurm_err_t_ESPANK_NOT_AVAIL: slurm_err_t = 3009;
pub const slurm_err_t_ESPANK_NOT_LOCAL: slurm_err_t = 3010;
pub const slurm_err_t_ESLURMD_KILL_TASK_FAILED: slurm_err_t = 4001;
pub const slurm_err_t_ESLURMD_KILL_JOB_ALREADY_COMPLETE: slurm_err_t = 4002;
pub const slurm_err_t_ESLURMD_INVALID_ACCT_FREQ: slurm_err_t = 4003;
pub const slurm_err_t_ESLURMD_INVALID_JOB_CREDENTIAL: slurm_err_t = 4004;
pub const slurm_err_t_ESLURMD_CREDENTIAL_EXPIRED: slurm_err_t = 4007;
pub const slurm_err_t_ESLURMD_CREDENTIAL_REVOKED: slurm_err_t = 4008;
pub const slurm_err_t_ESLURMD_CREDENTIAL_REPLAYED: slurm_err_t = 4009;
pub const slurm_err_t_ESLURMD_CREATE_BATCH_DIR_ERROR: slurm_err_t = 4010;
pub const slurm_err_t_ESLURMD_SETUP_ENVIRONMENT_ERROR: slurm_err_t = 4014;
pub const slurm_err_t_ESLURMD_SET_UID_OR_GID_ERROR: slurm_err_t = 4016;
pub const slurm_err_t_ESLURMD_EXECVE_FAILED: slurm_err_t = 4020;
pub const slurm_err_t_ESLURMD_IO_ERROR: slurm_err_t = 4021;
pub const slurm_err_t_ESLURMD_PROLOG_FAILED: slurm_err_t = 4022;
pub const slurm_err_t_ESLURMD_EPILOG_FAILED: slurm_err_t = 4023;
pub const slurm_err_t_ESLURMD_TOOMANYSTEPS: slurm_err_t = 4025;
pub const slurm_err_t_ESLURMD_STEP_EXISTS: slurm_err_t = 4026;
pub const slurm_err_t_ESLURMD_JOB_NOTRUNNING: slurm_err_t = 4027;
pub const slurm_err_t_ESLURMD_STEP_SUSPENDED: slurm_err_t = 4028;
pub const slurm_err_t_ESLURMD_STEP_NOTSUSPENDED: slurm_err_t = 4029;
pub const slurm_err_t_ESLURMD_INVALID_SOCKET_NAME_LEN: slurm_err_t = 4030;
pub const slurm_err_t_ESLURMD_CONTAINER_RUNTIME_INVALID: slurm_err_t = 4031;
pub const slurm_err_t_ESLURMD_CPU_BIND_ERROR: slurm_err_t = 4032;
pub const slurm_err_t_ESLURMD_CPU_LAYOUT_ERROR: slurm_err_t = 4033;
pub const slurm_err_t_ESLURMD_TOO_MANY_RPCS: slurm_err_t = 4034;
pub const slurm_err_t_ESLURM_PROTOCOL_INCOMPLETE_PACKET: slurm_err_t = 5003;
pub const slurm_err_t_SLURM_PROTOCOL_SOCKET_IMPL_TIMEOUT: slurm_err_t = 5004;
pub const slurm_err_t_SLURM_PROTOCOL_SOCKET_ZERO_BYTES_SENT: slurm_err_t = 5005;
pub const slurm_err_t_ESLURM_AUTH_CRED_INVALID: slurm_err_t = 6000;
pub const slurm_err_t_ESLURM_AUTH_EXPIRED: slurm_err_t = 6001;
pub const slurm_err_t_ESLURM_AUTH_BADARG: slurm_err_t = 6004;
pub const slurm_err_t_ESLURM_AUTH_UNPACK: slurm_err_t = 6007;
pub const slurm_err_t_ESLURM_AUTH_SKIP: slurm_err_t = 6008;
pub const slurm_err_t_ESLURM_AUTH_UNABLE_TO_GENERATE_TOKEN: slurm_err_t = 6009;
pub const slurm_err_t_ESLURM_DB_CONNECTION: slurm_err_t = 7000;
pub const slurm_err_t_ESLURM_JOBS_RUNNING_ON_ASSOC: slurm_err_t = 7001;
pub const slurm_err_t_ESLURM_CLUSTER_DELETED: slurm_err_t = 7002;
pub const slurm_err_t_ESLURM_ONE_CHANGE: slurm_err_t = 7003;
pub const slurm_err_t_ESLURM_BAD_NAME: slurm_err_t = 7004;
pub const slurm_err_t_ESLURM_OVER_ALLOCATE: slurm_err_t = 7005;
pub const slurm_err_t_ESLURM_RESULT_TOO_LARGE: slurm_err_t = 7006;
pub const slurm_err_t_ESLURM_DB_QUERY_TOO_WIDE: slurm_err_t = 7007;
pub const slurm_err_t_ESLURM_DB_CONNECTION_INVALID: slurm_err_t = 7008;
pub const slurm_err_t_ESLURM_NO_REMOVE_DEFAULT_ACCOUNT: slurm_err_t = 7009;
pub const slurm_err_t_ESLURM_BAD_SQL: slurm_err_t = 7010;
pub const slurm_err_t_ESLURM_NO_REMOVE_DEFAULT_QOS: slurm_err_t = 7011;
pub const slurm_err_t_ESLURM_COORD_NO_INCREASE_JOB_LIMIT: slurm_err_t = 7012;
pub const slurm_err_t_ESLURM_FED_CLUSTER_MAX_CNT: slurm_err_t = 7100;
pub const slurm_err_t_ESLURM_FED_CLUSTER_MULTIPLE_ASSIGNMENT: slurm_err_t = 7101;
pub const slurm_err_t_ESLURM_INVALID_CLUSTER_FEATURE: slurm_err_t = 7102;
pub const slurm_err_t_ESLURM_JOB_NOT_FEDERATED: slurm_err_t = 7103;
pub const slurm_err_t_ESLURM_INVALID_CLUSTER_NAME: slurm_err_t = 7104;
pub const slurm_err_t_ESLURM_FED_JOB_LOCK: slurm_err_t = 7105;
pub const slurm_err_t_ESLURM_FED_NO_VALID_CLUSTERS: slurm_err_t = 7106;
pub const slurm_err_t_ESLURM_MISSING_TIME_LIMIT: slurm_err_t = 8000;
pub const slurm_err_t_ESLURM_INVALID_KNL: slurm_err_t = 8001;
pub const slurm_err_t_ESLURM_PLUGIN_INVALID: slurm_err_t = 8002;
pub const slurm_err_t_ESLURM_PLUGIN_INCOMPLETE: slurm_err_t = 8003;
pub const slurm_err_t_ESLURM_PLUGIN_NOT_LOADED: slurm_err_t = 8004;
pub const slurm_err_t_ESLURM_PLUGIN_NOTFOUND: slurm_err_t = 8005;
pub const slurm_err_t_ESLURM_PLUGIN_ACCESS_ERROR: slurm_err_t = 8006;
pub const slurm_err_t_ESLURM_PLUGIN_DLOPEN_FAILED: slurm_err_t = 8007;
pub const slurm_err_t_ESLURM_PLUGIN_INIT_FAILED: slurm_err_t = 8008;
pub const slurm_err_t_ESLURM_PLUGIN_MISSING_NAME: slurm_err_t = 8009;
pub const slurm_err_t_ESLURM_PLUGIN_BAD_VERSION: slurm_err_t = 8010;
pub const slurm_err_t_ESLURM_REST_INVALID_QUERY: slurm_err_t = 9000;
pub const slurm_err_t_ESLURM_REST_FAIL_PARSING: slurm_err_t = 9001;
pub const slurm_err_t_ESLURM_REST_INVALID_JOBS_DESC: slurm_err_t = 9002;
pub const slurm_err_t_ESLURM_REST_EMPTY_RESULT: slurm_err_t = 9003;
pub const slurm_err_t_ESLURM_REST_MISSING_UID: slurm_err_t = 9004;
pub const slurm_err_t_ESLURM_REST_MISSING_GID: slurm_err_t = 9005;
pub const slurm_err_t_ESLURM_DATA_PATH_NOT_FOUND: slurm_err_t = 9200;
pub const slurm_err_t_ESLURM_DATA_PTR_NULL: slurm_err_t = 9201;
pub const slurm_err_t_ESLURM_DATA_CONV_FAILED: slurm_err_t = 9202;
pub const slurm_err_t_ESLURM_DATA_REGEX_COMPILE: slurm_err_t = 9203;
pub const slurm_err_t_ESLURM_DATA_UNKNOWN_MIME_TYPE: slurm_err_t = 9204;
pub const slurm_err_t_ESLURM_DATA_TOO_LARGE: slurm_err_t = 9205;
pub const slurm_err_t_ESLURM_DATA_FLAGS_INVALID_TYPE: slurm_err_t = 9206;
pub const slurm_err_t_ESLURM_DATA_FLAGS_INVALID: slurm_err_t = 9207;
pub const slurm_err_t_ESLURM_DATA_EXPECTED_LIST: slurm_err_t = 9208;
pub const slurm_err_t_ESLURM_DATA_EXPECTED_DICT: slurm_err_t = 9209;
pub const slurm_err_t_ESLURM_DATA_AMBIGUOUS_MODIFY: slurm_err_t = 9210;
pub const slurm_err_t_ESLURM_DATA_AMBIGUOUS_QUERY: slurm_err_t = 9211;
pub const slurm_err_t_ESLURM_DATA_PARSE_NOTHING: slurm_err_t = 9212;
pub const slurm_err_t_ESLURM_DATA_INVALID_PARSER: slurm_err_t = 9213;
pub const slurm_err_t_ESLURM_DATA_PARSING_DEPTH: slurm_err_t = 9214;
pub const slurm_err_t_ESLURM_DATA_PARSER_INVALID_STATE: slurm_err_t = 9215;
pub const slurm_err_t_ESLURM_CONTAINER_NOT_CONFIGURED: slurm_err_t = 10000;
pub type slurm_err_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct slurm_errtab_t {
    pub xe_number: ::std::os::raw::c_int,
    pub xe_name: *mut ::std::os::raw::c_char,
    pub xe_message: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of slurm_errtab_t"][::std::mem::size_of::<slurm_errtab_t>() - 24usize];
    ["Alignment of slurm_errtab_t"][::std::mem::align_of::<slurm_errtab_t>() - 8usize];
    ["Offset of field: slurm_errtab_t::xe_number"]
        [::std::mem::offset_of!(slurm_errtab_t, xe_number) - 0usize];
    ["Offset of field: slurm_errtab_t::xe_name"]
        [::std::mem::offset_of!(slurm_errtab_t, xe_name) - 8usize];
    ["Offset of field: slurm_errtab_t::xe_message"]
        [::std::mem::offset_of!(slurm_errtab_t, xe_message) - 16usize];
};
unsafe extern "C" {
    pub static mut slurm_errtab: [slurm_errtab_t; 0usize];
}
unsafe extern "C" {
    pub static mut slurm_errtab_size: ::std::os::raw::c_uint;
}
unsafe extern "C" {
    pub fn slurm_strerror(errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn slurm_seterrno(errnum: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn slurm_perror(msg: *const ::std::os::raw::c_char);
}
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __fsid_t"][::std::mem::size_of::<__fsid_t>() - 8usize];
    ["Alignment of __fsid_t"][::std::mem::align_of::<__fsid_t>() - 4usize];
    ["Offset of field: __fsid_t::__val"][::std::mem::offset_of!(__fsid_t, __val) - 0usize];
};
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type __gwchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct imaxdiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of imaxdiv_t"][::std::mem::size_of::<imaxdiv_t>() - 16usize];
    ["Alignment of imaxdiv_t"][::std::mem::align_of::<imaxdiv_t>() - 8usize];
    ["Offset of field: imaxdiv_t::quot"][::std::mem::offset_of!(imaxdiv_t, quot) - 0usize];
    ["Offset of field: imaxdiv_t::rem"][::std::mem::offset_of!(imaxdiv_t, rem) - 8usize];
};
unsafe extern "C" {
    pub fn imaxabs(__n: intmax_t) -> intmax_t;
}
unsafe extern "C" {
    pub fn imaxdiv(__numer: intmax_t, __denom: intmax_t) -> imaxdiv_t;
}
unsafe extern "C" {
    pub fn strtoimax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
unsafe extern "C" {
    pub fn strtoumax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
unsafe extern "C" {
    pub fn wcstoimax(
        __nptr: *const __gwchar_t,
        __endptr: *mut *mut __gwchar_t,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
unsafe extern "C" {
    pub fn wcstoumax(
        __nptr: *const __gwchar_t,
        __endptr: *mut *mut __gwchar_t,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iovec {
    pub iov_base: *mut ::std::os::raw::c_void,
    pub iov_len: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of iovec"][::std::mem::size_of::<iovec>() - 16usize];
    ["Alignment of iovec"][::std::mem::align_of::<iovec>() - 8usize];
    ["Offset of field: iovec::iov_base"][::std::mem::offset_of!(iovec, iov_base) - 0usize];
    ["Offset of field: iovec::iov_len"][::std::mem::offset_of!(iovec, iov_len) - 8usize];
};
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sigset_t"][::std::mem::size_of::<__sigset_t>() - 128usize];
    ["Alignment of __sigset_t"][::std::mem::align_of::<__sigset_t>() - 8usize];
    ["Offset of field: __sigset_t::__val"][::std::mem::offset_of!(__sigset_t, __val) - 0usize];
};
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timeval"][::std::mem::size_of::<timeval>() - 16usize];
    ["Alignment of timeval"][::std::mem::align_of::<timeval>() - 8usize];
    ["Offset of field: timeval::tv_sec"][::std::mem::offset_of!(timeval, tv_sec) - 0usize];
    ["Offset of field: timeval::tv_usec"][::std::mem::offset_of!(timeval, tv_usec) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timespec"][::std::mem::size_of::<timespec>() - 16usize];
    ["Alignment of timespec"][::std::mem::align_of::<timespec>() - 8usize];
    ["Offset of field: timespec::tv_sec"][::std::mem::offset_of!(timespec, tv_sec) - 0usize];
    ["Offset of field: timespec::tv_nsec"][::std::mem::offset_of!(timespec, tv_nsec) - 8usize];
};
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fd_set"][::std::mem::size_of::<fd_set>() - 128usize];
    ["Alignment of fd_set"][::std::mem::align_of::<fd_set>() - 8usize];
    ["Offset of field: fd_set::__fds_bits"][::std::mem::offset_of!(fd_set, __fds_bits) - 0usize];
};
pub type fd_mask = __fd_mask;
unsafe extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_rwlock_arch_t"][::std::mem::size_of::<__pthread_rwlock_arch_t>() - 56usize];
    ["Alignment of __pthread_rwlock_arch_t"]
        [::std::mem::align_of::<__pthread_rwlock_arch_t>() - 8usize];
    ["Offset of field: __pthread_rwlock_arch_t::__readers"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __readers) - 0usize];
    ["Offset of field: __pthread_rwlock_arch_t::__writers"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __writers) - 4usize];
    ["Offset of field: __pthread_rwlock_arch_t::__wrphase_futex"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __wrphase_futex) - 8usize];
    ["Offset of field: __pthread_rwlock_arch_t::__writers_futex"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __writers_futex) - 12usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad3"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad3) - 16usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad4"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad4) - 20usize];
    ["Offset of field: __pthread_rwlock_arch_t::__cur_writer"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __cur_writer) - 24usize];
    ["Offset of field: __pthread_rwlock_arch_t::__shared"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __shared) - 28usize];
    ["Offset of field: __pthread_rwlock_arch_t::__rwelision"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __rwelision) - 32usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad1"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad1) - 33usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad2"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad2) - 40usize];
    ["Offset of field: __pthread_rwlock_arch_t::__flags"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __flags) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_internal_list"][::std::mem::size_of::<__pthread_internal_list>() - 16usize];
    ["Alignment of __pthread_internal_list"]
        [::std::mem::align_of::<__pthread_internal_list>() - 8usize];
    ["Offset of field: __pthread_internal_list::__prev"]
        [::std::mem::offset_of!(__pthread_internal_list, __prev) - 0usize];
    ["Offset of field: __pthread_internal_list::__next"]
        [::std::mem::offset_of!(__pthread_internal_list, __next) - 8usize];
};
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_mutex_s"][::std::mem::size_of::<__pthread_mutex_s>() - 40usize];
    ["Alignment of __pthread_mutex_s"][::std::mem::align_of::<__pthread_mutex_s>() - 8usize];
    ["Offset of field: __pthread_mutex_s::__lock"]
        [::std::mem::offset_of!(__pthread_mutex_s, __lock) - 0usize];
    ["Offset of field: __pthread_mutex_s::__count"]
        [::std::mem::offset_of!(__pthread_mutex_s, __count) - 4usize];
    ["Offset of field: __pthread_mutex_s::__owner"]
        [::std::mem::offset_of!(__pthread_mutex_s, __owner) - 8usize];
    ["Offset of field: __pthread_mutex_s::__nusers"]
        [::std::mem::offset_of!(__pthread_mutex_s, __nusers) - 12usize];
    ["Offset of field: __pthread_mutex_s::__kind"]
        [::std::mem::offset_of!(__pthread_mutex_s, __kind) - 16usize];
    ["Offset of field: __pthread_mutex_s::__spins"]
        [::std::mem::offset_of!(__pthread_mutex_s, __spins) - 20usize];
    ["Offset of field: __pthread_mutex_s::__elision"]
        [::std::mem::offset_of!(__pthread_mutex_s, __elision) - 22usize];
    ["Offset of field: __pthread_mutex_s::__list"]
        [::std::mem::offset_of!(__pthread_mutex_s, __list) - 24usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __bindgen_anon_1: __pthread_cond_s__bindgen_ty_1,
    pub __bindgen_anon_2: __pthread_cond_s__bindgen_ty_2,
    pub __glibc_unused___g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_1 {
    pub __wseq: ::std::os::raw::c_ulonglong,
    pub __wseq32: __pthread_cond_s__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_cond_s__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Alignment of __pthread_cond_s__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Offset of field: __pthread_cond_s__bindgen_ty_1__bindgen_ty_1::__low"]
        [::std::mem::offset_of!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1, __low) - 0usize];
    ["Offset of field: __pthread_cond_s__bindgen_ty_1__bindgen_ty_1::__high"]
        [::std::mem::offset_of!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1, __high) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_cond_s__bindgen_ty_1"]
        [::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1>() - 8usize];
    ["Alignment of __pthread_cond_s__bindgen_ty_1"]
        [::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1>() - 8usize];
    ["Offset of field: __pthread_cond_s__bindgen_ty_1::__wseq"]
        [::std::mem::offset_of!(__pthread_cond_s__bindgen_ty_1, __wseq) - 0usize];
    ["Offset of field: __pthread_cond_s__bindgen_ty_1::__wseq32"]
        [::std::mem::offset_of!(__pthread_cond_s__bindgen_ty_1, __wseq32) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_2 {
    pub __g1_start: ::std::os::raw::c_ulonglong,
    pub __g1_start32: __pthread_cond_s__bindgen_ty_2__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_cond_s__bindgen_ty_2__bindgen_ty_1"]
        [::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>() - 8usize];
    ["Alignment of __pthread_cond_s__bindgen_ty_2__bindgen_ty_1"]
        [::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>() - 4usize];
    ["Offset of field: __pthread_cond_s__bindgen_ty_2__bindgen_ty_1::__low"]
        [::std::mem::offset_of!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1, __low) - 0usize];
    ["Offset of field: __pthread_cond_s__bindgen_ty_2__bindgen_ty_1::__high"]
        [::std::mem::offset_of!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1, __high) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_cond_s__bindgen_ty_2"]
        [::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2>() - 8usize];
    ["Alignment of __pthread_cond_s__bindgen_ty_2"]
        [::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2>() - 8usize];
    ["Offset of field: __pthread_cond_s__bindgen_ty_2::__g1_start"]
        [::std::mem::offset_of!(__pthread_cond_s__bindgen_ty_2, __g1_start) - 0usize];
    ["Offset of field: __pthread_cond_s__bindgen_ty_2::__g1_start32"]
        [::std::mem::offset_of!(__pthread_cond_s__bindgen_ty_2, __g1_start32) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_cond_s"][::std::mem::size_of::<__pthread_cond_s>() - 48usize];
    ["Alignment of __pthread_cond_s"][::std::mem::align_of::<__pthread_cond_s>() - 8usize];
    ["Offset of field: __pthread_cond_s::__glibc_unused___g_refs"]
        [::std::mem::offset_of!(__pthread_cond_s, __glibc_unused___g_refs) - 16usize];
    ["Offset of field: __pthread_cond_s::__g_size"]
        [::std::mem::offset_of!(__pthread_cond_s, __g_size) - 24usize];
    ["Offset of field: __pthread_cond_s::__g1_orig_size"]
        [::std::mem::offset_of!(__pthread_cond_s, __g1_orig_size) - 32usize];
    ["Offset of field: __pthread_cond_s::__wrefs"]
        [::std::mem::offset_of!(__pthread_cond_s, __wrefs) - 36usize];
    ["Offset of field: __pthread_cond_s::__g_signals"]
        [::std::mem::offset_of!(__pthread_cond_s, __g_signals) - 40usize];
};
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_mutexattr_t"][::std::mem::size_of::<pthread_mutexattr_t>() - 4usize];
    ["Alignment of pthread_mutexattr_t"][::std::mem::align_of::<pthread_mutexattr_t>() - 4usize];
    ["Offset of field: pthread_mutexattr_t::__size"]
        [::std::mem::offset_of!(pthread_mutexattr_t, __size) - 0usize];
    ["Offset of field: pthread_mutexattr_t::__align"]
        [::std::mem::offset_of!(pthread_mutexattr_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_condattr_t"][::std::mem::size_of::<pthread_condattr_t>() - 4usize];
    ["Alignment of pthread_condattr_t"][::std::mem::align_of::<pthread_condattr_t>() - 4usize];
    ["Offset of field: pthread_condattr_t::__size"]
        [::std::mem::offset_of!(pthread_condattr_t, __size) - 0usize];
    ["Offset of field: pthread_condattr_t::__align"]
        [::std::mem::offset_of!(pthread_condattr_t, __align) - 0usize];
};
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_attr_t"][::std::mem::size_of::<pthread_attr_t>() - 56usize];
    ["Alignment of pthread_attr_t"][::std::mem::align_of::<pthread_attr_t>() - 8usize];
    ["Offset of field: pthread_attr_t::__size"]
        [::std::mem::offset_of!(pthread_attr_t, __size) - 0usize];
    ["Offset of field: pthread_attr_t::__align"]
        [::std::mem::offset_of!(pthread_attr_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_mutex_t"][::std::mem::size_of::<pthread_mutex_t>() - 40usize];
    ["Alignment of pthread_mutex_t"][::std::mem::align_of::<pthread_mutex_t>() - 8usize];
    ["Offset of field: pthread_mutex_t::__data"]
        [::std::mem::offset_of!(pthread_mutex_t, __data) - 0usize];
    ["Offset of field: pthread_mutex_t::__size"]
        [::std::mem::offset_of!(pthread_mutex_t, __size) - 0usize];
    ["Offset of field: pthread_mutex_t::__align"]
        [::std::mem::offset_of!(pthread_mutex_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_cond_t"][::std::mem::size_of::<pthread_cond_t>() - 48usize];
    ["Alignment of pthread_cond_t"][::std::mem::align_of::<pthread_cond_t>() - 8usize];
    ["Offset of field: pthread_cond_t::__data"]
        [::std::mem::offset_of!(pthread_cond_t, __data) - 0usize];
    ["Offset of field: pthread_cond_t::__size"]
        [::std::mem::offset_of!(pthread_cond_t, __size) - 0usize];
    ["Offset of field: pthread_cond_t::__align"]
        [::std::mem::offset_of!(pthread_cond_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_rwlock_t"][::std::mem::size_of::<pthread_rwlock_t>() - 56usize];
    ["Alignment of pthread_rwlock_t"][::std::mem::align_of::<pthread_rwlock_t>() - 8usize];
    ["Offset of field: pthread_rwlock_t::__data"]
        [::std::mem::offset_of!(pthread_rwlock_t, __data) - 0usize];
    ["Offset of field: pthread_rwlock_t::__size"]
        [::std::mem::offset_of!(pthread_rwlock_t, __size) - 0usize];
    ["Offset of field: pthread_rwlock_t::__align"]
        [::std::mem::offset_of!(pthread_rwlock_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_rwlockattr_t"][::std::mem::size_of::<pthread_rwlockattr_t>() - 8usize];
    ["Alignment of pthread_rwlockattr_t"][::std::mem::align_of::<pthread_rwlockattr_t>() - 8usize];
    ["Offset of field: pthread_rwlockattr_t::__size"]
        [::std::mem::offset_of!(pthread_rwlockattr_t, __size) - 0usize];
    ["Offset of field: pthread_rwlockattr_t::__align"]
        [::std::mem::offset_of!(pthread_rwlockattr_t, __align) - 0usize];
};
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_barrier_t"][::std::mem::size_of::<pthread_barrier_t>() - 32usize];
    ["Alignment of pthread_barrier_t"][::std::mem::align_of::<pthread_barrier_t>() - 8usize];
    ["Offset of field: pthread_barrier_t::__size"]
        [::std::mem::offset_of!(pthread_barrier_t, __size) - 0usize];
    ["Offset of field: pthread_barrier_t::__align"]
        [::std::mem::offset_of!(pthread_barrier_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_barrierattr_t"][::std::mem::size_of::<pthread_barrierattr_t>() - 4usize];
    ["Alignment of pthread_barrierattr_t"]
        [::std::mem::align_of::<pthread_barrierattr_t>() - 4usize];
    ["Offset of field: pthread_barrierattr_t::__size"]
        [::std::mem::offset_of!(pthread_barrierattr_t, __size) - 0usize];
    ["Offset of field: pthread_barrierattr_t::__align"]
        [::std::mem::offset_of!(pthread_barrierattr_t, __align) - 0usize];
};
pub type socklen_t = __socklen_t;
pub const __socket_type_SOCK_STREAM: __socket_type = 1;
pub const __socket_type_SOCK_DGRAM: __socket_type = 2;
pub const __socket_type_SOCK_RAW: __socket_type = 3;
pub const __socket_type_SOCK_RDM: __socket_type = 4;
pub const __socket_type_SOCK_SEQPACKET: __socket_type = 5;
pub const __socket_type_SOCK_DCCP: __socket_type = 6;
pub const __socket_type_SOCK_PACKET: __socket_type = 10;
pub const __socket_type_SOCK_CLOEXEC: __socket_type = 524288;
pub const __socket_type_SOCK_NONBLOCK: __socket_type = 2048;
pub type __socket_type = ::std::os::raw::c_uint;
pub type sa_family_t = ::std::os::raw::c_ushort;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr {
    pub sa_family: sa_family_t,
    pub sa_data: [::std::os::raw::c_char; 14usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sockaddr"][::std::mem::size_of::<sockaddr>() - 16usize];
    ["Alignment of sockaddr"][::std::mem::align_of::<sockaddr>() - 2usize];
    ["Offset of field: sockaddr::sa_family"][::std::mem::offset_of!(sockaddr, sa_family) - 0usize];
    ["Offset of field: sockaddr::sa_data"][::std::mem::offset_of!(sockaddr, sa_data) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_storage {
    pub ss_family: sa_family_t,
    pub __ss_padding: [::std::os::raw::c_char; 118usize],
    pub __ss_align: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sockaddr_storage"][::std::mem::size_of::<sockaddr_storage>() - 128usize];
    ["Alignment of sockaddr_storage"][::std::mem::align_of::<sockaddr_storage>() - 8usize];
    ["Offset of field: sockaddr_storage::ss_family"]
        [::std::mem::offset_of!(sockaddr_storage, ss_family) - 0usize];
    ["Offset of field: sockaddr_storage::__ss_padding"]
        [::std::mem::offset_of!(sockaddr_storage, __ss_padding) - 2usize];
    ["Offset of field: sockaddr_storage::__ss_align"]
        [::std::mem::offset_of!(sockaddr_storage, __ss_align) - 120usize];
};
pub const MSG_OOB: _bindgen_ty_1 = 1;
pub const MSG_PEEK: _bindgen_ty_1 = 2;
pub const MSG_DONTROUTE: _bindgen_ty_1 = 4;
pub const MSG_CTRUNC: _bindgen_ty_1 = 8;
pub const MSG_PROXY: _bindgen_ty_1 = 16;
pub const MSG_TRUNC: _bindgen_ty_1 = 32;
pub const MSG_DONTWAIT: _bindgen_ty_1 = 64;
pub const MSG_EOR: _bindgen_ty_1 = 128;
pub const MSG_WAITALL: _bindgen_ty_1 = 256;
pub const MSG_FIN: _bindgen_ty_1 = 512;
pub const MSG_SYN: _bindgen_ty_1 = 1024;
pub const MSG_CONFIRM: _bindgen_ty_1 = 2048;
pub const MSG_RST: _bindgen_ty_1 = 4096;
pub const MSG_ERRQUEUE: _bindgen_ty_1 = 8192;
pub const MSG_NOSIGNAL: _bindgen_ty_1 = 16384;
pub const MSG_MORE: _bindgen_ty_1 = 32768;
pub const MSG_WAITFORONE: _bindgen_ty_1 = 65536;
pub const MSG_BATCH: _bindgen_ty_1 = 262144;
pub const MSG_ZEROCOPY: _bindgen_ty_1 = 67108864;
pub const MSG_FASTOPEN: _bindgen_ty_1 = 536870912;
pub const MSG_CMSG_CLOEXEC: _bindgen_ty_1 = 1073741824;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msghdr {
    pub msg_name: *mut ::std::os::raw::c_void,
    pub msg_namelen: socklen_t,
    pub msg_iov: *mut iovec,
    pub msg_iovlen: usize,
    pub msg_control: *mut ::std::os::raw::c_void,
    pub msg_controllen: usize,
    pub msg_flags: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of msghdr"][::std::mem::size_of::<msghdr>() - 56usize];
    ["Alignment of msghdr"][::std::mem::align_of::<msghdr>() - 8usize];
    ["Offset of field: msghdr::msg_name"][::std::mem::offset_of!(msghdr, msg_name) - 0usize];
    ["Offset of field: msghdr::msg_namelen"][::std::mem::offset_of!(msghdr, msg_namelen) - 8usize];
    ["Offset of field: msghdr::msg_iov"][::std::mem::offset_of!(msghdr, msg_iov) - 16usize];
    ["Offset of field: msghdr::msg_iovlen"][::std::mem::offset_of!(msghdr, msg_iovlen) - 24usize];
    ["Offset of field: msghdr::msg_control"][::std::mem::offset_of!(msghdr, msg_control) - 32usize];
    ["Offset of field: msghdr::msg_controllen"]
        [::std::mem::offset_of!(msghdr, msg_controllen) - 40usize];
    ["Offset of field: msghdr::msg_flags"][::std::mem::offset_of!(msghdr, msg_flags) - 48usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct cmsghdr {
    pub cmsg_len: usize,
    pub cmsg_level: ::std::os::raw::c_int,
    pub cmsg_type: ::std::os::raw::c_int,
    pub __cmsg_data: __IncompleteArrayField<::std::os::raw::c_uchar>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cmsghdr"][::std::mem::size_of::<cmsghdr>() - 16usize];
    ["Alignment of cmsghdr"][::std::mem::align_of::<cmsghdr>() - 8usize];
    ["Offset of field: cmsghdr::cmsg_len"][::std::mem::offset_of!(cmsghdr, cmsg_len) - 0usize];
    ["Offset of field: cmsghdr::cmsg_level"][::std::mem::offset_of!(cmsghdr, cmsg_level) - 8usize];
    ["Offset of field: cmsghdr::cmsg_type"][::std::mem::offset_of!(cmsghdr, cmsg_type) - 12usize];
    ["Offset of field: cmsghdr::__cmsg_data"]
        [::std::mem::offset_of!(cmsghdr, __cmsg_data) - 16usize];
};
unsafe extern "C" {
    pub fn __cmsg_nxthdr(__mhdr: *mut msghdr, __cmsg: *mut cmsghdr) -> *mut cmsghdr;
}
pub const SCM_RIGHTS: _bindgen_ty_2 = 1;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct linger {
    pub l_onoff: ::std::os::raw::c_int,
    pub l_linger: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of linger"][::std::mem::size_of::<linger>() - 8usize];
    ["Alignment of linger"][::std::mem::align_of::<linger>() - 4usize];
    ["Offset of field: linger::l_onoff"][::std::mem::offset_of!(linger, l_onoff) - 0usize];
    ["Offset of field: linger::l_linger"][::std::mem::offset_of!(linger, l_linger) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct osockaddr {
    pub sa_family: ::std::os::raw::c_ushort,
    pub sa_data: [::std::os::raw::c_uchar; 14usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of osockaddr"][::std::mem::size_of::<osockaddr>() - 16usize];
    ["Alignment of osockaddr"][::std::mem::align_of::<osockaddr>() - 2usize];
    ["Offset of field: osockaddr::sa_family"]
        [::std::mem::offset_of!(osockaddr, sa_family) - 0usize];
    ["Offset of field: osockaddr::sa_data"][::std::mem::offset_of!(osockaddr, sa_data) - 2usize];
};
pub const SHUT_RD: _bindgen_ty_3 = 0;
pub const SHUT_WR: _bindgen_ty_3 = 1;
pub const SHUT_RDWR: _bindgen_ty_3 = 2;
pub type _bindgen_ty_3 = ::std::os::raw::c_uint;
unsafe extern "C" {
    pub fn socket(
        __domain: ::std::os::raw::c_int,
        __type: ::std::os::raw::c_int,
        __protocol: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn socketpair(
        __domain: ::std::os::raw::c_int,
        __type: ::std::os::raw::c_int,
        __protocol: ::std::os::raw::c_int,
        __fds: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn bind(
        __fd: ::std::os::raw::c_int,
        __addr: *const sockaddr,
        __len: socklen_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getsockname(
        __fd: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __len: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn connect(
        __fd: ::std::os::raw::c_int,
        __addr: *const sockaddr,
        __len: socklen_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getpeername(
        __fd: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __len: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn send(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: usize,
        __flags: ::std::os::raw::c_int,
    ) -> isize;
}
unsafe extern "C" {
    pub fn recv(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __n: usize,
        __flags: ::std::os::raw::c_int,
    ) -> isize;
}
unsafe extern "C" {
    pub fn sendto(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: usize,
        __flags: ::std::os::raw::c_int,
        __addr: *const sockaddr,
        __addr_len: socklen_t,
    ) -> isize;
}
unsafe extern "C" {
    pub fn recvfrom(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __n: usize,
        __flags: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __addr_len: *mut socklen_t,
    ) -> isize;
}
unsafe extern "C" {
    pub fn sendmsg(
        __fd: ::std::os::raw::c_int,
        __message: *const msghdr,
        __flags: ::std::os::raw::c_int,
    ) -> isize;
}
unsafe extern "C" {
    pub fn recvmsg(
        __fd: ::std::os::raw::c_int,
        __message: *mut msghdr,
        __flags: ::std::os::raw::c_int,
    ) -> isize;
}
unsafe extern "C" {
    pub fn getsockopt(
        __fd: ::std::os::raw::c_int,
        __level: ::std::os::raw::c_int,
        __optname: ::std::os::raw::c_int,
        __optval: *mut ::std::os::raw::c_void,
        __optlen: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setsockopt(
        __fd: ::std::os::raw::c_int,
        __level: ::std::os::raw::c_int,
        __optname: ::std::os::raw::c_int,
        __optval: *const ::std::os::raw::c_void,
        __optlen: socklen_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn listen(__fd: ::std::os::raw::c_int, __n: ::std::os::raw::c_int)
    -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn accept(
        __fd: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __addr_len: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn shutdown(
        __fd: ::std::os::raw::c_int,
        __how: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sockatmark(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn isfdtype(
        __fd: ::std::os::raw::c_int,
        __fdtype: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type in_addr_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in_addr {
    pub s_addr: in_addr_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of in_addr"][::std::mem::size_of::<in_addr>() - 4usize];
    ["Alignment of in_addr"][::std::mem::align_of::<in_addr>() - 4usize];
    ["Offset of field: in_addr::s_addr"][::std::mem::offset_of!(in_addr, s_addr) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_opts {
    pub ip_dst: in_addr,
    pub ip_opts: [::std::os::raw::c_char; 40usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ip_opts"][::std::mem::size_of::<ip_opts>() - 44usize];
    ["Alignment of ip_opts"][::std::mem::align_of::<ip_opts>() - 4usize];
    ["Offset of field: ip_opts::ip_dst"][::std::mem::offset_of!(ip_opts, ip_dst) - 0usize];
    ["Offset of field: ip_opts::ip_opts"][::std::mem::offset_of!(ip_opts, ip_opts) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_mreqn {
    pub imr_multiaddr: in_addr,
    pub imr_address: in_addr,
    pub imr_ifindex: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ip_mreqn"][::std::mem::size_of::<ip_mreqn>() - 12usize];
    ["Alignment of ip_mreqn"][::std::mem::align_of::<ip_mreqn>() - 4usize];
    ["Offset of field: ip_mreqn::imr_multiaddr"]
        [::std::mem::offset_of!(ip_mreqn, imr_multiaddr) - 0usize];
    ["Offset of field: ip_mreqn::imr_address"]
        [::std::mem::offset_of!(ip_mreqn, imr_address) - 4usize];
    ["Offset of field: ip_mreqn::imr_ifindex"]
        [::std::mem::offset_of!(ip_mreqn, imr_ifindex) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in_pktinfo {
    pub ipi_ifindex: ::std::os::raw::c_int,
    pub ipi_spec_dst: in_addr,
    pub ipi_addr: in_addr,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of in_pktinfo"][::std::mem::size_of::<in_pktinfo>() - 12usize];
    ["Alignment of in_pktinfo"][::std::mem::align_of::<in_pktinfo>() - 4usize];
    ["Offset of field: in_pktinfo::ipi_ifindex"]
        [::std::mem::offset_of!(in_pktinfo, ipi_ifindex) - 0usize];
    ["Offset of field: in_pktinfo::ipi_spec_dst"]
        [::std::mem::offset_of!(in_pktinfo, ipi_spec_dst) - 4usize];
    ["Offset of field: in_pktinfo::ipi_addr"]
        [::std::mem::offset_of!(in_pktinfo, ipi_addr) - 8usize];
};
pub const IPPROTO_IP: _bindgen_ty_4 = 0;
pub const IPPROTO_ICMP: _bindgen_ty_4 = 1;
pub const IPPROTO_IGMP: _bindgen_ty_4 = 2;
pub const IPPROTO_IPIP: _bindgen_ty_4 = 4;
pub const IPPROTO_TCP: _bindgen_ty_4 = 6;
pub const IPPROTO_EGP: _bindgen_ty_4 = 8;
pub const IPPROTO_PUP: _bindgen_ty_4 = 12;
pub const IPPROTO_UDP: _bindgen_ty_4 = 17;
pub const IPPROTO_IDP: _bindgen_ty_4 = 22;
pub const IPPROTO_TP: _bindgen_ty_4 = 29;
pub const IPPROTO_DCCP: _bindgen_ty_4 = 33;
pub const IPPROTO_IPV6: _bindgen_ty_4 = 41;
pub const IPPROTO_RSVP: _bindgen_ty_4 = 46;
pub const IPPROTO_GRE: _bindgen_ty_4 = 47;
pub const IPPROTO_ESP: _bindgen_ty_4 = 50;
pub const IPPROTO_AH: _bindgen_ty_4 = 51;
pub const IPPROTO_MTP: _bindgen_ty_4 = 92;
pub const IPPROTO_BEETPH: _bindgen_ty_4 = 94;
pub const IPPROTO_ENCAP: _bindgen_ty_4 = 98;
pub const IPPROTO_PIM: _bindgen_ty_4 = 103;
pub const IPPROTO_COMP: _bindgen_ty_4 = 108;
pub const IPPROTO_SCTP: _bindgen_ty_4 = 132;
pub const IPPROTO_UDPLITE: _bindgen_ty_4 = 136;
pub const IPPROTO_MPLS: _bindgen_ty_4 = 137;
pub const IPPROTO_ETHERNET: _bindgen_ty_4 = 143;
pub const IPPROTO_RAW: _bindgen_ty_4 = 255;
pub const IPPROTO_MPTCP: _bindgen_ty_4 = 262;
pub const IPPROTO_MAX: _bindgen_ty_4 = 263;
pub type _bindgen_ty_4 = ::std::os::raw::c_uint;
pub const IPPROTO_HOPOPTS: _bindgen_ty_5 = 0;
pub const IPPROTO_ROUTING: _bindgen_ty_5 = 43;
pub const IPPROTO_FRAGMENT: _bindgen_ty_5 = 44;
pub const IPPROTO_ICMPV6: _bindgen_ty_5 = 58;
pub const IPPROTO_NONE: _bindgen_ty_5 = 59;
pub const IPPROTO_DSTOPTS: _bindgen_ty_5 = 60;
pub const IPPROTO_MH: _bindgen_ty_5 = 135;
pub type _bindgen_ty_5 = ::std::os::raw::c_uint;
pub type in_port_t = u16;
pub const IPPORT_ECHO: _bindgen_ty_6 = 7;
pub const IPPORT_DISCARD: _bindgen_ty_6 = 9;
pub const IPPORT_SYSTAT: _bindgen_ty_6 = 11;
pub const IPPORT_DAYTIME: _bindgen_ty_6 = 13;
pub const IPPORT_NETSTAT: _bindgen_ty_6 = 15;
pub const IPPORT_FTP: _bindgen_ty_6 = 21;
pub const IPPORT_TELNET: _bindgen_ty_6 = 23;
pub const IPPORT_SMTP: _bindgen_ty_6 = 25;
pub const IPPORT_TIMESERVER: _bindgen_ty_6 = 37;
pub const IPPORT_NAMESERVER: _bindgen_ty_6 = 42;
pub const IPPORT_WHOIS: _bindgen_ty_6 = 43;
pub const IPPORT_MTP: _bindgen_ty_6 = 57;
pub const IPPORT_TFTP: _bindgen_ty_6 = 69;
pub const IPPORT_RJE: _bindgen_ty_6 = 77;
pub const IPPORT_FINGER: _bindgen_ty_6 = 79;
pub const IPPORT_TTYLINK: _bindgen_ty_6 = 87;
pub const IPPORT_SUPDUP: _bindgen_ty_6 = 95;
pub const IPPORT_EXECSERVER: _bindgen_ty_6 = 512;
pub const IPPORT_LOGINSERVER: _bindgen_ty_6 = 513;
pub const IPPORT_CMDSERVER: _bindgen_ty_6 = 514;
pub const IPPORT_EFSSERVER: _bindgen_ty_6 = 520;
pub const IPPORT_BIFFUDP: _bindgen_ty_6 = 512;
pub const IPPORT_WHOSERVER: _bindgen_ty_6 = 513;
pub const IPPORT_ROUTESERVER: _bindgen_ty_6 = 520;
pub const IPPORT_RESERVED: _bindgen_ty_6 = 1024;
pub const IPPORT_USERRESERVED: _bindgen_ty_6 = 5000;
pub type _bindgen_ty_6 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct in6_addr {
    pub __in6_u: in6_addr__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union in6_addr__bindgen_ty_1 {
    pub __u6_addr8: [u8; 16usize],
    pub __u6_addr16: [u16; 8usize],
    pub __u6_addr32: [u32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of in6_addr__bindgen_ty_1"][::std::mem::size_of::<in6_addr__bindgen_ty_1>() - 16usize];
    ["Alignment of in6_addr__bindgen_ty_1"]
        [::std::mem::align_of::<in6_addr__bindgen_ty_1>() - 4usize];
    ["Offset of field: in6_addr__bindgen_ty_1::__u6_addr8"]
        [::std::mem::offset_of!(in6_addr__bindgen_ty_1, __u6_addr8) - 0usize];
    ["Offset of field: in6_addr__bindgen_ty_1::__u6_addr16"]
        [::std::mem::offset_of!(in6_addr__bindgen_ty_1, __u6_addr16) - 0usize];
    ["Offset of field: in6_addr__bindgen_ty_1::__u6_addr32"]
        [::std::mem::offset_of!(in6_addr__bindgen_ty_1, __u6_addr32) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of in6_addr"][::std::mem::size_of::<in6_addr>() - 16usize];
    ["Alignment of in6_addr"][::std::mem::align_of::<in6_addr>() - 4usize];
    ["Offset of field: in6_addr::__in6_u"][::std::mem::offset_of!(in6_addr, __in6_u) - 0usize];
};
unsafe extern "C" {
    pub static in6addr_any: in6_addr;
}
unsafe extern "C" {
    pub static in6addr_loopback: in6_addr;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_in {
    pub sin_family: sa_family_t,
    pub sin_port: in_port_t,
    pub sin_addr: in_addr,
    pub sin_zero: [::std::os::raw::c_uchar; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sockaddr_in"][::std::mem::size_of::<sockaddr_in>() - 16usize];
    ["Alignment of sockaddr_in"][::std::mem::align_of::<sockaddr_in>() - 4usize];
    ["Offset of field: sockaddr_in::sin_family"]
        [::std::mem::offset_of!(sockaddr_in, sin_family) - 0usize];
    ["Offset of field: sockaddr_in::sin_port"]
        [::std::mem::offset_of!(sockaddr_in, sin_port) - 2usize];
    ["Offset of field: sockaddr_in::sin_addr"]
        [::std::mem::offset_of!(sockaddr_in, sin_addr) - 4usize];
    ["Offset of field: sockaddr_in::sin_zero"]
        [::std::mem::offset_of!(sockaddr_in, sin_zero) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sockaddr_in6 {
    pub sin6_family: sa_family_t,
    pub sin6_port: in_port_t,
    pub sin6_flowinfo: u32,
    pub sin6_addr: in6_addr,
    pub sin6_scope_id: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sockaddr_in6"][::std::mem::size_of::<sockaddr_in6>() - 28usize];
    ["Alignment of sockaddr_in6"][::std::mem::align_of::<sockaddr_in6>() - 4usize];
    ["Offset of field: sockaddr_in6::sin6_family"]
        [::std::mem::offset_of!(sockaddr_in6, sin6_family) - 0usize];
    ["Offset of field: sockaddr_in6::sin6_port"]
        [::std::mem::offset_of!(sockaddr_in6, sin6_port) - 2usize];
    ["Offset of field: sockaddr_in6::sin6_flowinfo"]
        [::std::mem::offset_of!(sockaddr_in6, sin6_flowinfo) - 4usize];
    ["Offset of field: sockaddr_in6::sin6_addr"]
        [::std::mem::offset_of!(sockaddr_in6, sin6_addr) - 8usize];
    ["Offset of field: sockaddr_in6::sin6_scope_id"]
        [::std::mem::offset_of!(sockaddr_in6, sin6_scope_id) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_mreq {
    pub imr_multiaddr: in_addr,
    pub imr_interface: in_addr,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ip_mreq"][::std::mem::size_of::<ip_mreq>() - 8usize];
    ["Alignment of ip_mreq"][::std::mem::align_of::<ip_mreq>() - 4usize];
    ["Offset of field: ip_mreq::imr_multiaddr"]
        [::std::mem::offset_of!(ip_mreq, imr_multiaddr) - 0usize];
    ["Offset of field: ip_mreq::imr_interface"]
        [::std::mem::offset_of!(ip_mreq, imr_interface) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_mreq_source {
    pub imr_multiaddr: in_addr,
    pub imr_interface: in_addr,
    pub imr_sourceaddr: in_addr,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ip_mreq_source"][::std::mem::size_of::<ip_mreq_source>() - 12usize];
    ["Alignment of ip_mreq_source"][::std::mem::align_of::<ip_mreq_source>() - 4usize];
    ["Offset of field: ip_mreq_source::imr_multiaddr"]
        [::std::mem::offset_of!(ip_mreq_source, imr_multiaddr) - 0usize];
    ["Offset of field: ip_mreq_source::imr_interface"]
        [::std::mem::offset_of!(ip_mreq_source, imr_interface) - 4usize];
    ["Offset of field: ip_mreq_source::imr_sourceaddr"]
        [::std::mem::offset_of!(ip_mreq_source, imr_sourceaddr) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ipv6_mreq {
    pub ipv6mr_multiaddr: in6_addr,
    pub ipv6mr_interface: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ipv6_mreq"][::std::mem::size_of::<ipv6_mreq>() - 20usize];
    ["Alignment of ipv6_mreq"][::std::mem::align_of::<ipv6_mreq>() - 4usize];
    ["Offset of field: ipv6_mreq::ipv6mr_multiaddr"]
        [::std::mem::offset_of!(ipv6_mreq, ipv6mr_multiaddr) - 0usize];
    ["Offset of field: ipv6_mreq::ipv6mr_interface"]
        [::std::mem::offset_of!(ipv6_mreq, ipv6mr_interface) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct group_req {
    pub gr_interface: u32,
    pub gr_group: sockaddr_storage,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of group_req"][::std::mem::size_of::<group_req>() - 136usize];
    ["Alignment of group_req"][::std::mem::align_of::<group_req>() - 8usize];
    ["Offset of field: group_req::gr_interface"]
        [::std::mem::offset_of!(group_req, gr_interface) - 0usize];
    ["Offset of field: group_req::gr_group"][::std::mem::offset_of!(group_req, gr_group) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct group_source_req {
    pub gsr_interface: u32,
    pub gsr_group: sockaddr_storage,
    pub gsr_source: sockaddr_storage,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of group_source_req"][::std::mem::size_of::<group_source_req>() - 264usize];
    ["Alignment of group_source_req"][::std::mem::align_of::<group_source_req>() - 8usize];
    ["Offset of field: group_source_req::gsr_interface"]
        [::std::mem::offset_of!(group_source_req, gsr_interface) - 0usize];
    ["Offset of field: group_source_req::gsr_group"]
        [::std::mem::offset_of!(group_source_req, gsr_group) - 8usize];
    ["Offset of field: group_source_req::gsr_source"]
        [::std::mem::offset_of!(group_source_req, gsr_source) - 136usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_msfilter {
    pub imsf_multiaddr: in_addr,
    pub imsf_interface: in_addr,
    pub imsf_fmode: u32,
    pub imsf_numsrc: u32,
    pub imsf_slist: [in_addr; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ip_msfilter"][::std::mem::size_of::<ip_msfilter>() - 20usize];
    ["Alignment of ip_msfilter"][::std::mem::align_of::<ip_msfilter>() - 4usize];
    ["Offset of field: ip_msfilter::imsf_multiaddr"]
        [::std::mem::offset_of!(ip_msfilter, imsf_multiaddr) - 0usize];
    ["Offset of field: ip_msfilter::imsf_interface"]
        [::std::mem::offset_of!(ip_msfilter, imsf_interface) - 4usize];
    ["Offset of field: ip_msfilter::imsf_fmode"]
        [::std::mem::offset_of!(ip_msfilter, imsf_fmode) - 8usize];
    ["Offset of field: ip_msfilter::imsf_numsrc"]
        [::std::mem::offset_of!(ip_msfilter, imsf_numsrc) - 12usize];
    ["Offset of field: ip_msfilter::imsf_slist"]
        [::std::mem::offset_of!(ip_msfilter, imsf_slist) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct group_filter {
    pub gf_interface: u32,
    pub gf_group: sockaddr_storage,
    pub gf_fmode: u32,
    pub gf_numsrc: u32,
    pub gf_slist: [sockaddr_storage; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of group_filter"][::std::mem::size_of::<group_filter>() - 272usize];
    ["Alignment of group_filter"][::std::mem::align_of::<group_filter>() - 8usize];
    ["Offset of field: group_filter::gf_interface"]
        [::std::mem::offset_of!(group_filter, gf_interface) - 0usize];
    ["Offset of field: group_filter::gf_group"]
        [::std::mem::offset_of!(group_filter, gf_group) - 8usize];
    ["Offset of field: group_filter::gf_fmode"]
        [::std::mem::offset_of!(group_filter, gf_fmode) - 136usize];
    ["Offset of field: group_filter::gf_numsrc"]
        [::std::mem::offset_of!(group_filter, gf_numsrc) - 140usize];
    ["Offset of field: group_filter::gf_slist"]
        [::std::mem::offset_of!(group_filter, gf_slist) - 144usize];
};
unsafe extern "C" {
    pub fn ntohl(__netlong: u32) -> u32;
}
unsafe extern "C" {
    pub fn ntohs(__netshort: u16) -> u16;
}
unsafe extern "C" {
    pub fn htonl(__hostlong: u32) -> u32;
}
unsafe extern "C" {
    pub fn htons(__hostshort: u16) -> u16;
}
unsafe extern "C" {
    pub fn bindresvport(
        __sockfd: ::std::os::raw::c_int,
        __sock_in: *mut sockaddr_in,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn bindresvport6(
        __sockfd: ::std::os::raw::c_int,
        __sock_in: *mut sockaddr_in6,
    ) -> ::std::os::raw::c_int;
}
pub type __gnuc_va_list = __builtin_va_list;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __mbstate_t__bindgen_ty_1"]
        [::std::mem::size_of::<__mbstate_t__bindgen_ty_1>() - 4usize];
    ["Alignment of __mbstate_t__bindgen_ty_1"]
        [::std::mem::align_of::<__mbstate_t__bindgen_ty_1>() - 4usize];
    ["Offset of field: __mbstate_t__bindgen_ty_1::__wch"]
        [::std::mem::offset_of!(__mbstate_t__bindgen_ty_1, __wch) - 0usize];
    ["Offset of field: __mbstate_t__bindgen_ty_1::__wchb"]
        [::std::mem::offset_of!(__mbstate_t__bindgen_ty_1, __wchb) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __mbstate_t"][::std::mem::size_of::<__mbstate_t>() - 8usize];
    ["Alignment of __mbstate_t"][::std::mem::align_of::<__mbstate_t>() - 4usize];
    ["Offset of field: __mbstate_t::__count"]
        [::std::mem::offset_of!(__mbstate_t, __count) - 0usize];
    ["Offset of field: __mbstate_t::__value"]
        [::std::mem::offset_of!(__mbstate_t, __value) - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _G_fpos_t"][::std::mem::size_of::<_G_fpos_t>() - 16usize];
    ["Alignment of _G_fpos_t"][::std::mem::align_of::<_G_fpos_t>() - 8usize];
    ["Offset of field: _G_fpos_t::__pos"][::std::mem::offset_of!(_G_fpos_t, __pos) - 0usize];
    ["Offset of field: _G_fpos_t::__state"][::std::mem::offset_of!(_G_fpos_t, __state) - 8usize];
};
pub type __fpos_t = _G_fpos_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _G_fpos64_t"][::std::mem::size_of::<_G_fpos64_t>() - 16usize];
    ["Alignment of _G_fpos64_t"][::std::mem::align_of::<_G_fpos64_t>() - 8usize];
    ["Offset of field: _G_fpos64_t::__pos"][::std::mem::offset_of!(_G_fpos64_t, __pos) - 0usize];
    ["Offset of field: _G_fpos64_t::__state"]
        [::std::mem::offset_of!(_G_fpos64_t, __state) - 8usize];
};
pub type __fpos64_t = _G_fpos64_t;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub __pad5: usize,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IO_FILE"][::std::mem::size_of::<_IO_FILE>() - 216usize];
    ["Alignment of _IO_FILE"][::std::mem::align_of::<_IO_FILE>() - 8usize];
    ["Offset of field: _IO_FILE::_flags"][::std::mem::offset_of!(_IO_FILE, _flags) - 0usize];
    ["Offset of field: _IO_FILE::_IO_read_ptr"]
        [::std::mem::offset_of!(_IO_FILE, _IO_read_ptr) - 8usize];
    ["Offset of field: _IO_FILE::_IO_read_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_read_end) - 16usize];
    ["Offset of field: _IO_FILE::_IO_read_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_read_base) - 24usize];
    ["Offset of field: _IO_FILE::_IO_write_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_write_base) - 32usize];
    ["Offset of field: _IO_FILE::_IO_write_ptr"]
        [::std::mem::offset_of!(_IO_FILE, _IO_write_ptr) - 40usize];
    ["Offset of field: _IO_FILE::_IO_write_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_write_end) - 48usize];
    ["Offset of field: _IO_FILE::_IO_buf_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_buf_base) - 56usize];
    ["Offset of field: _IO_FILE::_IO_buf_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_buf_end) - 64usize];
    ["Offset of field: _IO_FILE::_IO_save_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_save_base) - 72usize];
    ["Offset of field: _IO_FILE::_IO_backup_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_backup_base) - 80usize];
    ["Offset of field: _IO_FILE::_IO_save_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_save_end) - 88usize];
    ["Offset of field: _IO_FILE::_markers"][::std::mem::offset_of!(_IO_FILE, _markers) - 96usize];
    ["Offset of field: _IO_FILE::_chain"][::std::mem::offset_of!(_IO_FILE, _chain) - 104usize];
    ["Offset of field: _IO_FILE::_fileno"][::std::mem::offset_of!(_IO_FILE, _fileno) - 112usize];
    ["Offset of field: _IO_FILE::_flags2"][::std::mem::offset_of!(_IO_FILE, _flags2) - 116usize];
    ["Offset of field: _IO_FILE::_old_offset"]
        [::std::mem::offset_of!(_IO_FILE, _old_offset) - 120usize];
    ["Offset of field: _IO_FILE::_cur_column"]
        [::std::mem::offset_of!(_IO_FILE, _cur_column) - 128usize];
    ["Offset of field: _IO_FILE::_vtable_offset"]
        [::std::mem::offset_of!(_IO_FILE, _vtable_offset) - 130usize];
    ["Offset of field: _IO_FILE::_shortbuf"]
        [::std::mem::offset_of!(_IO_FILE, _shortbuf) - 131usize];
    ["Offset of field: _IO_FILE::_lock"][::std::mem::offset_of!(_IO_FILE, _lock) - 136usize];
    ["Offset of field: _IO_FILE::_offset"][::std::mem::offset_of!(_IO_FILE, _offset) - 144usize];
    ["Offset of field: _IO_FILE::_codecvt"][::std::mem::offset_of!(_IO_FILE, _codecvt) - 152usize];
    ["Offset of field: _IO_FILE::_wide_data"]
        [::std::mem::offset_of!(_IO_FILE, _wide_data) - 160usize];
    ["Offset of field: _IO_FILE::_freeres_list"]
        [::std::mem::offset_of!(_IO_FILE, _freeres_list) - 168usize];
    ["Offset of field: _IO_FILE::_freeres_buf"]
        [::std::mem::offset_of!(_IO_FILE, _freeres_buf) - 176usize];
    ["Offset of field: _IO_FILE::__pad5"][::std::mem::offset_of!(_IO_FILE, __pad5) - 184usize];
    ["Offset of field: _IO_FILE::_mode"][::std::mem::offset_of!(_IO_FILE, _mode) - 192usize];
    ["Offset of field: _IO_FILE::_unused2"][::std::mem::offset_of!(_IO_FILE, _unused2) - 196usize];
};
pub type va_list = __gnuc_va_list;
pub type fpos_t = __fpos_t;
unsafe extern "C" {
    pub static mut stdin: *mut FILE;
}
unsafe extern "C" {
    pub static mut stdout: *mut FILE;
}
unsafe extern "C" {
    pub static mut stderr: *mut FILE;
}
unsafe extern "C" {
    pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn renameat(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
unsafe extern "C" {
    pub fn tmpnam(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __pfx: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn freopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn fdopen(__fd: ::std::os::raw::c_int, __modes: *const ::std::os::raw::c_char)
    -> *mut FILE;
}
unsafe extern "C" {
    pub fn fmemopen(
        __s: *mut ::std::os::raw::c_void,
        __len: usize,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn open_memstream(
        __bufloc: *mut *mut ::std::os::raw::c_char,
        __sizeloc: *mut usize,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __modes: ::std::os::raw::c_int,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char, __size: usize);
}
unsafe extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
unsafe extern "C" {
    pub fn fprintf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vprintf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vsprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn snprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vsnprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vdprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc99_fscanf"]
    pub fn fscanf1(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc99_scanf"]
    pub fn scanf1(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc99_sscanf"]
    pub fn sscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vsscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc99_vfscanf"]
    pub fn vfscanf1(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc99_vscanf"]
    pub fn vscanf1(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc99_vsscanf"]
    pub fn vsscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
    -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fgets(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
unsafe extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
unsafe extern "C" {
    pub fn getline(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
unsafe extern "C" {
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __s: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
unsafe extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
unsafe extern "C" {
    pub fn fseek(
        __stream: *mut FILE,
        __off: ::std::os::raw::c_long,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
unsafe extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __off: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
unsafe extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
unsafe extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
unsafe extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub static mut sys_nerr: ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub static sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
unsafe extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn popen(
        __command: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
unsafe extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
unsafe extern "C" {
    pub fn __uflow(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __overflow(arg1: *mut FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tm"][::std::mem::size_of::<tm>() - 56usize];
    ["Alignment of tm"][::std::mem::align_of::<tm>() - 8usize];
    ["Offset of field: tm::tm_sec"][::std::mem::offset_of!(tm, tm_sec) - 0usize];
    ["Offset of field: tm::tm_min"][::std::mem::offset_of!(tm, tm_min) - 4usize];
    ["Offset of field: tm::tm_hour"][::std::mem::offset_of!(tm, tm_hour) - 8usize];
    ["Offset of field: tm::tm_mday"][::std::mem::offset_of!(tm, tm_mday) - 12usize];
    ["Offset of field: tm::tm_mon"][::std::mem::offset_of!(tm, tm_mon) - 16usize];
    ["Offset of field: tm::tm_year"][::std::mem::offset_of!(tm, tm_year) - 20usize];
    ["Offset of field: tm::tm_wday"][::std::mem::offset_of!(tm, tm_wday) - 24usize];
    ["Offset of field: tm::tm_yday"][::std::mem::offset_of!(tm, tm_yday) - 28usize];
    ["Offset of field: tm::tm_isdst"][::std::mem::offset_of!(tm, tm_isdst) - 32usize];
    ["Offset of field: tm::tm_gmtoff"][::std::mem::offset_of!(tm, tm_gmtoff) - 40usize];
    ["Offset of field: tm::tm_zone"][::std::mem::offset_of!(tm, tm_zone) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct itimerspec {
    pub it_interval: timespec,
    pub it_value: timespec,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of itimerspec"][::std::mem::size_of::<itimerspec>() - 32usize];
    ["Alignment of itimerspec"][::std::mem::align_of::<itimerspec>() - 8usize];
    ["Offset of field: itimerspec::it_interval"]
        [::std::mem::offset_of!(itimerspec, it_interval) - 0usize];
    ["Offset of field: itimerspec::it_value"]
        [::std::mem::offset_of!(itimerspec, it_value) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigevent {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __locale_struct"][::std::mem::size_of::<__locale_struct>() - 232usize];
    ["Alignment of __locale_struct"][::std::mem::align_of::<__locale_struct>() - 8usize];
    ["Offset of field: __locale_struct::__locales"]
        [::std::mem::offset_of!(__locale_struct, __locales) - 0usize];
    ["Offset of field: __locale_struct::__ctype_b"]
        [::std::mem::offset_of!(__locale_struct, __ctype_b) - 104usize];
    ["Offset of field: __locale_struct::__ctype_tolower"]
        [::std::mem::offset_of!(__locale_struct, __ctype_tolower) - 112usize];
    ["Offset of field: __locale_struct::__ctype_toupper"]
        [::std::mem::offset_of!(__locale_struct, __ctype_toupper) - 120usize];
    ["Offset of field: __locale_struct::__names"]
        [::std::mem::offset_of!(__locale_struct, __names) - 128usize];
};
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
unsafe extern "C" {
    pub fn clock() -> clock_t;
}
unsafe extern "C" {
    pub fn time(__timer: *mut time_t) -> time_t;
}
unsafe extern "C" {
    pub fn difftime(__time1: time_t, __time0: time_t) -> f64;
}
unsafe extern "C" {
    pub fn mktime(__tp: *mut tm) -> time_t;
}
unsafe extern "C" {
    pub fn strftime(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: usize,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
    ) -> usize;
}
unsafe extern "C" {
    pub fn strftime_l(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: usize,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
        __loc: locale_t,
    ) -> usize;
}
unsafe extern "C" {
    pub fn gmtime(__timer: *const time_t) -> *mut tm;
}
unsafe extern "C" {
    pub fn localtime(__timer: *const time_t) -> *mut tm;
}
unsafe extern "C" {
    pub fn gmtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
unsafe extern "C" {
    pub fn localtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
unsafe extern "C" {
    pub fn asctime(__tp: *const tm) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ctime(__timer: *const time_t) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn asctime_r(
        __tp: *const tm,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ctime_r(
        __timer: *const time_t,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub static mut __tzname: [*mut ::std::os::raw::c_char; 2usize];
}
unsafe extern "C" {
    pub static mut __daylight: ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub static mut __timezone: ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub static mut tzname: [*mut ::std::os::raw::c_char; 2usize];
}
unsafe extern "C" {
    pub fn tzset();
}
unsafe extern "C" {
    pub static mut daylight: ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub static mut timezone: ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn stime(__when: *const time_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn timegm(__tp: *mut tm) -> time_t;
}
unsafe extern "C" {
    pub fn timelocal(__tp: *mut tm) -> time_t;
}
unsafe extern "C" {
    pub fn dysize(__year: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn nanosleep(
        __requested_time: *const timespec,
        __remaining: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut timespec) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut timespec) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn clock_settime(__clock_id: clockid_t, __tp: *const timespec) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn clock_nanosleep(
        __clock_id: clockid_t,
        __flags: ::std::os::raw::c_int,
        __req: *const timespec,
        __rem: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn clock_getcpuclockid(__pid: pid_t, __clock_id: *mut clockid_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn timer_create(
        __clock_id: clockid_t,
        __evp: *mut sigevent,
        __timerid: *mut timer_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn timer_delete(__timerid: timer_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn timer_settime(
        __timerid: timer_t,
        __flags: ::std::os::raw::c_int,
        __value: *const itimerspec,
        __ovalue: *mut itimerspec,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn timer_gettime(__timerid: timer_t, __value: *mut itimerspec) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn timer_getoverrun(__timerid: timer_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn timespec_get(
        __ts: *mut timespec,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type useconds_t = __useconds_t;
unsafe extern "C" {
    pub fn access(
        __name: *const ::std::os::raw::c_char,
        __type: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn faccessat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __type: ::std::os::raw::c_int,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lseek(
        __fd: ::std::os::raw::c_int,
        __offset: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> __off_t;
}
unsafe extern "C" {
    pub fn close(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn read(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __nbytes: usize,
    ) -> isize;
}
unsafe extern "C" {
    pub fn write(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> isize;
}
unsafe extern "C" {
    pub fn pread(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __nbytes: usize,
        __offset: __off_t,
    ) -> isize;
}
unsafe extern "C" {
    pub fn pwrite(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: usize,
        __offset: __off_t,
    ) -> isize;
}
unsafe extern "C" {
    pub fn pipe(__pipedes: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn alarm(__seconds: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    pub fn sleep(__seconds: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    pub fn ualarm(__value: __useconds_t, __interval: __useconds_t) -> __useconds_t;
}
unsafe extern "C" {
    pub fn usleep(__useconds: __useconds_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pause() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn chown(
        __file: *const ::std::os::raw::c_char,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fchown(
        __fd: ::std::os::raw::c_int,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lchown(
        __file: *const ::std::os::raw::c_char,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fchownat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __owner: __uid_t,
        __group: __gid_t,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn chdir(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fchdir(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getcwd(__buf: *mut ::std::os::raw::c_char, __size: usize)
    -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn getwd(__buf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn dup(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dup2(__fd: ::std::os::raw::c_int, __fd2: ::std::os::raw::c_int)
    -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub static mut __environ: *mut *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn execve(
        __path: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
        __envp: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fexecve(
        __fd: ::std::os::raw::c_int,
        __argv: *const *mut ::std::os::raw::c_char,
        __envp: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn execv(
        __path: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn execle(
        __path: *const ::std::os::raw::c_char,
        __arg: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn execl(
        __path: *const ::std::os::raw::c_char,
        __arg: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn execvp(
        __file: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn execlp(
        __file: *const ::std::os::raw::c_char,
        __arg: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn nice(__inc: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _exit(__status: ::std::os::raw::c_int) -> !;
}
pub const _PC_LINK_MAX: _bindgen_ty_7 = 0;
pub const _PC_MAX_CANON: _bindgen_ty_7 = 1;
pub const _PC_MAX_INPUT: _bindgen_ty_7 = 2;
pub const _PC_NAME_MAX: _bindgen_ty_7 = 3;
pub const _PC_PATH_MAX: _bindgen_ty_7 = 4;
pub const _PC_PIPE_BUF: _bindgen_ty_7 = 5;
pub const _PC_CHOWN_RESTRICTED: _bindgen_ty_7 = 6;
pub const _PC_NO_TRUNC: _bindgen_ty_7 = 7;
pub const _PC_VDISABLE: _bindgen_ty_7 = 8;
pub const _PC_SYNC_IO: _bindgen_ty_7 = 9;
pub const _PC_ASYNC_IO: _bindgen_ty_7 = 10;
pub const _PC_PRIO_IO: _bindgen_ty_7 = 11;
pub const _PC_SOCK_MAXBUF: _bindgen_ty_7 = 12;
pub const _PC_FILESIZEBITS: _bindgen_ty_7 = 13;
pub const _PC_REC_INCR_XFER_SIZE: _bindgen_ty_7 = 14;
pub const _PC_REC_MAX_XFER_SIZE: _bindgen_ty_7 = 15;
pub const _PC_REC_MIN_XFER_SIZE: _bindgen_ty_7 = 16;
pub const _PC_REC_XFER_ALIGN: _bindgen_ty_7 = 17;
pub const _PC_ALLOC_SIZE_MIN: _bindgen_ty_7 = 18;
pub const _PC_SYMLINK_MAX: _bindgen_ty_7 = 19;
pub const _PC_2_SYMLINKS: _bindgen_ty_7 = 20;
pub type _bindgen_ty_7 = ::std::os::raw::c_uint;
pub const _SC_ARG_MAX: _bindgen_ty_8 = 0;
pub const _SC_CHILD_MAX: _bindgen_ty_8 = 1;
pub const _SC_CLK_TCK: _bindgen_ty_8 = 2;
pub const _SC_NGROUPS_MAX: _bindgen_ty_8 = 3;
pub const _SC_OPEN_MAX: _bindgen_ty_8 = 4;
pub const _SC_STREAM_MAX: _bindgen_ty_8 = 5;
pub const _SC_TZNAME_MAX: _bindgen_ty_8 = 6;
pub const _SC_JOB_CONTROL: _bindgen_ty_8 = 7;
pub const _SC_SAVED_IDS: _bindgen_ty_8 = 8;
pub const _SC_REALTIME_SIGNALS: _bindgen_ty_8 = 9;
pub const _SC_PRIORITY_SCHEDULING: _bindgen_ty_8 = 10;
pub const _SC_TIMERS: _bindgen_ty_8 = 11;
pub const _SC_ASYNCHRONOUS_IO: _bindgen_ty_8 = 12;
pub const _SC_PRIORITIZED_IO: _bindgen_ty_8 = 13;
pub const _SC_SYNCHRONIZED_IO: _bindgen_ty_8 = 14;
pub const _SC_FSYNC: _bindgen_ty_8 = 15;
pub const _SC_MAPPED_FILES: _bindgen_ty_8 = 16;
pub const _SC_MEMLOCK: _bindgen_ty_8 = 17;
pub const _SC_MEMLOCK_RANGE: _bindgen_ty_8 = 18;
pub const _SC_MEMORY_PROTECTION: _bindgen_ty_8 = 19;
pub const _SC_MESSAGE_PASSING: _bindgen_ty_8 = 20;
pub const _SC_SEMAPHORES: _bindgen_ty_8 = 21;
pub const _SC_SHARED_MEMORY_OBJECTS: _bindgen_ty_8 = 22;
pub const _SC_AIO_LISTIO_MAX: _bindgen_ty_8 = 23;
pub const _SC_AIO_MAX: _bindgen_ty_8 = 24;
pub const _SC_AIO_PRIO_DELTA_MAX: _bindgen_ty_8 = 25;
pub const _SC_DELAYTIMER_MAX: _bindgen_ty_8 = 26;
pub const _SC_MQ_OPEN_MAX: _bindgen_ty_8 = 27;
pub const _SC_MQ_PRIO_MAX: _bindgen_ty_8 = 28;
pub const _SC_VERSION: _bindgen_ty_8 = 29;
pub const _SC_PAGESIZE: _bindgen_ty_8 = 30;
pub const _SC_RTSIG_MAX: _bindgen_ty_8 = 31;
pub const _SC_SEM_NSEMS_MAX: _bindgen_ty_8 = 32;
pub const _SC_SEM_VALUE_MAX: _bindgen_ty_8 = 33;
pub const _SC_SIGQUEUE_MAX: _bindgen_ty_8 = 34;
pub const _SC_TIMER_MAX: _bindgen_ty_8 = 35;
pub const _SC_BC_BASE_MAX: _bindgen_ty_8 = 36;
pub const _SC_BC_DIM_MAX: _bindgen_ty_8 = 37;
pub const _SC_BC_SCALE_MAX: _bindgen_ty_8 = 38;
pub const _SC_BC_STRING_MAX: _bindgen_ty_8 = 39;
pub const _SC_COLL_WEIGHTS_MAX: _bindgen_ty_8 = 40;
pub const _SC_EQUIV_CLASS_MAX: _bindgen_ty_8 = 41;
pub const _SC_EXPR_NEST_MAX: _bindgen_ty_8 = 42;
pub const _SC_LINE_MAX: _bindgen_ty_8 = 43;
pub const _SC_RE_DUP_MAX: _bindgen_ty_8 = 44;
pub const _SC_CHARCLASS_NAME_MAX: _bindgen_ty_8 = 45;
pub const _SC_2_VERSION: _bindgen_ty_8 = 46;
pub const _SC_2_C_BIND: _bindgen_ty_8 = 47;
pub const _SC_2_C_DEV: _bindgen_ty_8 = 48;
pub const _SC_2_FORT_DEV: _bindgen_ty_8 = 49;
pub const _SC_2_FORT_RUN: _bindgen_ty_8 = 50;
pub const _SC_2_SW_DEV: _bindgen_ty_8 = 51;
pub const _SC_2_LOCALEDEF: _bindgen_ty_8 = 52;
pub const _SC_PII: _bindgen_ty_8 = 53;
pub const _SC_PII_XTI: _bindgen_ty_8 = 54;
pub const _SC_PII_SOCKET: _bindgen_ty_8 = 55;
pub const _SC_PII_INTERNET: _bindgen_ty_8 = 56;
pub const _SC_PII_OSI: _bindgen_ty_8 = 57;
pub const _SC_POLL: _bindgen_ty_8 = 58;
pub const _SC_SELECT: _bindgen_ty_8 = 59;
pub const _SC_UIO_MAXIOV: _bindgen_ty_8 = 60;
pub const _SC_IOV_MAX: _bindgen_ty_8 = 60;
pub const _SC_PII_INTERNET_STREAM: _bindgen_ty_8 = 61;
pub const _SC_PII_INTERNET_DGRAM: _bindgen_ty_8 = 62;
pub const _SC_PII_OSI_COTS: _bindgen_ty_8 = 63;
pub const _SC_PII_OSI_CLTS: _bindgen_ty_8 = 64;
pub const _SC_PII_OSI_M: _bindgen_ty_8 = 65;
pub const _SC_T_IOV_MAX: _bindgen_ty_8 = 66;
pub const _SC_THREADS: _bindgen_ty_8 = 67;
pub const _SC_THREAD_SAFE_FUNCTIONS: _bindgen_ty_8 = 68;
pub const _SC_GETGR_R_SIZE_MAX: _bindgen_ty_8 = 69;
pub const _SC_GETPW_R_SIZE_MAX: _bindgen_ty_8 = 70;
pub const _SC_LOGIN_NAME_MAX: _bindgen_ty_8 = 71;
pub const _SC_TTY_NAME_MAX: _bindgen_ty_8 = 72;
pub const _SC_THREAD_DESTRUCTOR_ITERATIONS: _bindgen_ty_8 = 73;
pub const _SC_THREAD_KEYS_MAX: _bindgen_ty_8 = 74;
pub const _SC_THREAD_STACK_MIN: _bindgen_ty_8 = 75;
pub const _SC_THREAD_THREADS_MAX: _bindgen_ty_8 = 76;
pub const _SC_THREAD_ATTR_STACKADDR: _bindgen_ty_8 = 77;
pub const _SC_THREAD_ATTR_STACKSIZE: _bindgen_ty_8 = 78;
pub const _SC_THREAD_PRIORITY_SCHEDULING: _bindgen_ty_8 = 79;
pub const _SC_THREAD_PRIO_INHERIT: _bindgen_ty_8 = 80;
pub const _SC_THREAD_PRIO_PROTECT: _bindgen_ty_8 = 81;
pub const _SC_THREAD_PROCESS_SHARED: _bindgen_ty_8 = 82;
pub const _SC_NPROCESSORS_CONF: _bindgen_ty_8 = 83;
pub const _SC_NPROCESSORS_ONLN: _bindgen_ty_8 = 84;
pub const _SC_PHYS_PAGES: _bindgen_ty_8 = 85;
pub const _SC_AVPHYS_PAGES: _bindgen_ty_8 = 86;
pub const _SC_ATEXIT_MAX: _bindgen_ty_8 = 87;
pub const _SC_PASS_MAX: _bindgen_ty_8 = 88;
pub const _SC_XOPEN_VERSION: _bindgen_ty_8 = 89;
pub const _SC_XOPEN_XCU_VERSION: _bindgen_ty_8 = 90;
pub const _SC_XOPEN_UNIX: _bindgen_ty_8 = 91;
pub const _SC_XOPEN_CRYPT: _bindgen_ty_8 = 92;
pub const _SC_XOPEN_ENH_I18N: _bindgen_ty_8 = 93;
pub const _SC_XOPEN_SHM: _bindgen_ty_8 = 94;
pub const _SC_2_CHAR_TERM: _bindgen_ty_8 = 95;
pub const _SC_2_C_VERSION: _bindgen_ty_8 = 96;
pub const _SC_2_UPE: _bindgen_ty_8 = 97;
pub const _SC_XOPEN_XPG2: _bindgen_ty_8 = 98;
pub const _SC_XOPEN_XPG3: _bindgen_ty_8 = 99;
pub const _SC_XOPEN_XPG4: _bindgen_ty_8 = 100;
pub const _SC_CHAR_BIT: _bindgen_ty_8 = 101;
pub const _SC_CHAR_MAX: _bindgen_ty_8 = 102;
pub const _SC_CHAR_MIN: _bindgen_ty_8 = 103;
pub const _SC_INT_MAX: _bindgen_ty_8 = 104;
pub const _SC_INT_MIN: _bindgen_ty_8 = 105;
pub const _SC_LONG_BIT: _bindgen_ty_8 = 106;
pub const _SC_WORD_BIT: _bindgen_ty_8 = 107;
pub const _SC_MB_LEN_MAX: _bindgen_ty_8 = 108;
pub const _SC_NZERO: _bindgen_ty_8 = 109;
pub const _SC_SSIZE_MAX: _bindgen_ty_8 = 110;
pub const _SC_SCHAR_MAX: _bindgen_ty_8 = 111;
pub const _SC_SCHAR_MIN: _bindgen_ty_8 = 112;
pub const _SC_SHRT_MAX: _bindgen_ty_8 = 113;
pub const _SC_SHRT_MIN: _bindgen_ty_8 = 114;
pub const _SC_UCHAR_MAX: _bindgen_ty_8 = 115;
pub const _SC_UINT_MAX: _bindgen_ty_8 = 116;
pub const _SC_ULONG_MAX: _bindgen_ty_8 = 117;
pub const _SC_USHRT_MAX: _bindgen_ty_8 = 118;
pub const _SC_NL_ARGMAX: _bindgen_ty_8 = 119;
pub const _SC_NL_LANGMAX: _bindgen_ty_8 = 120;
pub const _SC_NL_MSGMAX: _bindgen_ty_8 = 121;
pub const _SC_NL_NMAX: _bindgen_ty_8 = 122;
pub const _SC_NL_SETMAX: _bindgen_ty_8 = 123;
pub const _SC_NL_TEXTMAX: _bindgen_ty_8 = 124;
pub const _SC_XBS5_ILP32_OFF32: _bindgen_ty_8 = 125;
pub const _SC_XBS5_ILP32_OFFBIG: _bindgen_ty_8 = 126;
pub const _SC_XBS5_LP64_OFF64: _bindgen_ty_8 = 127;
pub const _SC_XBS5_LPBIG_OFFBIG: _bindgen_ty_8 = 128;
pub const _SC_XOPEN_LEGACY: _bindgen_ty_8 = 129;
pub const _SC_XOPEN_REALTIME: _bindgen_ty_8 = 130;
pub const _SC_XOPEN_REALTIME_THREADS: _bindgen_ty_8 = 131;
pub const _SC_ADVISORY_INFO: _bindgen_ty_8 = 132;
pub const _SC_BARRIERS: _bindgen_ty_8 = 133;
pub const _SC_BASE: _bindgen_ty_8 = 134;
pub const _SC_C_LANG_SUPPORT: _bindgen_ty_8 = 135;
pub const _SC_C_LANG_SUPPORT_R: _bindgen_ty_8 = 136;
pub const _SC_CLOCK_SELECTION: _bindgen_ty_8 = 137;
pub const _SC_CPUTIME: _bindgen_ty_8 = 138;
pub const _SC_THREAD_CPUTIME: _bindgen_ty_8 = 139;
pub const _SC_DEVICE_IO: _bindgen_ty_8 = 140;
pub const _SC_DEVICE_SPECIFIC: _bindgen_ty_8 = 141;
pub const _SC_DEVICE_SPECIFIC_R: _bindgen_ty_8 = 142;
pub const _SC_FD_MGMT: _bindgen_ty_8 = 143;
pub const _SC_FIFO: _bindgen_ty_8 = 144;
pub const _SC_PIPE: _bindgen_ty_8 = 145;
pub const _SC_FILE_ATTRIBUTES: _bindgen_ty_8 = 146;
pub const _SC_FILE_LOCKING: _bindgen_ty_8 = 147;
pub const _SC_FILE_SYSTEM: _bindgen_ty_8 = 148;
pub const _SC_MONOTONIC_CLOCK: _bindgen_ty_8 = 149;
pub const _SC_MULTI_PROCESS: _bindgen_ty_8 = 150;
pub const _SC_SINGLE_PROCESS: _bindgen_ty_8 = 151;
pub const _SC_NETWORKING: _bindgen_ty_8 = 152;
pub const _SC_READER_WRITER_LOCKS: _bindgen_ty_8 = 153;
pub const _SC_SPIN_LOCKS: _bindgen_ty_8 = 154;
pub const _SC_REGEXP: _bindgen_ty_8 = 155;
pub const _SC_REGEX_VERSION: _bindgen_ty_8 = 156;
pub const _SC_SHELL: _bindgen_ty_8 = 157;
pub const _SC_SIGNALS: _bindgen_ty_8 = 158;
pub const _SC_SPAWN: _bindgen_ty_8 = 159;
pub const _SC_SPORADIC_SERVER: _bindgen_ty_8 = 160;
pub const _SC_THREAD_SPORADIC_SERVER: _bindgen_ty_8 = 161;
pub const _SC_SYSTEM_DATABASE: _bindgen_ty_8 = 162;
pub const _SC_SYSTEM_DATABASE_R: _bindgen_ty_8 = 163;
pub const _SC_TIMEOUTS: _bindgen_ty_8 = 164;
pub const _SC_TYPED_MEMORY_OBJECTS: _bindgen_ty_8 = 165;
pub const _SC_USER_GROUPS: _bindgen_ty_8 = 166;
pub const _SC_USER_GROUPS_R: _bindgen_ty_8 = 167;
pub const _SC_2_PBS: _bindgen_ty_8 = 168;
pub const _SC_2_PBS_ACCOUNTING: _bindgen_ty_8 = 169;
pub const _SC_2_PBS_LOCATE: _bindgen_ty_8 = 170;
pub const _SC_2_PBS_MESSAGE: _bindgen_ty_8 = 171;
pub const _SC_2_PBS_TRACK: _bindgen_ty_8 = 172;
pub const _SC_SYMLOOP_MAX: _bindgen_ty_8 = 173;
pub const _SC_STREAMS: _bindgen_ty_8 = 174;
pub const _SC_2_PBS_CHECKPOINT: _bindgen_ty_8 = 175;
pub const _SC_V6_ILP32_OFF32: _bindgen_ty_8 = 176;
pub const _SC_V6_ILP32_OFFBIG: _bindgen_ty_8 = 177;
pub const _SC_V6_LP64_OFF64: _bindgen_ty_8 = 178;
pub const _SC_V6_LPBIG_OFFBIG: _bindgen_ty_8 = 179;
pub const _SC_HOST_NAME_MAX: _bindgen_ty_8 = 180;
pub const _SC_TRACE: _bindgen_ty_8 = 181;
pub const _SC_TRACE_EVENT_FILTER: _bindgen_ty_8 = 182;
pub const _SC_TRACE_INHERIT: _bindgen_ty_8 = 183;
pub const _SC_TRACE_LOG: _bindgen_ty_8 = 184;
pub const _SC_LEVEL1_ICACHE_SIZE: _bindgen_ty_8 = 185;
pub const _SC_LEVEL1_ICACHE_ASSOC: _bindgen_ty_8 = 186;
pub const _SC_LEVEL1_ICACHE_LINESIZE: _bindgen_ty_8 = 187;
pub const _SC_LEVEL1_DCACHE_SIZE: _bindgen_ty_8 = 188;
pub const _SC_LEVEL1_DCACHE_ASSOC: _bindgen_ty_8 = 189;
pub const _SC_LEVEL1_DCACHE_LINESIZE: _bindgen_ty_8 = 190;
pub const _SC_LEVEL2_CACHE_SIZE: _bindgen_ty_8 = 191;
pub const _SC_LEVEL2_CACHE_ASSOC: _bindgen_ty_8 = 192;
pub const _SC_LEVEL2_CACHE_LINESIZE: _bindgen_ty_8 = 193;
pub const _SC_LEVEL3_CACHE_SIZE: _bindgen_ty_8 = 194;
pub const _SC_LEVEL3_CACHE_ASSOC: _bindgen_ty_8 = 195;
pub const _SC_LEVEL3_CACHE_LINESIZE: _bindgen_ty_8 = 196;
pub const _SC_LEVEL4_CACHE_SIZE: _bindgen_ty_8 = 197;
pub const _SC_LEVEL4_CACHE_ASSOC: _bindgen_ty_8 = 198;
pub const _SC_LEVEL4_CACHE_LINESIZE: _bindgen_ty_8 = 199;
pub const _SC_IPV6: _bindgen_ty_8 = 235;
pub const _SC_RAW_SOCKETS: _bindgen_ty_8 = 236;
pub const _SC_V7_ILP32_OFF32: _bindgen_ty_8 = 237;
pub const _SC_V7_ILP32_OFFBIG: _bindgen_ty_8 = 238;
pub const _SC_V7_LP64_OFF64: _bindgen_ty_8 = 239;
pub const _SC_V7_LPBIG_OFFBIG: _bindgen_ty_8 = 240;
pub const _SC_SS_REPL_MAX: _bindgen_ty_8 = 241;
pub const _SC_TRACE_EVENT_NAME_MAX: _bindgen_ty_8 = 242;
pub const _SC_TRACE_NAME_MAX: _bindgen_ty_8 = 243;
pub const _SC_TRACE_SYS_MAX: _bindgen_ty_8 = 244;
pub const _SC_TRACE_USER_EVENT_MAX: _bindgen_ty_8 = 245;
pub const _SC_XOPEN_STREAMS: _bindgen_ty_8 = 246;
pub const _SC_THREAD_ROBUST_PRIO_INHERIT: _bindgen_ty_8 = 247;
pub const _SC_THREAD_ROBUST_PRIO_PROTECT: _bindgen_ty_8 = 248;
pub type _bindgen_ty_8 = ::std::os::raw::c_uint;
pub const _CS_PATH: _bindgen_ty_9 = 0;
pub const _CS_V6_WIDTH_RESTRICTED_ENVS: _bindgen_ty_9 = 1;
pub const _CS_GNU_LIBC_VERSION: _bindgen_ty_9 = 2;
pub const _CS_GNU_LIBPTHREAD_VERSION: _bindgen_ty_9 = 3;
pub const _CS_V5_WIDTH_RESTRICTED_ENVS: _bindgen_ty_9 = 4;
pub const _CS_V7_WIDTH_RESTRICTED_ENVS: _bindgen_ty_9 = 5;
pub const _CS_LFS_CFLAGS: _bindgen_ty_9 = 1000;
pub const _CS_LFS_LDFLAGS: _bindgen_ty_9 = 1001;
pub const _CS_LFS_LIBS: _bindgen_ty_9 = 1002;
pub const _CS_LFS_LINTFLAGS: _bindgen_ty_9 = 1003;
pub const _CS_LFS64_CFLAGS: _bindgen_ty_9 = 1004;
pub const _CS_LFS64_LDFLAGS: _bindgen_ty_9 = 1005;
pub const _CS_LFS64_LIBS: _bindgen_ty_9 = 1006;
pub const _CS_LFS64_LINTFLAGS: _bindgen_ty_9 = 1007;
pub const _CS_XBS5_ILP32_OFF32_CFLAGS: _bindgen_ty_9 = 1100;
pub const _CS_XBS5_ILP32_OFF32_LDFLAGS: _bindgen_ty_9 = 1101;
pub const _CS_XBS5_ILP32_OFF32_LIBS: _bindgen_ty_9 = 1102;
pub const _CS_XBS5_ILP32_OFF32_LINTFLAGS: _bindgen_ty_9 = 1103;
pub const _CS_XBS5_ILP32_OFFBIG_CFLAGS: _bindgen_ty_9 = 1104;
pub const _CS_XBS5_ILP32_OFFBIG_LDFLAGS: _bindgen_ty_9 = 1105;
pub const _CS_XBS5_ILP32_OFFBIG_LIBS: _bindgen_ty_9 = 1106;
pub const _CS_XBS5_ILP32_OFFBIG_LINTFLAGS: _bindgen_ty_9 = 1107;
pub const _CS_XBS5_LP64_OFF64_CFLAGS: _bindgen_ty_9 = 1108;
pub const _CS_XBS5_LP64_OFF64_LDFLAGS: _bindgen_ty_9 = 1109;
pub const _CS_XBS5_LP64_OFF64_LIBS: _bindgen_ty_9 = 1110;
pub const _CS_XBS5_LP64_OFF64_LINTFLAGS: _bindgen_ty_9 = 1111;
pub const _CS_XBS5_LPBIG_OFFBIG_CFLAGS: _bindgen_ty_9 = 1112;
pub const _CS_XBS5_LPBIG_OFFBIG_LDFLAGS: _bindgen_ty_9 = 1113;
pub const _CS_XBS5_LPBIG_OFFBIG_LIBS: _bindgen_ty_9 = 1114;
pub const _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS: _bindgen_ty_9 = 1115;
pub const _CS_POSIX_V6_ILP32_OFF32_CFLAGS: _bindgen_ty_9 = 1116;
pub const _CS_POSIX_V6_ILP32_OFF32_LDFLAGS: _bindgen_ty_9 = 1117;
pub const _CS_POSIX_V6_ILP32_OFF32_LIBS: _bindgen_ty_9 = 1118;
pub const _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS: _bindgen_ty_9 = 1119;
pub const _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS: _bindgen_ty_9 = 1120;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS: _bindgen_ty_9 = 1121;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LIBS: _bindgen_ty_9 = 1122;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS: _bindgen_ty_9 = 1123;
pub const _CS_POSIX_V6_LP64_OFF64_CFLAGS: _bindgen_ty_9 = 1124;
pub const _CS_POSIX_V6_LP64_OFF64_LDFLAGS: _bindgen_ty_9 = 1125;
pub const _CS_POSIX_V6_LP64_OFF64_LIBS: _bindgen_ty_9 = 1126;
pub const _CS_POSIX_V6_LP64_OFF64_LINTFLAGS: _bindgen_ty_9 = 1127;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS: _bindgen_ty_9 = 1128;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS: _bindgen_ty_9 = 1129;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LIBS: _bindgen_ty_9 = 1130;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS: _bindgen_ty_9 = 1131;
pub const _CS_POSIX_V7_ILP32_OFF32_CFLAGS: _bindgen_ty_9 = 1132;
pub const _CS_POSIX_V7_ILP32_OFF32_LDFLAGS: _bindgen_ty_9 = 1133;
pub const _CS_POSIX_V7_ILP32_OFF32_LIBS: _bindgen_ty_9 = 1134;
pub const _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS: _bindgen_ty_9 = 1135;
pub const _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS: _bindgen_ty_9 = 1136;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS: _bindgen_ty_9 = 1137;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LIBS: _bindgen_ty_9 = 1138;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS: _bindgen_ty_9 = 1139;
pub const _CS_POSIX_V7_LP64_OFF64_CFLAGS: _bindgen_ty_9 = 1140;
pub const _CS_POSIX_V7_LP64_OFF64_LDFLAGS: _bindgen_ty_9 = 1141;
pub const _CS_POSIX_V7_LP64_OFF64_LIBS: _bindgen_ty_9 = 1142;
pub const _CS_POSIX_V7_LP64_OFF64_LINTFLAGS: _bindgen_ty_9 = 1143;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS: _bindgen_ty_9 = 1144;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS: _bindgen_ty_9 = 1145;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LIBS: _bindgen_ty_9 = 1146;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS: _bindgen_ty_9 = 1147;
pub const _CS_V6_ENV: _bindgen_ty_9 = 1148;
pub const _CS_V7_ENV: _bindgen_ty_9 = 1149;
pub type _bindgen_ty_9 = ::std::os::raw::c_uint;
unsafe extern "C" {
    pub fn pathconf(
        __path: *const ::std::os::raw::c_char,
        __name: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn fpathconf(
        __fd: ::std::os::raw::c_int,
        __name: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn sysconf(__name: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn confstr(
        __name: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> usize;
}
unsafe extern "C" {
    pub fn getpid() -> __pid_t;
}
unsafe extern "C" {
    pub fn getppid() -> __pid_t;
}
unsafe extern "C" {
    pub fn getpgrp() -> __pid_t;
}
unsafe extern "C" {
    pub fn __getpgid(__pid: __pid_t) -> __pid_t;
}
unsafe extern "C" {
    pub fn getpgid(__pid: __pid_t) -> __pid_t;
}
unsafe extern "C" {
    pub fn setpgid(__pid: __pid_t, __pgid: __pid_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setpgrp() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setsid() -> __pid_t;
}
unsafe extern "C" {
    pub fn getsid(__pid: __pid_t) -> __pid_t;
}
unsafe extern "C" {
    pub fn getuid() -> __uid_t;
}
unsafe extern "C" {
    pub fn geteuid() -> __uid_t;
}
unsafe extern "C" {
    pub fn getgid() -> __gid_t;
}
unsafe extern "C" {
    pub fn getegid() -> __gid_t;
}
unsafe extern "C" {
    pub fn getgroups(__size: ::std::os::raw::c_int, __list: *mut __gid_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setuid(__uid: __uid_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setreuid(__ruid: __uid_t, __euid: __uid_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn seteuid(__uid: __uid_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setgid(__gid: __gid_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setregid(__rgid: __gid_t, __egid: __gid_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setegid(__gid: __gid_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fork() -> __pid_t;
}
unsafe extern "C" {
    pub fn vfork() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ttyname(__fd: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ttyname_r(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn isatty(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ttyslot() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn link(
        __from: *const ::std::os::raw::c_char,
        __to: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn linkat(
        __fromfd: ::std::os::raw::c_int,
        __from: *const ::std::os::raw::c_char,
        __tofd: ::std::os::raw::c_int,
        __to: *const ::std::os::raw::c_char,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn symlink(
        __from: *const ::std::os::raw::c_char,
        __to: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn readlink(
        __path: *const ::std::os::raw::c_char,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> isize;
}
unsafe extern "C" {
    pub fn symlinkat(
        __from: *const ::std::os::raw::c_char,
        __tofd: ::std::os::raw::c_int,
        __to: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn readlinkat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> isize;
}
unsafe extern "C" {
    pub fn unlink(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn unlinkat(
        __fd: ::std::os::raw::c_int,
        __name: *const ::std::os::raw::c_char,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn rmdir(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn tcgetpgrp(__fd: ::std::os::raw::c_int) -> __pid_t;
}
unsafe extern "C" {
    pub fn tcsetpgrp(__fd: ::std::os::raw::c_int, __pgrp_id: __pid_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getlogin() -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn getlogin_r(
        __name: *mut ::std::os::raw::c_char,
        __name_len: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setlogin(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub static mut optarg: *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub static mut optind: ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub static mut opterr: ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub static mut optopt: ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getopt(
        ___argc: ::std::os::raw::c_int,
        ___argv: *const *mut ::std::os::raw::c_char,
        __shortopts: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn gethostname(__name: *mut ::std::os::raw::c_char, __len: usize) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sethostname(
        __name: *const ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sethostid(__id: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getdomainname(
        __name: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setdomainname(
        __name: *const ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vhangup() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn revoke(__file: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn profil(
        __sample_buffer: *mut ::std::os::raw::c_ushort,
        __size: usize,
        __offset: usize,
        __scale: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn acct(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getusershell() -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn endusershell();
}
unsafe extern "C" {
    pub fn setusershell();
}
unsafe extern "C" {
    pub fn daemon(
        __nochdir: ::std::os::raw::c_int,
        __noclose: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn chroot(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getpass(__prompt: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn fsync(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn gethostid() -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn sync();
}
unsafe extern "C" {
    pub fn getpagesize() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getdtablesize() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn truncate(
        __file: *const ::std::os::raw::c_char,
        __length: __off_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ftruncate(__fd: ::std::os::raw::c_int, __length: __off_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn brk(__addr: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sbrk(__delta: isize) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn syscall(__sysno: ::std::os::raw::c_long, ...) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn lockf(
        __fd: ::std::os::raw::c_int,
        __cmd: ::std::os::raw::c_int,
        __len: __off_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fdatasync(__fildes: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn crypt(
        __key: *const ::std::os::raw::c_char,
        __salt: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn getentropy(
        __buffer: *mut ::std::os::raw::c_void,
        __length: usize,
    ) -> ::std::os::raw::c_int;
}
pub type sluid_t = u64;
pub type slurm_addr_t = sockaddr_storage;
pub type slurmdb_cluster_rec_t = slurmdb_cluster_rec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct job_resources {
    _unused: [u8; 0],
}
pub type job_resources_t = job_resources;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct select_jobinfo {
    _unused: [u8; 0],
}
pub type select_jobinfo_t = select_jobinfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct select_nodeinfo {
    _unused: [u8; 0],
}
pub type select_nodeinfo_t = select_nodeinfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jobacctinfo {
    _unused: [u8; 0],
}
pub type jobacctinfo_t = jobacctinfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct allocation_msg_thread {
    _unused: [u8; 0],
}
pub type allocation_msg_thread_t = allocation_msg_thread;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sbcast_cred {
    _unused: [u8; 0],
}
pub type sbcast_cred_t = sbcast_cred;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct slurm_hash_t {
    pub type_: ::std::os::raw::c_uchar,
    pub hash: [::std::os::raw::c_uchar; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of slurm_hash_t"][::std::mem::size_of::<slurm_hash_t>() - 33usize];
    ["Alignment of slurm_hash_t"][::std::mem::align_of::<slurm_hash_t>() - 1usize];
    ["Offset of field: slurm_hash_t::type_"][::std::mem::offset_of!(slurm_hash_t, type_) - 0usize];
    ["Offset of field: slurm_hash_t::hash"][::std::mem::offset_of!(slurm_hash_t, hash) - 1usize];
};
pub const job_states_JOB_PENDING: job_states = 0;
pub const job_states_JOB_RUNNING: job_states = 1;
pub const job_states_JOB_SUSPENDED: job_states = 2;
pub const job_states_JOB_COMPLETE: job_states = 3;
pub const job_states_JOB_CANCELLED: job_states = 4;
pub const job_states_JOB_FAILED: job_states = 5;
pub const job_states_JOB_TIMEOUT: job_states = 6;
pub const job_states_JOB_NODE_FAIL: job_states = 7;
pub const job_states_JOB_PREEMPTED: job_states = 8;
pub const job_states_JOB_BOOT_FAIL: job_states = 9;
pub const job_states_JOB_DEADLINE: job_states = 10;
pub const job_states_JOB_OOM: job_states = 11;
pub const job_states_JOB_END: job_states = 12;
pub type job_states = ::std::os::raw::c_uint;
pub const job_state_reason_WAIT_NO_REASON: job_state_reason = 0;
pub const job_state_reason_WAIT_PRIORITY: job_state_reason = 1;
pub const job_state_reason_WAIT_DEPENDENCY: job_state_reason = 2;
pub const job_state_reason_WAIT_RESOURCES: job_state_reason = 3;
pub const job_state_reason_WAIT_PART_NODE_LIMIT: job_state_reason = 4;
pub const job_state_reason_WAIT_PART_TIME_LIMIT: job_state_reason = 5;
pub const job_state_reason_WAIT_PART_DOWN: job_state_reason = 6;
pub const job_state_reason_WAIT_PART_INACTIVE: job_state_reason = 7;
pub const job_state_reason_WAIT_HELD: job_state_reason = 8;
pub const job_state_reason_WAIT_TIME: job_state_reason = 9;
pub const job_state_reason_WAIT_LICENSES: job_state_reason = 10;
pub const job_state_reason_WAIT_ASSOC_JOB_LIMIT: job_state_reason = 11;
pub const job_state_reason_WAIT_ASSOC_RESOURCE_LIMIT: job_state_reason = 12;
pub const job_state_reason_WAIT_ASSOC_TIME_LIMIT: job_state_reason = 13;
pub const job_state_reason_WAIT_RESERVATION: job_state_reason = 14;
pub const job_state_reason_WAIT_NODE_NOT_AVAIL: job_state_reason = 15;
pub const job_state_reason_WAIT_HELD_USER: job_state_reason = 16;
pub const job_state_reason_WAIT_FRONT_END: job_state_reason = 17;
pub const job_state_reason_FAIL_DEFER: job_state_reason = 18;
pub const job_state_reason_FAIL_DOWN_PARTITION: job_state_reason = 19;
pub const job_state_reason_FAIL_DOWN_NODE: job_state_reason = 20;
pub const job_state_reason_FAIL_BAD_CONSTRAINTS: job_state_reason = 21;
pub const job_state_reason_FAIL_SYSTEM: job_state_reason = 22;
pub const job_state_reason_FAIL_LAUNCH: job_state_reason = 23;
pub const job_state_reason_FAIL_EXIT_CODE: job_state_reason = 24;
pub const job_state_reason_FAIL_TIMEOUT: job_state_reason = 25;
pub const job_state_reason_FAIL_INACTIVE_LIMIT: job_state_reason = 26;
pub const job_state_reason_FAIL_ACCOUNT: job_state_reason = 27;
pub const job_state_reason_FAIL_QOS: job_state_reason = 28;
pub const job_state_reason_WAIT_QOS_THRES: job_state_reason = 29;
pub const job_state_reason_WAIT_QOS_JOB_LIMIT: job_state_reason = 30;
pub const job_state_reason_WAIT_QOS_RESOURCE_LIMIT: job_state_reason = 31;
pub const job_state_reason_WAIT_QOS_TIME_LIMIT: job_state_reason = 32;
pub const job_state_reason_FAIL_SIGNAL: job_state_reason = 33;
pub const job_state_reason_DEFUNCT_WAIT_34: job_state_reason = 34;
pub const job_state_reason_WAIT_CLEANING: job_state_reason = 35;
pub const job_state_reason_WAIT_PROLOG: job_state_reason = 36;
pub const job_state_reason_WAIT_QOS: job_state_reason = 37;
pub const job_state_reason_WAIT_ACCOUNT: job_state_reason = 38;
pub const job_state_reason_WAIT_DEP_INVALID: job_state_reason = 39;
pub const job_state_reason_WAIT_QOS_GRP_CPU: job_state_reason = 40;
pub const job_state_reason_WAIT_QOS_GRP_CPU_MIN: job_state_reason = 41;
pub const job_state_reason_WAIT_QOS_GRP_CPU_RUN_MIN: job_state_reason = 42;
pub const job_state_reason_WAIT_QOS_GRP_JOB: job_state_reason = 43;
pub const job_state_reason_WAIT_QOS_GRP_MEM: job_state_reason = 44;
pub const job_state_reason_WAIT_QOS_GRP_NODE: job_state_reason = 45;
pub const job_state_reason_WAIT_QOS_GRP_SUB_JOB: job_state_reason = 46;
pub const job_state_reason_WAIT_QOS_GRP_WALL: job_state_reason = 47;
pub const job_state_reason_WAIT_QOS_MAX_CPU_PER_JOB: job_state_reason = 48;
pub const job_state_reason_WAIT_QOS_MAX_CPU_MINS_PER_JOB: job_state_reason = 49;
pub const job_state_reason_WAIT_QOS_MAX_NODE_PER_JOB: job_state_reason = 50;
pub const job_state_reason_WAIT_QOS_MAX_WALL_PER_JOB: job_state_reason = 51;
pub const job_state_reason_WAIT_QOS_MAX_CPU_PER_USER: job_state_reason = 52;
pub const job_state_reason_WAIT_QOS_MAX_JOB_PER_USER: job_state_reason = 53;
pub const job_state_reason_WAIT_QOS_MAX_NODE_PER_USER: job_state_reason = 54;
pub const job_state_reason_WAIT_QOS_MAX_SUB_JOB: job_state_reason = 55;
pub const job_state_reason_WAIT_QOS_MIN_CPU: job_state_reason = 56;
pub const job_state_reason_WAIT_ASSOC_GRP_CPU: job_state_reason = 57;
pub const job_state_reason_WAIT_ASSOC_GRP_CPU_MIN: job_state_reason = 58;
pub const job_state_reason_WAIT_ASSOC_GRP_CPU_RUN_MIN: job_state_reason = 59;
pub const job_state_reason_WAIT_ASSOC_GRP_JOB: job_state_reason = 60;
pub const job_state_reason_WAIT_ASSOC_GRP_MEM: job_state_reason = 61;
pub const job_state_reason_WAIT_ASSOC_GRP_NODE: job_state_reason = 62;
pub const job_state_reason_WAIT_ASSOC_GRP_SUB_JOB: job_state_reason = 63;
pub const job_state_reason_WAIT_ASSOC_GRP_WALL: job_state_reason = 64;
pub const job_state_reason_WAIT_ASSOC_MAX_JOBS: job_state_reason = 65;
pub const job_state_reason_WAIT_ASSOC_MAX_CPU_PER_JOB: job_state_reason = 66;
pub const job_state_reason_WAIT_ASSOC_MAX_CPU_MINS_PER_JOB: job_state_reason = 67;
pub const job_state_reason_WAIT_ASSOC_MAX_NODE_PER_JOB: job_state_reason = 68;
pub const job_state_reason_WAIT_ASSOC_MAX_WALL_PER_JOB: job_state_reason = 69;
pub const job_state_reason_WAIT_ASSOC_MAX_SUB_JOB: job_state_reason = 70;
pub const job_state_reason_WAIT_MAX_REQUEUE: job_state_reason = 71;
pub const job_state_reason_WAIT_ARRAY_TASK_LIMIT: job_state_reason = 72;
pub const job_state_reason_WAIT_BURST_BUFFER_RESOURCE: job_state_reason = 73;
pub const job_state_reason_WAIT_BURST_BUFFER_STAGING: job_state_reason = 74;
pub const job_state_reason_FAIL_BURST_BUFFER_OP: job_state_reason = 75;
pub const job_state_reason_DEFUNCT_WAIT_76: job_state_reason = 76;
pub const job_state_reason_DEFUNCT_WAIT_77: job_state_reason = 77;
pub const job_state_reason_WAIT_ASSOC_GRP_UNK: job_state_reason = 78;
pub const job_state_reason_WAIT_ASSOC_GRP_UNK_MIN: job_state_reason = 79;
pub const job_state_reason_WAIT_ASSOC_GRP_UNK_RUN_MIN: job_state_reason = 80;
pub const job_state_reason_WAIT_ASSOC_MAX_UNK_PER_JOB: job_state_reason = 81;
pub const job_state_reason_WAIT_ASSOC_MAX_UNK_PER_NODE: job_state_reason = 82;
pub const job_state_reason_WAIT_ASSOC_MAX_UNK_MINS_PER_JOB: job_state_reason = 83;
pub const job_state_reason_WAIT_ASSOC_MAX_CPU_PER_NODE: job_state_reason = 84;
pub const job_state_reason_WAIT_ASSOC_GRP_MEM_MIN: job_state_reason = 85;
pub const job_state_reason_WAIT_ASSOC_GRP_MEM_RUN_MIN: job_state_reason = 86;
pub const job_state_reason_WAIT_ASSOC_MAX_MEM_PER_JOB: job_state_reason = 87;
pub const job_state_reason_WAIT_ASSOC_MAX_MEM_PER_NODE: job_state_reason = 88;
pub const job_state_reason_WAIT_ASSOC_MAX_MEM_MINS_PER_JOB: job_state_reason = 89;
pub const job_state_reason_WAIT_ASSOC_GRP_NODE_MIN: job_state_reason = 90;
pub const job_state_reason_WAIT_ASSOC_GRP_NODE_RUN_MIN: job_state_reason = 91;
pub const job_state_reason_WAIT_ASSOC_MAX_NODE_MINS_PER_JOB: job_state_reason = 92;
pub const job_state_reason_WAIT_ASSOC_GRP_ENERGY: job_state_reason = 93;
pub const job_state_reason_WAIT_ASSOC_GRP_ENERGY_MIN: job_state_reason = 94;
pub const job_state_reason_WAIT_ASSOC_GRP_ENERGY_RUN_MIN: job_state_reason = 95;
pub const job_state_reason_WAIT_ASSOC_MAX_ENERGY_PER_JOB: job_state_reason = 96;
pub const job_state_reason_WAIT_ASSOC_MAX_ENERGY_PER_NODE: job_state_reason = 97;
pub const job_state_reason_WAIT_ASSOC_MAX_ENERGY_MINS_PER_JOB: job_state_reason = 98;
pub const job_state_reason_WAIT_ASSOC_GRP_GRES: job_state_reason = 99;
pub const job_state_reason_WAIT_ASSOC_GRP_GRES_MIN: job_state_reason = 100;
pub const job_state_reason_WAIT_ASSOC_GRP_GRES_RUN_MIN: job_state_reason = 101;
pub const job_state_reason_WAIT_ASSOC_MAX_GRES_PER_JOB: job_state_reason = 102;
pub const job_state_reason_WAIT_ASSOC_MAX_GRES_PER_NODE: job_state_reason = 103;
pub const job_state_reason_WAIT_ASSOC_MAX_GRES_MINS_PER_JOB: job_state_reason = 104;
pub const job_state_reason_WAIT_ASSOC_GRP_LIC: job_state_reason = 105;
pub const job_state_reason_WAIT_ASSOC_GRP_LIC_MIN: job_state_reason = 106;
pub const job_state_reason_WAIT_ASSOC_GRP_LIC_RUN_MIN: job_state_reason = 107;
pub const job_state_reason_WAIT_ASSOC_MAX_LIC_PER_JOB: job_state_reason = 108;
pub const job_state_reason_WAIT_ASSOC_MAX_LIC_MINS_PER_JOB: job_state_reason = 109;
pub const job_state_reason_WAIT_ASSOC_GRP_BB: job_state_reason = 110;
pub const job_state_reason_WAIT_ASSOC_GRP_BB_MIN: job_state_reason = 111;
pub const job_state_reason_WAIT_ASSOC_GRP_BB_RUN_MIN: job_state_reason = 112;
pub const job_state_reason_WAIT_ASSOC_MAX_BB_PER_JOB: job_state_reason = 113;
pub const job_state_reason_WAIT_ASSOC_MAX_BB_PER_NODE: job_state_reason = 114;
pub const job_state_reason_WAIT_ASSOC_MAX_BB_MINS_PER_JOB: job_state_reason = 115;
pub const job_state_reason_WAIT_QOS_GRP_UNK: job_state_reason = 116;
pub const job_state_reason_WAIT_QOS_GRP_UNK_MIN: job_state_reason = 117;
pub const job_state_reason_WAIT_QOS_GRP_UNK_RUN_MIN: job_state_reason = 118;
pub const job_state_reason_WAIT_QOS_MAX_UNK_PER_JOB: job_state_reason = 119;
pub const job_state_reason_WAIT_QOS_MAX_UNK_PER_NODE: job_state_reason = 120;
pub const job_state_reason_WAIT_QOS_MAX_UNK_PER_USER: job_state_reason = 121;
pub const job_state_reason_WAIT_QOS_MAX_UNK_MINS_PER_JOB: job_state_reason = 122;
pub const job_state_reason_WAIT_QOS_MIN_UNK: job_state_reason = 123;
pub const job_state_reason_WAIT_QOS_MAX_CPU_PER_NODE: job_state_reason = 124;
pub const job_state_reason_WAIT_QOS_GRP_MEM_MIN: job_state_reason = 125;
pub const job_state_reason_WAIT_QOS_GRP_MEM_RUN_MIN: job_state_reason = 126;
pub const job_state_reason_WAIT_QOS_MAX_MEM_MINS_PER_JOB: job_state_reason = 127;
pub const job_state_reason_WAIT_QOS_MAX_MEM_PER_JOB: job_state_reason = 128;
pub const job_state_reason_WAIT_QOS_MAX_MEM_PER_NODE: job_state_reason = 129;
pub const job_state_reason_WAIT_QOS_MAX_MEM_PER_USER: job_state_reason = 130;
pub const job_state_reason_WAIT_QOS_MIN_MEM: job_state_reason = 131;
pub const job_state_reason_WAIT_QOS_GRP_ENERGY: job_state_reason = 132;
pub const job_state_reason_WAIT_QOS_GRP_ENERGY_MIN: job_state_reason = 133;
pub const job_state_reason_WAIT_QOS_GRP_ENERGY_RUN_MIN: job_state_reason = 134;
pub const job_state_reason_WAIT_QOS_MAX_ENERGY_PER_JOB: job_state_reason = 135;
pub const job_state_reason_WAIT_QOS_MAX_ENERGY_PER_NODE: job_state_reason = 136;
pub const job_state_reason_WAIT_QOS_MAX_ENERGY_PER_USER: job_state_reason = 137;
pub const job_state_reason_WAIT_QOS_MAX_ENERGY_MINS_PER_JOB: job_state_reason = 138;
pub const job_state_reason_WAIT_QOS_MIN_ENERGY: job_state_reason = 139;
pub const job_state_reason_WAIT_QOS_GRP_NODE_MIN: job_state_reason = 140;
pub const job_state_reason_WAIT_QOS_GRP_NODE_RUN_MIN: job_state_reason = 141;
pub const job_state_reason_WAIT_QOS_MAX_NODE_MINS_PER_JOB: job_state_reason = 142;
pub const job_state_reason_WAIT_QOS_MIN_NODE: job_state_reason = 143;
pub const job_state_reason_WAIT_QOS_GRP_GRES: job_state_reason = 144;
pub const job_state_reason_WAIT_QOS_GRP_GRES_MIN: job_state_reason = 145;
pub const job_state_reason_WAIT_QOS_GRP_GRES_RUN_MIN: job_state_reason = 146;
pub const job_state_reason_WAIT_QOS_MAX_GRES_PER_JOB: job_state_reason = 147;
pub const job_state_reason_WAIT_QOS_MAX_GRES_PER_NODE: job_state_reason = 148;
pub const job_state_reason_WAIT_QOS_MAX_GRES_PER_USER: job_state_reason = 149;
pub const job_state_reason_WAIT_QOS_MAX_GRES_MINS_PER_JOB: job_state_reason = 150;
pub const job_state_reason_WAIT_QOS_MIN_GRES: job_state_reason = 151;
pub const job_state_reason_WAIT_QOS_GRP_LIC: job_state_reason = 152;
pub const job_state_reason_WAIT_QOS_GRP_LIC_MIN: job_state_reason = 153;
pub const job_state_reason_WAIT_QOS_GRP_LIC_RUN_MIN: job_state_reason = 154;
pub const job_state_reason_WAIT_QOS_MAX_LIC_PER_JOB: job_state_reason = 155;
pub const job_state_reason_WAIT_QOS_MAX_LIC_PER_USER: job_state_reason = 156;
pub const job_state_reason_WAIT_QOS_MAX_LIC_MINS_PER_JOB: job_state_reason = 157;
pub const job_state_reason_WAIT_QOS_MIN_LIC: job_state_reason = 158;
pub const job_state_reason_WAIT_QOS_GRP_BB: job_state_reason = 159;
pub const job_state_reason_WAIT_QOS_GRP_BB_MIN: job_state_reason = 160;
pub const job_state_reason_WAIT_QOS_GRP_BB_RUN_MIN: job_state_reason = 161;
pub const job_state_reason_WAIT_QOS_MAX_BB_PER_JOB: job_state_reason = 162;
pub const job_state_reason_WAIT_QOS_MAX_BB_PER_NODE: job_state_reason = 163;
pub const job_state_reason_WAIT_QOS_MAX_BB_PER_USER: job_state_reason = 164;
pub const job_state_reason_WAIT_QOS_MAX_BB_MINS_PER_JOB: job_state_reason = 165;
pub const job_state_reason_WAIT_QOS_MIN_BB: job_state_reason = 166;
pub const job_state_reason_FAIL_DEADLINE: job_state_reason = 167;
pub const job_state_reason_WAIT_QOS_MAX_BB_PER_ACCT: job_state_reason = 168;
pub const job_state_reason_WAIT_QOS_MAX_CPU_PER_ACCT: job_state_reason = 169;
pub const job_state_reason_WAIT_QOS_MAX_ENERGY_PER_ACCT: job_state_reason = 170;
pub const job_state_reason_WAIT_QOS_MAX_GRES_PER_ACCT: job_state_reason = 171;
pub const job_state_reason_WAIT_QOS_MAX_NODE_PER_ACCT: job_state_reason = 172;
pub const job_state_reason_WAIT_QOS_MAX_LIC_PER_ACCT: job_state_reason = 173;
pub const job_state_reason_WAIT_QOS_MAX_MEM_PER_ACCT: job_state_reason = 174;
pub const job_state_reason_WAIT_QOS_MAX_UNK_PER_ACCT: job_state_reason = 175;
pub const job_state_reason_WAIT_QOS_MAX_JOB_PER_ACCT: job_state_reason = 176;
pub const job_state_reason_WAIT_QOS_MAX_SUB_JOB_PER_ACCT: job_state_reason = 177;
pub const job_state_reason_WAIT_PART_CONFIG: job_state_reason = 178;
pub const job_state_reason_WAIT_ACCOUNT_POLICY: job_state_reason = 179;
pub const job_state_reason_WAIT_FED_JOB_LOCK: job_state_reason = 180;
pub const job_state_reason_FAIL_OOM: job_state_reason = 181;
pub const job_state_reason_WAIT_PN_MEM_LIMIT: job_state_reason = 182;
pub const job_state_reason_WAIT_ASSOC_GRP_BILLING: job_state_reason = 183;
pub const job_state_reason_WAIT_ASSOC_GRP_BILLING_MIN: job_state_reason = 184;
pub const job_state_reason_WAIT_ASSOC_GRP_BILLING_RUN_MIN: job_state_reason = 185;
pub const job_state_reason_WAIT_ASSOC_MAX_BILLING_PER_JOB: job_state_reason = 186;
pub const job_state_reason_WAIT_ASSOC_MAX_BILLING_PER_NODE: job_state_reason = 187;
pub const job_state_reason_WAIT_ASSOC_MAX_BILLING_MINS_PER_JOB: job_state_reason = 188;
pub const job_state_reason_WAIT_QOS_GRP_BILLING: job_state_reason = 189;
pub const job_state_reason_WAIT_QOS_GRP_BILLING_MIN: job_state_reason = 190;
pub const job_state_reason_WAIT_QOS_GRP_BILLING_RUN_MIN: job_state_reason = 191;
pub const job_state_reason_WAIT_QOS_MAX_BILLING_PER_JOB: job_state_reason = 192;
pub const job_state_reason_WAIT_QOS_MAX_BILLING_PER_NODE: job_state_reason = 193;
pub const job_state_reason_WAIT_QOS_MAX_BILLING_PER_USER: job_state_reason = 194;
pub const job_state_reason_WAIT_QOS_MAX_BILLING_MINS_PER_JOB: job_state_reason = 195;
pub const job_state_reason_WAIT_QOS_MAX_BILLING_PER_ACCT: job_state_reason = 196;
pub const job_state_reason_WAIT_QOS_MIN_BILLING: job_state_reason = 197;
pub const job_state_reason_WAIT_RESV_DELETED: job_state_reason = 198;
pub const job_state_reason_WAIT_RESV_INVALID: job_state_reason = 199;
pub const job_state_reason_FAIL_CONSTRAINTS: job_state_reason = 200;
pub const job_state_reason_WAIT_QOS_MAX_BB_RUN_MINS_PER_ACCT: job_state_reason = 201;
pub const job_state_reason_WAIT_QOS_MAX_BILLING_RUN_MINS_PER_ACCT: job_state_reason = 202;
pub const job_state_reason_WAIT_QOS_MAX_CPU_RUN_MINS_PER_ACCT: job_state_reason = 203;
pub const job_state_reason_WAIT_QOS_MAX_ENERGY_RUN_MINS_PER_ACCT: job_state_reason = 204;
pub const job_state_reason_WAIT_QOS_MAX_GRES_RUN_MINS_PER_ACCT: job_state_reason = 205;
pub const job_state_reason_WAIT_QOS_MAX_NODE_RUN_MINS_PER_ACCT: job_state_reason = 206;
pub const job_state_reason_WAIT_QOS_MAX_LIC_RUN_MINS_PER_ACCT: job_state_reason = 207;
pub const job_state_reason_WAIT_QOS_MAX_MEM_RUN_MINS_PER_ACCT: job_state_reason = 208;
pub const job_state_reason_WAIT_QOS_MAX_UNK_RUN_MINS_PER_ACCT: job_state_reason = 209;
pub const job_state_reason_WAIT_QOS_MAX_BB_RUN_MINS_PER_USER: job_state_reason = 210;
pub const job_state_reason_WAIT_QOS_MAX_BILLING_RUN_MINS_PER_USER: job_state_reason = 211;
pub const job_state_reason_WAIT_QOS_MAX_CPU_RUN_MINS_PER_USER: job_state_reason = 212;
pub const job_state_reason_WAIT_QOS_MAX_ENERGY_RUN_MINS_PER_USER: job_state_reason = 213;
pub const job_state_reason_WAIT_QOS_MAX_GRES_RUN_MINS_PER_USER: job_state_reason = 214;
pub const job_state_reason_WAIT_QOS_MAX_NODE_RUN_MINS_PER_USER: job_state_reason = 215;
pub const job_state_reason_WAIT_QOS_MAX_LIC_RUN_MINS_PER_USER: job_state_reason = 216;
pub const job_state_reason_WAIT_QOS_MAX_MEM_RUN_MINS_PER_USER: job_state_reason = 217;
pub const job_state_reason_WAIT_QOS_MAX_UNK_RUN_MINS_PER_USER: job_state_reason = 218;
pub const job_state_reason_WAIT_MAX_POWERED_NODES: job_state_reason = 219;
pub const job_state_reason_WAIT_MPI_PORTS_BUSY: job_state_reason = 220;
pub const job_state_reason_REASON_END: job_state_reason = 221;
pub type job_state_reason = ::std::os::raw::c_uint;
pub const job_acct_types_JOB_START: job_acct_types = 0;
pub const job_acct_types_JOB_STEP: job_acct_types = 1;
pub const job_acct_types_JOB_SUSPEND: job_acct_types = 2;
pub const job_acct_types_JOB_TERMINATED: job_acct_types = 3;
pub type job_acct_types = ::std::os::raw::c_uint;
pub const auth_plugin_type_AUTH_PLUGIN_NONE: auth_plugin_type = 100;
pub const auth_plugin_type_AUTH_PLUGIN_MUNGE: auth_plugin_type = 101;
pub const auth_plugin_type_AUTH_PLUGIN_JWT: auth_plugin_type = 102;
pub const auth_plugin_type_AUTH_PLUGIN_SLURM: auth_plugin_type = 103;
pub type auth_plugin_type = ::std::os::raw::c_uint;
pub const hash_plugin_type_HASH_PLUGIN_DEFAULT: hash_plugin_type = 0;
pub const hash_plugin_type_HASH_PLUGIN_NONE: hash_plugin_type = 1;
pub const hash_plugin_type_HASH_PLUGIN_K12: hash_plugin_type = 2;
pub const hash_plugin_type_HASH_PLUGIN_SHA256: hash_plugin_type = 3;
pub const hash_plugin_type_HASH_PLUGIN_SHA3: hash_plugin_type = 4;
pub const hash_plugin_type_HASH_PLUGIN_CNT: hash_plugin_type = 5;
pub type hash_plugin_type = ::std::os::raw::c_uint;
pub const tls_plugin_type_TLS_PLUGIN_NONE: tls_plugin_type = 100;
pub const tls_plugin_type_TLS_PLUGIN_S2N: tls_plugin_type = 101;
pub type tls_plugin_type = ::std::os::raw::c_uint;
pub const select_plugin_type_SELECT_PLUGIN_CONS_RES: select_plugin_type = 101;
pub const select_plugin_type_SELECT_PLUGIN_LINEAR: select_plugin_type = 102;
pub const select_plugin_type_SELECT_PLUGIN_CONS_TRES: select_plugin_type = 109;
pub type select_plugin_type = ::std::os::raw::c_uint;
pub const switch_plugin_type_SWITCH_PLUGIN_NONE: switch_plugin_type = 100;
pub const switch_plugin_type_SWITCH_PLUGIN_GENERIC: switch_plugin_type = 101;
pub const switch_plugin_type_SWITCH_PLUGIN_CRAY: switch_plugin_type = 102;
pub const switch_plugin_type_SWITCH_PLUGIN_SLINGSHOT: switch_plugin_type = 104;
pub const switch_plugin_type_SWITCH_PLUGIN_NVIDIA_IMEX: switch_plugin_type = 105;
pub type switch_plugin_type = ::std::os::raw::c_uint;
pub const select_jobdata_type_SELECT_JOBDATA_NETWORK: select_jobdata_type = 23;
pub type select_jobdata_type = ::std::os::raw::c_uint;
pub const select_nodedata_type_SELECT_NODEDATA_SUBCNT: select_nodedata_type = 2;
pub const select_nodedata_type_SELECT_NODEDATA_PTR: select_nodedata_type = 5;
pub const select_nodedata_type_SELECT_NODEDATA_MEM_ALLOC: select_nodedata_type = 8;
pub const select_nodedata_type_SELECT_NODEDATA_TRES_ALLOC_FMT_STR: select_nodedata_type = 9;
pub const select_nodedata_type_SELECT_NODEDATA_TRES_ALLOC_WEIGHTED: select_nodedata_type = 10;
pub type select_nodedata_type = ::std::os::raw::c_uint;
pub const select_print_mode_SELECT_PRINT_HEAD: select_print_mode = 0;
pub const select_print_mode_SELECT_PRINT_DATA: select_print_mode = 1;
pub const select_print_mode_SELECT_PRINT_MIXED: select_print_mode = 2;
pub const select_print_mode_SELECT_PRINT_MIXED_SHORT: select_print_mode = 3;
pub const select_print_mode_SELECT_PRINT_BG_ID: select_print_mode = 4;
pub const select_print_mode_SELECT_PRINT_NODES: select_print_mode = 5;
pub const select_print_mode_SELECT_PRINT_CONNECTION: select_print_mode = 6;
pub const select_print_mode_SELECT_PRINT_ROTATE: select_print_mode = 7;
pub const select_print_mode_SELECT_PRINT_GEOMETRY: select_print_mode = 8;
pub const select_print_mode_SELECT_PRINT_START: select_print_mode = 9;
pub const select_print_mode_SELECT_PRINT_BLRTS_IMAGE: select_print_mode = 10;
pub const select_print_mode_SELECT_PRINT_LINUX_IMAGE: select_print_mode = 11;
pub const select_print_mode_SELECT_PRINT_MLOADER_IMAGE: select_print_mode = 12;
pub const select_print_mode_SELECT_PRINT_RAMDISK_IMAGE: select_print_mode = 13;
pub const select_print_mode_SELECT_PRINT_REBOOT: select_print_mode = 14;
pub const select_print_mode_SELECT_PRINT_RESV_ID: select_print_mode = 15;
pub const select_print_mode_SELECT_PRINT_START_LOC: select_print_mode = 16;
pub type select_print_mode = ::std::os::raw::c_uint;
pub const select_node_cnt_SELECT_GET_NODE_SCALING: select_node_cnt = 0;
pub const select_node_cnt_SELECT_GET_NODE_CPU_CNT: select_node_cnt = 1;
pub const select_node_cnt_SELECT_GET_MP_CPU_CNT: select_node_cnt = 2;
pub const select_node_cnt_SELECT_APPLY_NODE_MIN_OFFSET: select_node_cnt = 3;
pub const select_node_cnt_SELECT_APPLY_NODE_MAX_OFFSET: select_node_cnt = 4;
pub const select_node_cnt_SELECT_SET_NODE_CNT: select_node_cnt = 5;
pub const select_node_cnt_SELECT_SET_MP_CNT: select_node_cnt = 6;
pub type select_node_cnt = ::std::os::raw::c_uint;
pub const acct_gather_profile_info_ACCT_GATHER_PROFILE_DIR: acct_gather_profile_info = 0;
pub const acct_gather_profile_info_ACCT_GATHER_PROFILE_DEFAULT: acct_gather_profile_info = 1;
pub const acct_gather_profile_info_ACCT_GATHER_PROFILE_RUNNING: acct_gather_profile_info = 2;
pub type acct_gather_profile_info = ::std::os::raw::c_uint;
pub const jobacct_data_type_JOBACCT_DATA_TOTAL: jobacct_data_type = 0;
pub const jobacct_data_type_JOBACCT_DATA_PIPE: jobacct_data_type = 1;
pub const jobacct_data_type_JOBACCT_DATA_RUSAGE: jobacct_data_type = 2;
pub const jobacct_data_type_JOBACCT_DATA_TOT_VSIZE: jobacct_data_type = 5;
pub const jobacct_data_type_JOBACCT_DATA_TOT_RSS: jobacct_data_type = 8;
pub type jobacct_data_type = ::std::os::raw::c_uint;
pub const acct_energy_type_ENERGY_DATA_JOULES_TASK: acct_energy_type = 0;
pub const acct_energy_type_ENERGY_DATA_STRUCT: acct_energy_type = 1;
pub const acct_energy_type_ENERGY_DATA_RECONFIG: acct_energy_type = 2;
pub const acct_energy_type_ENERGY_DATA_PROFILE: acct_energy_type = 3;
pub const acct_energy_type_ENERGY_DATA_LAST_POLL: acct_energy_type = 4;
pub const acct_energy_type_ENERGY_DATA_SENSOR_CNT: acct_energy_type = 5;
pub const acct_energy_type_ENERGY_DATA_NODE_ENERGY: acct_energy_type = 6;
pub const acct_energy_type_ENERGY_DATA_NODE_ENERGY_UP: acct_energy_type = 7;
pub const acct_energy_type_ENERGY_DATA_STEP_PTR: acct_energy_type = 8;
pub type acct_energy_type = ::std::os::raw::c_uint;
pub const update_mode_t_UPDATE_SET: update_mode_t = 0;
pub const update_mode_t_UPDATE_ADD: update_mode_t = 1;
pub const update_mode_t_UPDATE_REMOVE: update_mode_t = 2;
pub type update_mode_t = ::std::os::raw::c_uint;
pub const task_dist_states_SLURM_DIST_CYCLIC: task_dist_states = 1;
pub const task_dist_states_SLURM_DIST_BLOCK: task_dist_states = 2;
pub const task_dist_states_SLURM_DIST_ARBITRARY: task_dist_states = 3;
pub const task_dist_states_SLURM_DIST_PLANE: task_dist_states = 4;
pub const task_dist_states_SLURM_DIST_CYCLIC_CYCLIC: task_dist_states = 17;
pub const task_dist_states_SLURM_DIST_CYCLIC_BLOCK: task_dist_states = 33;
pub const task_dist_states_SLURM_DIST_CYCLIC_CFULL: task_dist_states = 49;
pub const task_dist_states_SLURM_DIST_BLOCK_CYCLIC: task_dist_states = 18;
pub const task_dist_states_SLURM_DIST_BLOCK_BLOCK: task_dist_states = 34;
pub const task_dist_states_SLURM_DIST_BLOCK_CFULL: task_dist_states = 50;
pub const task_dist_states_SLURM_DIST_CYCLIC_CYCLIC_CYCLIC: task_dist_states = 273;
pub const task_dist_states_SLURM_DIST_CYCLIC_CYCLIC_BLOCK: task_dist_states = 529;
pub const task_dist_states_SLURM_DIST_CYCLIC_CYCLIC_CFULL: task_dist_states = 785;
pub const task_dist_states_SLURM_DIST_CYCLIC_BLOCK_CYCLIC: task_dist_states = 289;
pub const task_dist_states_SLURM_DIST_CYCLIC_BLOCK_BLOCK: task_dist_states = 545;
pub const task_dist_states_SLURM_DIST_CYCLIC_BLOCK_CFULL: task_dist_states = 801;
pub const task_dist_states_SLURM_DIST_CYCLIC_CFULL_CYCLIC: task_dist_states = 305;
pub const task_dist_states_SLURM_DIST_CYCLIC_CFULL_BLOCK: task_dist_states = 561;
pub const task_dist_states_SLURM_DIST_CYCLIC_CFULL_CFULL: task_dist_states = 817;
pub const task_dist_states_SLURM_DIST_BLOCK_CYCLIC_CYCLIC: task_dist_states = 274;
pub const task_dist_states_SLURM_DIST_BLOCK_CYCLIC_BLOCK: task_dist_states = 530;
pub const task_dist_states_SLURM_DIST_BLOCK_CYCLIC_CFULL: task_dist_states = 786;
pub const task_dist_states_SLURM_DIST_BLOCK_BLOCK_CYCLIC: task_dist_states = 290;
pub const task_dist_states_SLURM_DIST_BLOCK_BLOCK_BLOCK: task_dist_states = 546;
pub const task_dist_states_SLURM_DIST_BLOCK_BLOCK_CFULL: task_dist_states = 802;
pub const task_dist_states_SLURM_DIST_BLOCK_CFULL_CYCLIC: task_dist_states = 306;
pub const task_dist_states_SLURM_DIST_BLOCK_CFULL_BLOCK: task_dist_states = 562;
pub const task_dist_states_SLURM_DIST_BLOCK_CFULL_CFULL: task_dist_states = 818;
pub const task_dist_states_SLURM_DIST_NODECYCLIC: task_dist_states = 1;
pub const task_dist_states_SLURM_DIST_NODEBLOCK: task_dist_states = 2;
pub const task_dist_states_SLURM_DIST_SOCKCYCLIC: task_dist_states = 16;
pub const task_dist_states_SLURM_DIST_SOCKBLOCK: task_dist_states = 32;
pub const task_dist_states_SLURM_DIST_SOCKCFULL: task_dist_states = 48;
pub const task_dist_states_SLURM_DIST_CORECYCLIC: task_dist_states = 256;
pub const task_dist_states_SLURM_DIST_COREBLOCK: task_dist_states = 512;
pub const task_dist_states_SLURM_DIST_CORECFULL: task_dist_states = 768;
pub const task_dist_states_SLURM_DIST_UNKNOWN: task_dist_states = 8192;
pub type task_dist_states = ::std::os::raw::c_uint;
pub use self::task_dist_states as task_dist_states_t;
pub const cpu_bind_type_CPU_BIND_VERBOSE: cpu_bind_type = 1;
pub const cpu_bind_type_CPU_BIND_TO_THREADS: cpu_bind_type = 2;
pub const cpu_bind_type_CPU_BIND_TO_CORES: cpu_bind_type = 4;
pub const cpu_bind_type_CPU_BIND_TO_SOCKETS: cpu_bind_type = 8;
pub const cpu_bind_type_CPU_BIND_TO_LDOMS: cpu_bind_type = 16;
pub const cpu_bind_type_CPU_BIND_NONE: cpu_bind_type = 32;
pub const cpu_bind_type_CPU_BIND_MAP: cpu_bind_type = 128;
pub const cpu_bind_type_CPU_BIND_MASK: cpu_bind_type = 256;
pub const cpu_bind_type_CPU_BIND_LDRANK: cpu_bind_type = 512;
pub const cpu_bind_type_CPU_BIND_LDMAP: cpu_bind_type = 1024;
pub const cpu_bind_type_CPU_BIND_LDMASK: cpu_bind_type = 2048;
pub const cpu_bind_type_CPU_BIND_ONE_THREAD_PER_CORE: cpu_bind_type = 8192;
pub const cpu_bind_type_CPU_AUTO_BIND_TO_THREADS: cpu_bind_type = 16384;
pub const cpu_bind_type_CPU_AUTO_BIND_TO_CORES: cpu_bind_type = 65536;
pub const cpu_bind_type_CPU_AUTO_BIND_TO_SOCKETS: cpu_bind_type = 131072;
pub const cpu_bind_type_SLURMD_OFF_SPEC: cpu_bind_type = 262144;
pub const cpu_bind_type_CPU_BIND_OFF: cpu_bind_type = 524288;
pub const cpu_bind_type_OOM_KILL_STEP: cpu_bind_type = 1048576;
pub type cpu_bind_type = ::std::os::raw::c_uint;
pub use self::cpu_bind_type as cpu_bind_type_t;
pub const mem_bind_type_MEM_BIND_VERBOSE: mem_bind_type = 1;
pub const mem_bind_type_MEM_BIND_NONE: mem_bind_type = 2;
pub const mem_bind_type_MEM_BIND_RANK: mem_bind_type = 4;
pub const mem_bind_type_MEM_BIND_MAP: mem_bind_type = 8;
pub const mem_bind_type_MEM_BIND_MASK: mem_bind_type = 16;
pub const mem_bind_type_MEM_BIND_LOCAL: mem_bind_type = 32;
pub const mem_bind_type_MEM_BIND_SORT: mem_bind_type = 64;
pub const mem_bind_type_MEM_BIND_PREFER: mem_bind_type = 128;
pub type mem_bind_type = ::std::os::raw::c_uint;
pub use self::mem_bind_type as mem_bind_type_t;
pub const accel_bind_type_ACCEL_BIND_VERBOSE: accel_bind_type = 1;
pub const accel_bind_type_ACCEL_BIND_CLOSEST_GPU: accel_bind_type = 2;
pub const accel_bind_type_ACCEL_BIND_CLOSEST_NIC: accel_bind_type = 8;
pub type accel_bind_type = ::std::os::raw::c_uint;
pub use self::accel_bind_type as accel_bind_type_t;
pub const node_states_NODE_STATE_UNKNOWN: node_states = 0;
pub const node_states_NODE_STATE_DOWN: node_states = 1;
pub const node_states_NODE_STATE_IDLE: node_states = 2;
pub const node_states_NODE_STATE_ALLOCATED: node_states = 3;
pub const node_states_NODE_STATE_ERROR: node_states = 4;
pub const node_states_NODE_STATE_MIXED: node_states = 5;
pub const node_states_NODE_STATE_FUTURE: node_states = 6;
pub const node_states_NODE_STATE_END: node_states = 7;
pub type node_states = ::std::os::raw::c_uint;
pub const step_spec_flags_t_SSF_NONE: step_spec_flags_t = 0;
pub const step_spec_flags_t_SSF_EXCLUSIVE: step_spec_flags_t = 1;
pub const step_spec_flags_t_SSF_NO_KILL: step_spec_flags_t = 2;
pub const step_spec_flags_t_SSF_OVERCOMMIT: step_spec_flags_t = 4;
pub const step_spec_flags_t_SSF_WHOLE: step_spec_flags_t = 8;
pub const step_spec_flags_t_SSF_INTERACTIVE: step_spec_flags_t = 16;
pub const step_spec_flags_t_SSF_MEM_ZERO: step_spec_flags_t = 32;
pub const step_spec_flags_t_SSF_OVERLAP_FORCE: step_spec_flags_t = 64;
pub const step_spec_flags_t_SSF_NO_SIG_FAIL: step_spec_flags_t = 128;
pub const step_spec_flags_t_SSF_EXT_LAUNCHER: step_spec_flags_t = 256;
pub const step_spec_flags_t_SSF_GRES_ALLOW_TASK_SHARING: step_spec_flags_t = 512;
pub type step_spec_flags_t = ::std::os::raw::c_uint;
pub const topology_plugin_type_TOPOLOGY_PLUGIN_DEFAULT: topology_plugin_type = 100;
pub const topology_plugin_type_TOPOLOGY_PLUGIN_3DTORUS: topology_plugin_type = 101;
pub const topology_plugin_type_TOPOLOGY_PLUGIN_TREE: topology_plugin_type = 102;
pub const topology_plugin_type_TOPOLOGY_PLUGIN_BLOCK: topology_plugin_type = 103;
pub type topology_plugin_type = ::std::os::raw::c_uint;
unsafe extern "C" {
    pub fn slurm_init(conf: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn slurm_fini();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hostlist {
    _unused: [u8; 0],
}
pub type hostlist_t = hostlist;
unsafe extern "C" {
    pub fn slurm_hostlist_create(hostlist: *const ::std::os::raw::c_char) -> *mut hostlist_t;
}
unsafe extern "C" {
    pub fn slurm_hostlist_count(hl: *mut hostlist_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_hostlist_destroy(hl: *mut hostlist_t);
}
unsafe extern "C" {
    pub fn slurm_hostlist_find(
        hl: *mut hostlist_t,
        hostname: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_hostlist_push(
        hl: *mut hostlist_t,
        hosts: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_hostlist_push_host(
        hl: *mut hostlist_t,
        host: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_hostlist_ranged_string(
        hl: *mut hostlist_t,
        n: usize,
        buf: *mut ::std::os::raw::c_char,
    ) -> isize;
}
unsafe extern "C" {
    pub fn slurm_hostlist_ranged_string_xmalloc(hl: *mut hostlist_t)
    -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn slurm_hostlist_shift(hl: *mut hostlist_t) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn slurm_hostlist_uniq(hl: *mut hostlist_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xlist {
    _unused: [u8; 0],
}
pub type list_t = xlist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct listIterator {
    _unused: [u8; 0],
}
pub type list_itr_t = listIterator;
pub type ListDelF = ::std::option::Option<unsafe extern "C" fn(x: *mut ::std::os::raw::c_void)>;
pub type ListCmpF = ::std::option::Option<
    unsafe extern "C" fn(
        x: *mut ::std::os::raw::c_void,
        y: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type ListFindF = ::std::option::Option<
    unsafe extern "C" fn(
        x: *mut ::std::os::raw::c_void,
        key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type ListForF = ::std::option::Option<
    unsafe extern "C" fn(
        x: *mut ::std::os::raw::c_void,
        arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
unsafe extern "C" {
    pub fn slurm_list_append(l: *mut list_t, x: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn slurm_list_count(l: *mut list_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_list_create(f: ListDelF) -> *mut list_t;
}
unsafe extern "C" {
    pub fn slurm_list_destroy(l: *mut list_t);
}
unsafe extern "C" {
    pub fn slurm_list_find(
        i: *mut list_itr_t,
        f: ListFindF,
        key: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn slurm_list_is_empty(l: *mut list_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_list_iterator_create(l: *mut list_t) -> *mut list_itr_t;
}
unsafe extern "C" {
    pub fn slurm_list_iterator_reset(i: *mut list_itr_t);
}
unsafe extern "C" {
    pub fn slurm_list_iterator_destroy(i: *mut list_itr_t);
}
unsafe extern "C" {
    pub fn slurm_list_next(i: *mut list_itr_t) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn slurm_list_sort(l: *mut list_t, f: ListCmpF);
}
unsafe extern "C" {
    pub fn slurm_list_pop(l: *mut list_t) -> *mut ::std::os::raw::c_void;
}
pub type bitstr_t = i64;
pub type bitoff_t = bitstr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dynamic_plugin_data {
    pub data: *mut ::std::os::raw::c_void,
    pub plugin_id: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dynamic_plugin_data"][::std::mem::size_of::<dynamic_plugin_data>() - 16usize];
    ["Alignment of dynamic_plugin_data"][::std::mem::align_of::<dynamic_plugin_data>() - 8usize];
    ["Offset of field: dynamic_plugin_data::data"]
        [::std::mem::offset_of!(dynamic_plugin_data, data) - 0usize];
    ["Offset of field: dynamic_plugin_data::plugin_id"]
        [::std::mem::offset_of!(dynamic_plugin_data, plugin_id) - 8usize];
};
pub type dynamic_plugin_data_t = dynamic_plugin_data;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acct_gather_energy {
    pub ave_watts: u32,
    pub base_consumed_energy: u64,
    pub consumed_energy: u64,
    pub current_watts: u32,
    pub last_adjustment: u64,
    pub previous_consumed_energy: u64,
    pub poll_time: time_t,
    pub slurmd_start_time: time_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acct_gather_energy"][::std::mem::size_of::<acct_gather_energy>() - 64usize];
    ["Alignment of acct_gather_energy"][::std::mem::align_of::<acct_gather_energy>() - 8usize];
    ["Offset of field: acct_gather_energy::ave_watts"]
        [::std::mem::offset_of!(acct_gather_energy, ave_watts) - 0usize];
    ["Offset of field: acct_gather_energy::base_consumed_energy"]
        [::std::mem::offset_of!(acct_gather_energy, base_consumed_energy) - 8usize];
    ["Offset of field: acct_gather_energy::consumed_energy"]
        [::std::mem::offset_of!(acct_gather_energy, consumed_energy) - 16usize];
    ["Offset of field: acct_gather_energy::current_watts"]
        [::std::mem::offset_of!(acct_gather_energy, current_watts) - 24usize];
    ["Offset of field: acct_gather_energy::last_adjustment"]
        [::std::mem::offset_of!(acct_gather_energy, last_adjustment) - 32usize];
    ["Offset of field: acct_gather_energy::previous_consumed_energy"]
        [::std::mem::offset_of!(acct_gather_energy, previous_consumed_energy) - 40usize];
    ["Offset of field: acct_gather_energy::poll_time"]
        [::std::mem::offset_of!(acct_gather_energy, poll_time) - 48usize];
    ["Offset of field: acct_gather_energy::slurmd_start_time"]
        [::std::mem::offset_of!(acct_gather_energy, slurmd_start_time) - 56usize];
};
pub type acct_gather_energy_t = acct_gather_energy;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct slurm_node_alias_addrs_t {
    pub expiration: time_t,
    pub net_cred: *mut ::std::os::raw::c_char,
    pub node_addrs: *mut slurm_addr_t,
    pub node_cnt: u32,
    pub node_list: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of slurm_node_alias_addrs_t"]
        [::std::mem::size_of::<slurm_node_alias_addrs_t>() - 40usize];
    ["Alignment of slurm_node_alias_addrs_t"]
        [::std::mem::align_of::<slurm_node_alias_addrs_t>() - 8usize];
    ["Offset of field: slurm_node_alias_addrs_t::expiration"]
        [::std::mem::offset_of!(slurm_node_alias_addrs_t, expiration) - 0usize];
    ["Offset of field: slurm_node_alias_addrs_t::net_cred"]
        [::std::mem::offset_of!(slurm_node_alias_addrs_t, net_cred) - 8usize];
    ["Offset of field: slurm_node_alias_addrs_t::node_addrs"]
        [::std::mem::offset_of!(slurm_node_alias_addrs_t, node_addrs) - 16usize];
    ["Offset of field: slurm_node_alias_addrs_t::node_cnt"]
        [::std::mem::offset_of!(slurm_node_alias_addrs_t, node_cnt) - 24usize];
    ["Offset of field: slurm_node_alias_addrs_t::node_list"]
        [::std::mem::offset_of!(slurm_node_alias_addrs_t, node_list) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct job_descriptor {
    pub account: *mut ::std::os::raw::c_char,
    pub acctg_freq: *mut ::std::os::raw::c_char,
    pub admin_comment: *mut ::std::os::raw::c_char,
    pub alloc_node: *mut ::std::os::raw::c_char,
    pub alloc_resp_port: u16,
    pub alloc_sid: u32,
    pub argc: u32,
    pub argv: *mut *mut ::std::os::raw::c_char,
    pub array_inx: *mut ::std::os::raw::c_char,
    pub array_bitmap: *mut bitstr_t,
    pub batch_features: *mut ::std::os::raw::c_char,
    pub begin_time: time_t,
    pub bitflags: u64,
    pub burst_buffer: *mut ::std::os::raw::c_char,
    pub clusters: *mut ::std::os::raw::c_char,
    pub cluster_features: *mut ::std::os::raw::c_char,
    pub comment: *mut ::std::os::raw::c_char,
    pub contiguous: u16,
    pub container: *mut ::std::os::raw::c_char,
    pub container_id: *mut ::std::os::raw::c_char,
    pub core_spec: u16,
    pub cpu_bind: *mut ::std::os::raw::c_char,
    pub cpu_bind_type: u16,
    pub cpu_freq_min: u32,
    pub cpu_freq_max: u32,
    pub cpu_freq_gov: u32,
    pub cpus_per_tres: *mut ::std::os::raw::c_char,
    pub crontab_entry: *mut ::std::os::raw::c_void,
    pub deadline: time_t,
    pub delay_boot: u32,
    pub dependency: *mut ::std::os::raw::c_char,
    pub end_time: time_t,
    pub environment: *mut *mut ::std::os::raw::c_char,
    pub env_hash: slurm_hash_t,
    pub env_size: u32,
    pub exc_nodes: *mut ::std::os::raw::c_char,
    pub extra: *mut ::std::os::raw::c_char,
    pub features: *mut ::std::os::raw::c_char,
    pub fed_siblings_active: u64,
    pub fed_siblings_viable: u64,
    pub group_id: u32,
    pub het_job_offset: u32,
    pub id: *mut ::std::os::raw::c_void,
    pub immediate: u16,
    pub job_id: u32,
    pub job_id_str: *mut ::std::os::raw::c_char,
    pub job_size_str: *mut ::std::os::raw::c_char,
    pub kill_on_node_fail: u16,
    pub licenses: *mut ::std::os::raw::c_char,
    pub licenses_tot: *mut ::std::os::raw::c_char,
    pub mail_type: u16,
    pub mail_user: *mut ::std::os::raw::c_char,
    pub mcs_label: *mut ::std::os::raw::c_char,
    pub mem_bind: *mut ::std::os::raw::c_char,
    pub mem_bind_type: u16,
    pub mem_per_tres: *mut ::std::os::raw::c_char,
    pub name: *mut ::std::os::raw::c_char,
    pub network: *mut ::std::os::raw::c_char,
    pub nice: u32,
    pub num_tasks: u32,
    pub oom_kill_step: u16,
    pub open_mode: u8,
    pub origin_cluster: *mut ::std::os::raw::c_char,
    pub other_port: u16,
    pub overcommit: u8,
    pub partition: *mut ::std::os::raw::c_char,
    pub plane_size: u16,
    pub prefer: *mut ::std::os::raw::c_char,
    pub priority: u32,
    pub profile: u32,
    pub qos: *mut ::std::os::raw::c_char,
    pub reboot: u16,
    pub resp_host: *mut ::std::os::raw::c_char,
    pub restart_cnt: u16,
    pub req_nodes: *mut ::std::os::raw::c_char,
    pub requeue: u16,
    pub reservation: *mut ::std::os::raw::c_char,
    pub resv_port_cnt: u16,
    pub script: *mut ::std::os::raw::c_char,
    pub script_buf: *mut ::std::os::raw::c_void,
    pub script_hash: slurm_hash_t,
    pub shared: u16,
    pub site_factor: u32,
    pub spank_job_env: *mut *mut ::std::os::raw::c_char,
    pub spank_job_env_size: u32,
    pub submit_line: *mut ::std::os::raw::c_char,
    pub task_dist: u32,
    pub time_limit: u32,
    pub time_min: u32,
    pub tres_bind: *mut ::std::os::raw::c_char,
    pub tres_freq: *mut ::std::os::raw::c_char,
    pub tres_per_job: *mut ::std::os::raw::c_char,
    pub tres_per_node: *mut ::std::os::raw::c_char,
    pub tres_per_socket: *mut ::std::os::raw::c_char,
    pub tres_per_task: *mut ::std::os::raw::c_char,
    pub user_id: u32,
    pub wait_all_nodes: u16,
    pub warn_flags: u16,
    pub warn_signal: u16,
    pub warn_time: u16,
    pub work_dir: *mut ::std::os::raw::c_char,
    pub cpus_per_task: u16,
    pub min_cpus: u32,
    pub max_cpus: u32,
    pub min_nodes: u32,
    pub max_nodes: u32,
    pub boards_per_node: u16,
    pub sockets_per_board: u16,
    pub sockets_per_node: u16,
    pub cores_per_socket: u16,
    pub threads_per_core: u16,
    pub ntasks_per_node: u16,
    pub ntasks_per_socket: u16,
    pub ntasks_per_core: u16,
    pub ntasks_per_board: u16,
    pub ntasks_per_tres: u16,
    pub pn_min_cpus: u16,
    pub pn_min_memory: u64,
    pub pn_min_tmp_disk: u32,
    pub req_context: *mut ::std::os::raw::c_char,
    pub req_switch: u32,
    pub segment_size: u16,
    pub selinux_context: *mut ::std::os::raw::c_char,
    pub std_err: *mut ::std::os::raw::c_char,
    pub std_in: *mut ::std::os::raw::c_char,
    pub std_out: *mut ::std::os::raw::c_char,
    pub tres_req_cnt: *mut u64,
    pub wait4switch: u32,
    pub wckey: *mut ::std::os::raw::c_char,
    pub x11: u16,
    pub x11_magic_cookie: *mut ::std::os::raw::c_char,
    pub x11_target: *mut ::std::os::raw::c_char,
    pub x11_target_port: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of job_descriptor"][::std::mem::size_of::<job_descriptor>() - 912usize];
    ["Alignment of job_descriptor"][::std::mem::align_of::<job_descriptor>() - 8usize];
    ["Offset of field: job_descriptor::account"]
        [::std::mem::offset_of!(job_descriptor, account) - 0usize];
    ["Offset of field: job_descriptor::acctg_freq"]
        [::std::mem::offset_of!(job_descriptor, acctg_freq) - 8usize];
    ["Offset of field: job_descriptor::admin_comment"]
        [::std::mem::offset_of!(job_descriptor, admin_comment) - 16usize];
    ["Offset of field: job_descriptor::alloc_node"]
        [::std::mem::offset_of!(job_descriptor, alloc_node) - 24usize];
    ["Offset of field: job_descriptor::alloc_resp_port"]
        [::std::mem::offset_of!(job_descriptor, alloc_resp_port) - 32usize];
    ["Offset of field: job_descriptor::alloc_sid"]
        [::std::mem::offset_of!(job_descriptor, alloc_sid) - 36usize];
    ["Offset of field: job_descriptor::argc"]
        [::std::mem::offset_of!(job_descriptor, argc) - 40usize];
    ["Offset of field: job_descriptor::argv"]
        [::std::mem::offset_of!(job_descriptor, argv) - 48usize];
    ["Offset of field: job_descriptor::array_inx"]
        [::std::mem::offset_of!(job_descriptor, array_inx) - 56usize];
    ["Offset of field: job_descriptor::array_bitmap"]
        [::std::mem::offset_of!(job_descriptor, array_bitmap) - 64usize];
    ["Offset of field: job_descriptor::batch_features"]
        [::std::mem::offset_of!(job_descriptor, batch_features) - 72usize];
    ["Offset of field: job_descriptor::begin_time"]
        [::std::mem::offset_of!(job_descriptor, begin_time) - 80usize];
    ["Offset of field: job_descriptor::bitflags"]
        [::std::mem::offset_of!(job_descriptor, bitflags) - 88usize];
    ["Offset of field: job_descriptor::burst_buffer"]
        [::std::mem::offset_of!(job_descriptor, burst_buffer) - 96usize];
    ["Offset of field: job_descriptor::clusters"]
        [::std::mem::offset_of!(job_descriptor, clusters) - 104usize];
    ["Offset of field: job_descriptor::cluster_features"]
        [::std::mem::offset_of!(job_descriptor, cluster_features) - 112usize];
    ["Offset of field: job_descriptor::comment"]
        [::std::mem::offset_of!(job_descriptor, comment) - 120usize];
    ["Offset of field: job_descriptor::contiguous"]
        [::std::mem::offset_of!(job_descriptor, contiguous) - 128usize];
    ["Offset of field: job_descriptor::container"]
        [::std::mem::offset_of!(job_descriptor, container) - 136usize];
    ["Offset of field: job_descriptor::container_id"]
        [::std::mem::offset_of!(job_descriptor, container_id) - 144usize];
    ["Offset of field: job_descriptor::core_spec"]
        [::std::mem::offset_of!(job_descriptor, core_spec) - 152usize];
    ["Offset of field: job_descriptor::cpu_bind"]
        [::std::mem::offset_of!(job_descriptor, cpu_bind) - 160usize];
    ["Offset of field: job_descriptor::cpu_bind_type"]
        [::std::mem::offset_of!(job_descriptor, cpu_bind_type) - 168usize];
    ["Offset of field: job_descriptor::cpu_freq_min"]
        [::std::mem::offset_of!(job_descriptor, cpu_freq_min) - 172usize];
    ["Offset of field: job_descriptor::cpu_freq_max"]
        [::std::mem::offset_of!(job_descriptor, cpu_freq_max) - 176usize];
    ["Offset of field: job_descriptor::cpu_freq_gov"]
        [::std::mem::offset_of!(job_descriptor, cpu_freq_gov) - 180usize];
    ["Offset of field: job_descriptor::cpus_per_tres"]
        [::std::mem::offset_of!(job_descriptor, cpus_per_tres) - 184usize];
    ["Offset of field: job_descriptor::crontab_entry"]
        [::std::mem::offset_of!(job_descriptor, crontab_entry) - 192usize];
    ["Offset of field: job_descriptor::deadline"]
        [::std::mem::offset_of!(job_descriptor, deadline) - 200usize];
    ["Offset of field: job_descriptor::delay_boot"]
        [::std::mem::offset_of!(job_descriptor, delay_boot) - 208usize];
    ["Offset of field: job_descriptor::dependency"]
        [::std::mem::offset_of!(job_descriptor, dependency) - 216usize];
    ["Offset of field: job_descriptor::end_time"]
        [::std::mem::offset_of!(job_descriptor, end_time) - 224usize];
    ["Offset of field: job_descriptor::environment"]
        [::std::mem::offset_of!(job_descriptor, environment) - 232usize];
    ["Offset of field: job_descriptor::env_hash"]
        [::std::mem::offset_of!(job_descriptor, env_hash) - 240usize];
    ["Offset of field: job_descriptor::env_size"]
        [::std::mem::offset_of!(job_descriptor, env_size) - 276usize];
    ["Offset of field: job_descriptor::exc_nodes"]
        [::std::mem::offset_of!(job_descriptor, exc_nodes) - 280usize];
    ["Offset of field: job_descriptor::extra"]
        [::std::mem::offset_of!(job_descriptor, extra) - 288usize];
    ["Offset of field: job_descriptor::features"]
        [::std::mem::offset_of!(job_descriptor, features) - 296usize];
    ["Offset of field: job_descriptor::fed_siblings_active"]
        [::std::mem::offset_of!(job_descriptor, fed_siblings_active) - 304usize];
    ["Offset of field: job_descriptor::fed_siblings_viable"]
        [::std::mem::offset_of!(job_descriptor, fed_siblings_viable) - 312usize];
    ["Offset of field: job_descriptor::group_id"]
        [::std::mem::offset_of!(job_descriptor, group_id) - 320usize];
    ["Offset of field: job_descriptor::het_job_offset"]
        [::std::mem::offset_of!(job_descriptor, het_job_offset) - 324usize];
    ["Offset of field: job_descriptor::id"][::std::mem::offset_of!(job_descriptor, id) - 328usize];
    ["Offset of field: job_descriptor::immediate"]
        [::std::mem::offset_of!(job_descriptor, immediate) - 336usize];
    ["Offset of field: job_descriptor::job_id"]
        [::std::mem::offset_of!(job_descriptor, job_id) - 340usize];
    ["Offset of field: job_descriptor::job_id_str"]
        [::std::mem::offset_of!(job_descriptor, job_id_str) - 344usize];
    ["Offset of field: job_descriptor::job_size_str"]
        [::std::mem::offset_of!(job_descriptor, job_size_str) - 352usize];
    ["Offset of field: job_descriptor::kill_on_node_fail"]
        [::std::mem::offset_of!(job_descriptor, kill_on_node_fail) - 360usize];
    ["Offset of field: job_descriptor::licenses"]
        [::std::mem::offset_of!(job_descriptor, licenses) - 368usize];
    ["Offset of field: job_descriptor::licenses_tot"]
        [::std::mem::offset_of!(job_descriptor, licenses_tot) - 376usize];
    ["Offset of field: job_descriptor::mail_type"]
        [::std::mem::offset_of!(job_descriptor, mail_type) - 384usize];
    ["Offset of field: job_descriptor::mail_user"]
        [::std::mem::offset_of!(job_descriptor, mail_user) - 392usize];
    ["Offset of field: job_descriptor::mcs_label"]
        [::std::mem::offset_of!(job_descriptor, mcs_label) - 400usize];
    ["Offset of field: job_descriptor::mem_bind"]
        [::std::mem::offset_of!(job_descriptor, mem_bind) - 408usize];
    ["Offset of field: job_descriptor::mem_bind_type"]
        [::std::mem::offset_of!(job_descriptor, mem_bind_type) - 416usize];
    ["Offset of field: job_descriptor::mem_per_tres"]
        [::std::mem::offset_of!(job_descriptor, mem_per_tres) - 424usize];
    ["Offset of field: job_descriptor::name"]
        [::std::mem::offset_of!(job_descriptor, name) - 432usize];
    ["Offset of field: job_descriptor::network"]
        [::std::mem::offset_of!(job_descriptor, network) - 440usize];
    ["Offset of field: job_descriptor::nice"]
        [::std::mem::offset_of!(job_descriptor, nice) - 448usize];
    ["Offset of field: job_descriptor::num_tasks"]
        [::std::mem::offset_of!(job_descriptor, num_tasks) - 452usize];
    ["Offset of field: job_descriptor::oom_kill_step"]
        [::std::mem::offset_of!(job_descriptor, oom_kill_step) - 456usize];
    ["Offset of field: job_descriptor::open_mode"]
        [::std::mem::offset_of!(job_descriptor, open_mode) - 458usize];
    ["Offset of field: job_descriptor::origin_cluster"]
        [::std::mem::offset_of!(job_descriptor, origin_cluster) - 464usize];
    ["Offset of field: job_descriptor::other_port"]
        [::std::mem::offset_of!(job_descriptor, other_port) - 472usize];
    ["Offset of field: job_descriptor::overcommit"]
        [::std::mem::offset_of!(job_descriptor, overcommit) - 474usize];
    ["Offset of field: job_descriptor::partition"]
        [::std::mem::offset_of!(job_descriptor, partition) - 480usize];
    ["Offset of field: job_descriptor::plane_size"]
        [::std::mem::offset_of!(job_descriptor, plane_size) - 488usize];
    ["Offset of field: job_descriptor::prefer"]
        [::std::mem::offset_of!(job_descriptor, prefer) - 496usize];
    ["Offset of field: job_descriptor::priority"]
        [::std::mem::offset_of!(job_descriptor, priority) - 504usize];
    ["Offset of field: job_descriptor::profile"]
        [::std::mem::offset_of!(job_descriptor, profile) - 508usize];
    ["Offset of field: job_descriptor::qos"]
        [::std::mem::offset_of!(job_descriptor, qos) - 512usize];
    ["Offset of field: job_descriptor::reboot"]
        [::std::mem::offset_of!(job_descriptor, reboot) - 520usize];
    ["Offset of field: job_descriptor::resp_host"]
        [::std::mem::offset_of!(job_descriptor, resp_host) - 528usize];
    ["Offset of field: job_descriptor::restart_cnt"]
        [::std::mem::offset_of!(job_descriptor, restart_cnt) - 536usize];
    ["Offset of field: job_descriptor::req_nodes"]
        [::std::mem::offset_of!(job_descriptor, req_nodes) - 544usize];
    ["Offset of field: job_descriptor::requeue"]
        [::std::mem::offset_of!(job_descriptor, requeue) - 552usize];
    ["Offset of field: job_descriptor::reservation"]
        [::std::mem::offset_of!(job_descriptor, reservation) - 560usize];
    ["Offset of field: job_descriptor::resv_port_cnt"]
        [::std::mem::offset_of!(job_descriptor, resv_port_cnt) - 568usize];
    ["Offset of field: job_descriptor::script"]
        [::std::mem::offset_of!(job_descriptor, script) - 576usize];
    ["Offset of field: job_descriptor::script_buf"]
        [::std::mem::offset_of!(job_descriptor, script_buf) - 584usize];
    ["Offset of field: job_descriptor::script_hash"]
        [::std::mem::offset_of!(job_descriptor, script_hash) - 592usize];
    ["Offset of field: job_descriptor::shared"]
        [::std::mem::offset_of!(job_descriptor, shared) - 626usize];
    ["Offset of field: job_descriptor::site_factor"]
        [::std::mem::offset_of!(job_descriptor, site_factor) - 628usize];
    ["Offset of field: job_descriptor::spank_job_env"]
        [::std::mem::offset_of!(job_descriptor, spank_job_env) - 632usize];
    ["Offset of field: job_descriptor::spank_job_env_size"]
        [::std::mem::offset_of!(job_descriptor, spank_job_env_size) - 640usize];
    ["Offset of field: job_descriptor::submit_line"]
        [::std::mem::offset_of!(job_descriptor, submit_line) - 648usize];
    ["Offset of field: job_descriptor::task_dist"]
        [::std::mem::offset_of!(job_descriptor, task_dist) - 656usize];
    ["Offset of field: job_descriptor::time_limit"]
        [::std::mem::offset_of!(job_descriptor, time_limit) - 660usize];
    ["Offset of field: job_descriptor::time_min"]
        [::std::mem::offset_of!(job_descriptor, time_min) - 664usize];
    ["Offset of field: job_descriptor::tres_bind"]
        [::std::mem::offset_of!(job_descriptor, tres_bind) - 672usize];
    ["Offset of field: job_descriptor::tres_freq"]
        [::std::mem::offset_of!(job_descriptor, tres_freq) - 680usize];
    ["Offset of field: job_descriptor::tres_per_job"]
        [::std::mem::offset_of!(job_descriptor, tres_per_job) - 688usize];
    ["Offset of field: job_descriptor::tres_per_node"]
        [::std::mem::offset_of!(job_descriptor, tres_per_node) - 696usize];
    ["Offset of field: job_descriptor::tres_per_socket"]
        [::std::mem::offset_of!(job_descriptor, tres_per_socket) - 704usize];
    ["Offset of field: job_descriptor::tres_per_task"]
        [::std::mem::offset_of!(job_descriptor, tres_per_task) - 712usize];
    ["Offset of field: job_descriptor::user_id"]
        [::std::mem::offset_of!(job_descriptor, user_id) - 720usize];
    ["Offset of field: job_descriptor::wait_all_nodes"]
        [::std::mem::offset_of!(job_descriptor, wait_all_nodes) - 724usize];
    ["Offset of field: job_descriptor::warn_flags"]
        [::std::mem::offset_of!(job_descriptor, warn_flags) - 726usize];
    ["Offset of field: job_descriptor::warn_signal"]
        [::std::mem::offset_of!(job_descriptor, warn_signal) - 728usize];
    ["Offset of field: job_descriptor::warn_time"]
        [::std::mem::offset_of!(job_descriptor, warn_time) - 730usize];
    ["Offset of field: job_descriptor::work_dir"]
        [::std::mem::offset_of!(job_descriptor, work_dir) - 736usize];
    ["Offset of field: job_descriptor::cpus_per_task"]
        [::std::mem::offset_of!(job_descriptor, cpus_per_task) - 744usize];
    ["Offset of field: job_descriptor::min_cpus"]
        [::std::mem::offset_of!(job_descriptor, min_cpus) - 748usize];
    ["Offset of field: job_descriptor::max_cpus"]
        [::std::mem::offset_of!(job_descriptor, max_cpus) - 752usize];
    ["Offset of field: job_descriptor::min_nodes"]
        [::std::mem::offset_of!(job_descriptor, min_nodes) - 756usize];
    ["Offset of field: job_descriptor::max_nodes"]
        [::std::mem::offset_of!(job_descriptor, max_nodes) - 760usize];
    ["Offset of field: job_descriptor::boards_per_node"]
        [::std::mem::offset_of!(job_descriptor, boards_per_node) - 764usize];
    ["Offset of field: job_descriptor::sockets_per_board"]
        [::std::mem::offset_of!(job_descriptor, sockets_per_board) - 766usize];
    ["Offset of field: job_descriptor::sockets_per_node"]
        [::std::mem::offset_of!(job_descriptor, sockets_per_node) - 768usize];
    ["Offset of field: job_descriptor::cores_per_socket"]
        [::std::mem::offset_of!(job_descriptor, cores_per_socket) - 770usize];
    ["Offset of field: job_descriptor::threads_per_core"]
        [::std::mem::offset_of!(job_descriptor, threads_per_core) - 772usize];
    ["Offset of field: job_descriptor::ntasks_per_node"]
        [::std::mem::offset_of!(job_descriptor, ntasks_per_node) - 774usize];
    ["Offset of field: job_descriptor::ntasks_per_socket"]
        [::std::mem::offset_of!(job_descriptor, ntasks_per_socket) - 776usize];
    ["Offset of field: job_descriptor::ntasks_per_core"]
        [::std::mem::offset_of!(job_descriptor, ntasks_per_core) - 778usize];
    ["Offset of field: job_descriptor::ntasks_per_board"]
        [::std::mem::offset_of!(job_descriptor, ntasks_per_board) - 780usize];
    ["Offset of field: job_descriptor::ntasks_per_tres"]
        [::std::mem::offset_of!(job_descriptor, ntasks_per_tres) - 782usize];
    ["Offset of field: job_descriptor::pn_min_cpus"]
        [::std::mem::offset_of!(job_descriptor, pn_min_cpus) - 784usize];
    ["Offset of field: job_descriptor::pn_min_memory"]
        [::std::mem::offset_of!(job_descriptor, pn_min_memory) - 792usize];
    ["Offset of field: job_descriptor::pn_min_tmp_disk"]
        [::std::mem::offset_of!(job_descriptor, pn_min_tmp_disk) - 800usize];
    ["Offset of field: job_descriptor::req_context"]
        [::std::mem::offset_of!(job_descriptor, req_context) - 808usize];
    ["Offset of field: job_descriptor::req_switch"]
        [::std::mem::offset_of!(job_descriptor, req_switch) - 816usize];
    ["Offset of field: job_descriptor::segment_size"]
        [::std::mem::offset_of!(job_descriptor, segment_size) - 820usize];
    ["Offset of field: job_descriptor::selinux_context"]
        [::std::mem::offset_of!(job_descriptor, selinux_context) - 824usize];
    ["Offset of field: job_descriptor::std_err"]
        [::std::mem::offset_of!(job_descriptor, std_err) - 832usize];
    ["Offset of field: job_descriptor::std_in"]
        [::std::mem::offset_of!(job_descriptor, std_in) - 840usize];
    ["Offset of field: job_descriptor::std_out"]
        [::std::mem::offset_of!(job_descriptor, std_out) - 848usize];
    ["Offset of field: job_descriptor::tres_req_cnt"]
        [::std::mem::offset_of!(job_descriptor, tres_req_cnt) - 856usize];
    ["Offset of field: job_descriptor::wait4switch"]
        [::std::mem::offset_of!(job_descriptor, wait4switch) - 864usize];
    ["Offset of field: job_descriptor::wckey"]
        [::std::mem::offset_of!(job_descriptor, wckey) - 872usize];
    ["Offset of field: job_descriptor::x11"]
        [::std::mem::offset_of!(job_descriptor, x11) - 880usize];
    ["Offset of field: job_descriptor::x11_magic_cookie"]
        [::std::mem::offset_of!(job_descriptor, x11_magic_cookie) - 888usize];
    ["Offset of field: job_descriptor::x11_target"]
        [::std::mem::offset_of!(job_descriptor, x11_target) - 896usize];
    ["Offset of field: job_descriptor::x11_target_port"]
        [::std::mem::offset_of!(job_descriptor, x11_target_port) - 904usize];
};
pub type job_desc_msg_t = job_descriptor;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct job_info {
    pub account: *mut ::std::os::raw::c_char,
    pub accrue_time: time_t,
    pub admin_comment: *mut ::std::os::raw::c_char,
    pub alloc_node: *mut ::std::os::raw::c_char,
    pub alloc_sid: u32,
    pub array_bitmap: *mut bitstr_t,
    pub array_job_id: u32,
    pub array_task_id: u32,
    pub array_max_tasks: u32,
    pub array_task_str: *mut ::std::os::raw::c_char,
    pub assoc_id: u32,
    pub batch_features: *mut ::std::os::raw::c_char,
    pub batch_flag: u16,
    pub batch_host: *mut ::std::os::raw::c_char,
    pub bitflags: u64,
    pub boards_per_node: u16,
    pub burst_buffer: *mut ::std::os::raw::c_char,
    pub burst_buffer_state: *mut ::std::os::raw::c_char,
    pub cluster: *mut ::std::os::raw::c_char,
    pub cluster_features: *mut ::std::os::raw::c_char,
    pub command: *mut ::std::os::raw::c_char,
    pub comment: *mut ::std::os::raw::c_char,
    pub container: *mut ::std::os::raw::c_char,
    pub container_id: *mut ::std::os::raw::c_char,
    pub contiguous: u16,
    pub core_spec: u16,
    pub cores_per_socket: u16,
    pub billable_tres: f64,
    pub cpus_per_task: u16,
    pub cpu_freq_min: u32,
    pub cpu_freq_max: u32,
    pub cpu_freq_gov: u32,
    pub cpus_per_tres: *mut ::std::os::raw::c_char,
    pub cronspec: *mut ::std::os::raw::c_char,
    pub deadline: time_t,
    pub delay_boot: u32,
    pub dependency: *mut ::std::os::raw::c_char,
    pub derived_ec: u32,
    pub eligible_time: time_t,
    pub end_time: time_t,
    pub exc_nodes: *mut ::std::os::raw::c_char,
    pub exc_node_inx: *mut i32,
    pub exit_code: u32,
    pub extra: *mut ::std::os::raw::c_char,
    pub failed_node: *mut ::std::os::raw::c_char,
    pub features: *mut ::std::os::raw::c_char,
    pub fed_origin_str: *mut ::std::os::raw::c_char,
    pub fed_siblings_active: u64,
    pub fed_siblings_active_str: *mut ::std::os::raw::c_char,
    pub fed_siblings_viable: u64,
    pub fed_siblings_viable_str: *mut ::std::os::raw::c_char,
    pub gres_detail_cnt: u32,
    pub gres_detail_str: *mut *mut ::std::os::raw::c_char,
    pub gres_total: *mut ::std::os::raw::c_char,
    pub group_id: u32,
    pub het_job_id: u32,
    pub het_job_id_set: *mut ::std::os::raw::c_char,
    pub het_job_offset: u32,
    pub job_id: u32,
    pub job_resrcs: *mut job_resources_t,
    pub job_size_str: *mut ::std::os::raw::c_char,
    pub job_state: u32,
    pub last_sched_eval: time_t,
    pub licenses: *mut ::std::os::raw::c_char,
    pub mail_type: u16,
    pub mail_user: *mut ::std::os::raw::c_char,
    pub max_cpus: u32,
    pub max_nodes: u32,
    pub mcs_label: *mut ::std::os::raw::c_char,
    pub mem_per_tres: *mut ::std::os::raw::c_char,
    pub name: *mut ::std::os::raw::c_char,
    pub network: *mut ::std::os::raw::c_char,
    pub nodes: *mut ::std::os::raw::c_char,
    pub nice: u32,
    pub node_inx: *mut i32,
    pub ntasks_per_core: u16,
    pub ntasks_per_tres: u16,
    pub ntasks_per_node: u16,
    pub ntasks_per_socket: u16,
    pub ntasks_per_board: u16,
    pub num_cpus: u32,
    pub num_nodes: u32,
    pub num_tasks: u32,
    pub oom_kill_step: u16,
    pub partition: *mut ::std::os::raw::c_char,
    pub prefer: *mut ::std::os::raw::c_char,
    pub pn_min_memory: u64,
    pub pn_min_cpus: u16,
    pub pn_min_tmp_disk: u32,
    pub preempt_time: time_t,
    pub preemptable_time: time_t,
    pub pre_sus_time: time_t,
    pub priority: u32,
    pub priority_array: *mut u32,
    pub priority_array_names: *mut ::std::os::raw::c_char,
    pub profile: u32,
    pub qos: *mut ::std::os::raw::c_char,
    pub reboot: u8,
    pub req_nodes: *mut ::std::os::raw::c_char,
    pub req_node_inx: *mut i32,
    pub req_switch: u32,
    pub requeue: u16,
    pub resize_time: time_t,
    pub restart_cnt: u16,
    pub resv_name: *mut ::std::os::raw::c_char,
    pub resv_ports: *mut ::std::os::raw::c_char,
    pub sched_nodes: *mut ::std::os::raw::c_char,
    pub selinux_context: *mut ::std::os::raw::c_char,
    pub shared: u16,
    pub site_factor: u32,
    pub sockets_per_board: u16,
    pub sockets_per_node: u16,
    pub start_time: time_t,
    pub start_protocol_ver: u16,
    pub state_desc: *mut ::std::os::raw::c_char,
    pub state_reason: u32,
    pub std_err: *mut ::std::os::raw::c_char,
    pub std_in: *mut ::std::os::raw::c_char,
    pub std_out: *mut ::std::os::raw::c_char,
    pub submit_time: time_t,
    pub suspend_time: time_t,
    pub system_comment: *mut ::std::os::raw::c_char,
    pub time_limit: u32,
    pub time_min: u32,
    pub threads_per_core: u16,
    pub tres_bind: *mut ::std::os::raw::c_char,
    pub tres_freq: *mut ::std::os::raw::c_char,
    pub tres_per_job: *mut ::std::os::raw::c_char,
    pub tres_per_node: *mut ::std::os::raw::c_char,
    pub tres_per_socket: *mut ::std::os::raw::c_char,
    pub tres_per_task: *mut ::std::os::raw::c_char,
    pub tres_req_str: *mut ::std::os::raw::c_char,
    pub tres_alloc_str: *mut ::std::os::raw::c_char,
    pub user_id: u32,
    pub user_name: *mut ::std::os::raw::c_char,
    pub wait4switch: u32,
    pub wckey: *mut ::std::os::raw::c_char,
    pub work_dir: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of job_info"][::std::mem::size_of::<job_info>() - 960usize];
    ["Alignment of job_info"][::std::mem::align_of::<job_info>() - 8usize];
    ["Offset of field: job_info::account"][::std::mem::offset_of!(job_info, account) - 0usize];
    ["Offset of field: job_info::accrue_time"]
        [::std::mem::offset_of!(job_info, accrue_time) - 8usize];
    ["Offset of field: job_info::admin_comment"]
        [::std::mem::offset_of!(job_info, admin_comment) - 16usize];
    ["Offset of field: job_info::alloc_node"]
        [::std::mem::offset_of!(job_info, alloc_node) - 24usize];
    ["Offset of field: job_info::alloc_sid"][::std::mem::offset_of!(job_info, alloc_sid) - 32usize];
    ["Offset of field: job_info::array_bitmap"]
        [::std::mem::offset_of!(job_info, array_bitmap) - 40usize];
    ["Offset of field: job_info::array_job_id"]
        [::std::mem::offset_of!(job_info, array_job_id) - 48usize];
    ["Offset of field: job_info::array_task_id"]
        [::std::mem::offset_of!(job_info, array_task_id) - 52usize];
    ["Offset of field: job_info::array_max_tasks"]
        [::std::mem::offset_of!(job_info, array_max_tasks) - 56usize];
    ["Offset of field: job_info::array_task_str"]
        [::std::mem::offset_of!(job_info, array_task_str) - 64usize];
    ["Offset of field: job_info::assoc_id"][::std::mem::offset_of!(job_info, assoc_id) - 72usize];
    ["Offset of field: job_info::batch_features"]
        [::std::mem::offset_of!(job_info, batch_features) - 80usize];
    ["Offset of field: job_info::batch_flag"]
        [::std::mem::offset_of!(job_info, batch_flag) - 88usize];
    ["Offset of field: job_info::batch_host"]
        [::std::mem::offset_of!(job_info, batch_host) - 96usize];
    ["Offset of field: job_info::bitflags"][::std::mem::offset_of!(job_info, bitflags) - 104usize];
    ["Offset of field: job_info::boards_per_node"]
        [::std::mem::offset_of!(job_info, boards_per_node) - 112usize];
    ["Offset of field: job_info::burst_buffer"]
        [::std::mem::offset_of!(job_info, burst_buffer) - 120usize];
    ["Offset of field: job_info::burst_buffer_state"]
        [::std::mem::offset_of!(job_info, burst_buffer_state) - 128usize];
    ["Offset of field: job_info::cluster"][::std::mem::offset_of!(job_info, cluster) - 136usize];
    ["Offset of field: job_info::cluster_features"]
        [::std::mem::offset_of!(job_info, cluster_features) - 144usize];
    ["Offset of field: job_info::command"][::std::mem::offset_of!(job_info, command) - 152usize];
    ["Offset of field: job_info::comment"][::std::mem::offset_of!(job_info, comment) - 160usize];
    ["Offset of field: job_info::container"]
        [::std::mem::offset_of!(job_info, container) - 168usize];
    ["Offset of field: job_info::container_id"]
        [::std::mem::offset_of!(job_info, container_id) - 176usize];
    ["Offset of field: job_info::contiguous"]
        [::std::mem::offset_of!(job_info, contiguous) - 184usize];
    ["Offset of field: job_info::core_spec"]
        [::std::mem::offset_of!(job_info, core_spec) - 186usize];
    ["Offset of field: job_info::cores_per_socket"]
        [::std::mem::offset_of!(job_info, cores_per_socket) - 188usize];
    ["Offset of field: job_info::billable_tres"]
        [::std::mem::offset_of!(job_info, billable_tres) - 192usize];
    ["Offset of field: job_info::cpus_per_task"]
        [::std::mem::offset_of!(job_info, cpus_per_task) - 200usize];
    ["Offset of field: job_info::cpu_freq_min"]
        [::std::mem::offset_of!(job_info, cpu_freq_min) - 204usize];
    ["Offset of field: job_info::cpu_freq_max"]
        [::std::mem::offset_of!(job_info, cpu_freq_max) - 208usize];
    ["Offset of field: job_info::cpu_freq_gov"]
        [::std::mem::offset_of!(job_info, cpu_freq_gov) - 212usize];
    ["Offset of field: job_info::cpus_per_tres"]
        [::std::mem::offset_of!(job_info, cpus_per_tres) - 216usize];
    ["Offset of field: job_info::cronspec"][::std::mem::offset_of!(job_info, cronspec) - 224usize];
    ["Offset of field: job_info::deadline"][::std::mem::offset_of!(job_info, deadline) - 232usize];
    ["Offset of field: job_info::delay_boot"]
        [::std::mem::offset_of!(job_info, delay_boot) - 240usize];
    ["Offset of field: job_info::dependency"]
        [::std::mem::offset_of!(job_info, dependency) - 248usize];
    ["Offset of field: job_info::derived_ec"]
        [::std::mem::offset_of!(job_info, derived_ec) - 256usize];
    ["Offset of field: job_info::eligible_time"]
        [::std::mem::offset_of!(job_info, eligible_time) - 264usize];
    ["Offset of field: job_info::end_time"][::std::mem::offset_of!(job_info, end_time) - 272usize];
    ["Offset of field: job_info::exc_nodes"]
        [::std::mem::offset_of!(job_info, exc_nodes) - 280usize];
    ["Offset of field: job_info::exc_node_inx"]
        [::std::mem::offset_of!(job_info, exc_node_inx) - 288usize];
    ["Offset of field: job_info::exit_code"]
        [::std::mem::offset_of!(job_info, exit_code) - 296usize];
    ["Offset of field: job_info::extra"][::std::mem::offset_of!(job_info, extra) - 304usize];
    ["Offset of field: job_info::failed_node"]
        [::std::mem::offset_of!(job_info, failed_node) - 312usize];
    ["Offset of field: job_info::features"][::std::mem::offset_of!(job_info, features) - 320usize];
    ["Offset of field: job_info::fed_origin_str"]
        [::std::mem::offset_of!(job_info, fed_origin_str) - 328usize];
    ["Offset of field: job_info::fed_siblings_active"]
        [::std::mem::offset_of!(job_info, fed_siblings_active) - 336usize];
    ["Offset of field: job_info::fed_siblings_active_str"]
        [::std::mem::offset_of!(job_info, fed_siblings_active_str) - 344usize];
    ["Offset of field: job_info::fed_siblings_viable"]
        [::std::mem::offset_of!(job_info, fed_siblings_viable) - 352usize];
    ["Offset of field: job_info::fed_siblings_viable_str"]
        [::std::mem::offset_of!(job_info, fed_siblings_viable_str) - 360usize];
    ["Offset of field: job_info::gres_detail_cnt"]
        [::std::mem::offset_of!(job_info, gres_detail_cnt) - 368usize];
    ["Offset of field: job_info::gres_detail_str"]
        [::std::mem::offset_of!(job_info, gres_detail_str) - 376usize];
    ["Offset of field: job_info::gres_total"]
        [::std::mem::offset_of!(job_info, gres_total) - 384usize];
    ["Offset of field: job_info::group_id"][::std::mem::offset_of!(job_info, group_id) - 392usize];
    ["Offset of field: job_info::het_job_id"]
        [::std::mem::offset_of!(job_info, het_job_id) - 396usize];
    ["Offset of field: job_info::het_job_id_set"]
        [::std::mem::offset_of!(job_info, het_job_id_set) - 400usize];
    ["Offset of field: job_info::het_job_offset"]
        [::std::mem::offset_of!(job_info, het_job_offset) - 408usize];
    ["Offset of field: job_info::job_id"][::std::mem::offset_of!(job_info, job_id) - 412usize];
    ["Offset of field: job_info::job_resrcs"]
        [::std::mem::offset_of!(job_info, job_resrcs) - 416usize];
    ["Offset of field: job_info::job_size_str"]
        [::std::mem::offset_of!(job_info, job_size_str) - 424usize];
    ["Offset of field: job_info::job_state"]
        [::std::mem::offset_of!(job_info, job_state) - 432usize];
    ["Offset of field: job_info::last_sched_eval"]
        [::std::mem::offset_of!(job_info, last_sched_eval) - 440usize];
    ["Offset of field: job_info::licenses"][::std::mem::offset_of!(job_info, licenses) - 448usize];
    ["Offset of field: job_info::mail_type"]
        [::std::mem::offset_of!(job_info, mail_type) - 456usize];
    ["Offset of field: job_info::mail_user"]
        [::std::mem::offset_of!(job_info, mail_user) - 464usize];
    ["Offset of field: job_info::max_cpus"][::std::mem::offset_of!(job_info, max_cpus) - 472usize];
    ["Offset of field: job_info::max_nodes"]
        [::std::mem::offset_of!(job_info, max_nodes) - 476usize];
    ["Offset of field: job_info::mcs_label"]
        [::std::mem::offset_of!(job_info, mcs_label) - 480usize];
    ["Offset of field: job_info::mem_per_tres"]
        [::std::mem::offset_of!(job_info, mem_per_tres) - 488usize];
    ["Offset of field: job_info::name"][::std::mem::offset_of!(job_info, name) - 496usize];
    ["Offset of field: job_info::network"][::std::mem::offset_of!(job_info, network) - 504usize];
    ["Offset of field: job_info::nodes"][::std::mem::offset_of!(job_info, nodes) - 512usize];
    ["Offset of field: job_info::nice"][::std::mem::offset_of!(job_info, nice) - 520usize];
    ["Offset of field: job_info::node_inx"][::std::mem::offset_of!(job_info, node_inx) - 528usize];
    ["Offset of field: job_info::ntasks_per_core"]
        [::std::mem::offset_of!(job_info, ntasks_per_core) - 536usize];
    ["Offset of field: job_info::ntasks_per_tres"]
        [::std::mem::offset_of!(job_info, ntasks_per_tres) - 538usize];
    ["Offset of field: job_info::ntasks_per_node"]
        [::std::mem::offset_of!(job_info, ntasks_per_node) - 540usize];
    ["Offset of field: job_info::ntasks_per_socket"]
        [::std::mem::offset_of!(job_info, ntasks_per_socket) - 542usize];
    ["Offset of field: job_info::ntasks_per_board"]
        [::std::mem::offset_of!(job_info, ntasks_per_board) - 544usize];
    ["Offset of field: job_info::num_cpus"][::std::mem::offset_of!(job_info, num_cpus) - 548usize];
    ["Offset of field: job_info::num_nodes"]
        [::std::mem::offset_of!(job_info, num_nodes) - 552usize];
    ["Offset of field: job_info::num_tasks"]
        [::std::mem::offset_of!(job_info, num_tasks) - 556usize];
    ["Offset of field: job_info::oom_kill_step"]
        [::std::mem::offset_of!(job_info, oom_kill_step) - 560usize];
    ["Offset of field: job_info::partition"]
        [::std::mem::offset_of!(job_info, partition) - 568usize];
    ["Offset of field: job_info::prefer"][::std::mem::offset_of!(job_info, prefer) - 576usize];
    ["Offset of field: job_info::pn_min_memory"]
        [::std::mem::offset_of!(job_info, pn_min_memory) - 584usize];
    ["Offset of field: job_info::pn_min_cpus"]
        [::std::mem::offset_of!(job_info, pn_min_cpus) - 592usize];
    ["Offset of field: job_info::pn_min_tmp_disk"]
        [::std::mem::offset_of!(job_info, pn_min_tmp_disk) - 596usize];
    ["Offset of field: job_info::preempt_time"]
        [::std::mem::offset_of!(job_info, preempt_time) - 600usize];
    ["Offset of field: job_info::preemptable_time"]
        [::std::mem::offset_of!(job_info, preemptable_time) - 608usize];
    ["Offset of field: job_info::pre_sus_time"]
        [::std::mem::offset_of!(job_info, pre_sus_time) - 616usize];
    ["Offset of field: job_info::priority"][::std::mem::offset_of!(job_info, priority) - 624usize];
    ["Offset of field: job_info::priority_array"]
        [::std::mem::offset_of!(job_info, priority_array) - 632usize];
    ["Offset of field: job_info::priority_array_names"]
        [::std::mem::offset_of!(job_info, priority_array_names) - 640usize];
    ["Offset of field: job_info::profile"][::std::mem::offset_of!(job_info, profile) - 648usize];
    ["Offset of field: job_info::qos"][::std::mem::offset_of!(job_info, qos) - 656usize];
    ["Offset of field: job_info::reboot"][::std::mem::offset_of!(job_info, reboot) - 664usize];
    ["Offset of field: job_info::req_nodes"]
        [::std::mem::offset_of!(job_info, req_nodes) - 672usize];
    ["Offset of field: job_info::req_node_inx"]
        [::std::mem::offset_of!(job_info, req_node_inx) - 680usize];
    ["Offset of field: job_info::req_switch"]
        [::std::mem::offset_of!(job_info, req_switch) - 688usize];
    ["Offset of field: job_info::requeue"][::std::mem::offset_of!(job_info, requeue) - 692usize];
    ["Offset of field: job_info::resize_time"]
        [::std::mem::offset_of!(job_info, resize_time) - 696usize];
    ["Offset of field: job_info::restart_cnt"]
        [::std::mem::offset_of!(job_info, restart_cnt) - 704usize];
    ["Offset of field: job_info::resv_name"]
        [::std::mem::offset_of!(job_info, resv_name) - 712usize];
    ["Offset of field: job_info::resv_ports"]
        [::std::mem::offset_of!(job_info, resv_ports) - 720usize];
    ["Offset of field: job_info::sched_nodes"]
        [::std::mem::offset_of!(job_info, sched_nodes) - 728usize];
    ["Offset of field: job_info::selinux_context"]
        [::std::mem::offset_of!(job_info, selinux_context) - 736usize];
    ["Offset of field: job_info::shared"][::std::mem::offset_of!(job_info, shared) - 744usize];
    ["Offset of field: job_info::site_factor"]
        [::std::mem::offset_of!(job_info, site_factor) - 748usize];
    ["Offset of field: job_info::sockets_per_board"]
        [::std::mem::offset_of!(job_info, sockets_per_board) - 752usize];
    ["Offset of field: job_info::sockets_per_node"]
        [::std::mem::offset_of!(job_info, sockets_per_node) - 754usize];
    ["Offset of field: job_info::start_time"]
        [::std::mem::offset_of!(job_info, start_time) - 760usize];
    ["Offset of field: job_info::start_protocol_ver"]
        [::std::mem::offset_of!(job_info, start_protocol_ver) - 768usize];
    ["Offset of field: job_info::state_desc"]
        [::std::mem::offset_of!(job_info, state_desc) - 776usize];
    ["Offset of field: job_info::state_reason"]
        [::std::mem::offset_of!(job_info, state_reason) - 784usize];
    ["Offset of field: job_info::std_err"][::std::mem::offset_of!(job_info, std_err) - 792usize];
    ["Offset of field: job_info::std_in"][::std::mem::offset_of!(job_info, std_in) - 800usize];
    ["Offset of field: job_info::std_out"][::std::mem::offset_of!(job_info, std_out) - 808usize];
    ["Offset of field: job_info::submit_time"]
        [::std::mem::offset_of!(job_info, submit_time) - 816usize];
    ["Offset of field: job_info::suspend_time"]
        [::std::mem::offset_of!(job_info, suspend_time) - 824usize];
    ["Offset of field: job_info::system_comment"]
        [::std::mem::offset_of!(job_info, system_comment) - 832usize];
    ["Offset of field: job_info::time_limit"]
        [::std::mem::offset_of!(job_info, time_limit) - 840usize];
    ["Offset of field: job_info::time_min"][::std::mem::offset_of!(job_info, time_min) - 844usize];
    ["Offset of field: job_info::threads_per_core"]
        [::std::mem::offset_of!(job_info, threads_per_core) - 848usize];
    ["Offset of field: job_info::tres_bind"]
        [::std::mem::offset_of!(job_info, tres_bind) - 856usize];
    ["Offset of field: job_info::tres_freq"]
        [::std::mem::offset_of!(job_info, tres_freq) - 864usize];
    ["Offset of field: job_info::tres_per_job"]
        [::std::mem::offset_of!(job_info, tres_per_job) - 872usize];
    ["Offset of field: job_info::tres_per_node"]
        [::std::mem::offset_of!(job_info, tres_per_node) - 880usize];
    ["Offset of field: job_info::tres_per_socket"]
        [::std::mem::offset_of!(job_info, tres_per_socket) - 888usize];
    ["Offset of field: job_info::tres_per_task"]
        [::std::mem::offset_of!(job_info, tres_per_task) - 896usize];
    ["Offset of field: job_info::tres_req_str"]
        [::std::mem::offset_of!(job_info, tres_req_str) - 904usize];
    ["Offset of field: job_info::tres_alloc_str"]
        [::std::mem::offset_of!(job_info, tres_alloc_str) - 912usize];
    ["Offset of field: job_info::user_id"][::std::mem::offset_of!(job_info, user_id) - 920usize];
    ["Offset of field: job_info::user_name"]
        [::std::mem::offset_of!(job_info, user_name) - 928usize];
    ["Offset of field: job_info::wait4switch"]
        [::std::mem::offset_of!(job_info, wait4switch) - 936usize];
    ["Offset of field: job_info::wckey"][::std::mem::offset_of!(job_info, wckey) - 944usize];
    ["Offset of field: job_info::work_dir"][::std::mem::offset_of!(job_info, work_dir) - 952usize];
};
pub type slurm_job_info_t = job_info;
pub type job_info_t = slurm_job_info_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct priority_factors_t {
    pub nice: u32,
    pub priority_age: f64,
    pub priority_assoc: f64,
    pub priority_fs: f64,
    pub priority_js: f64,
    pub priority_part: f64,
    pub priority_qos: f64,
    pub priority_site: u32,
    pub priority_tres: *mut f64,
    pub tres_cnt: u32,
    pub tres_names: *mut *mut ::std::os::raw::c_char,
    pub tres_weights: *mut f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of priority_factors_t"][::std::mem::size_of::<priority_factors_t>() - 96usize];
    ["Alignment of priority_factors_t"][::std::mem::align_of::<priority_factors_t>() - 8usize];
    ["Offset of field: priority_factors_t::nice"]
        [::std::mem::offset_of!(priority_factors_t, nice) - 0usize];
    ["Offset of field: priority_factors_t::priority_age"]
        [::std::mem::offset_of!(priority_factors_t, priority_age) - 8usize];
    ["Offset of field: priority_factors_t::priority_assoc"]
        [::std::mem::offset_of!(priority_factors_t, priority_assoc) - 16usize];
    ["Offset of field: priority_factors_t::priority_fs"]
        [::std::mem::offset_of!(priority_factors_t, priority_fs) - 24usize];
    ["Offset of field: priority_factors_t::priority_js"]
        [::std::mem::offset_of!(priority_factors_t, priority_js) - 32usize];
    ["Offset of field: priority_factors_t::priority_part"]
        [::std::mem::offset_of!(priority_factors_t, priority_part) - 40usize];
    ["Offset of field: priority_factors_t::priority_qos"]
        [::std::mem::offset_of!(priority_factors_t, priority_qos) - 48usize];
    ["Offset of field: priority_factors_t::priority_site"]
        [::std::mem::offset_of!(priority_factors_t, priority_site) - 56usize];
    ["Offset of field: priority_factors_t::priority_tres"]
        [::std::mem::offset_of!(priority_factors_t, priority_tres) - 64usize];
    ["Offset of field: priority_factors_t::tres_cnt"]
        [::std::mem::offset_of!(priority_factors_t, tres_cnt) - 72usize];
    ["Offset of field: priority_factors_t::tres_names"]
        [::std::mem::offset_of!(priority_factors_t, tres_names) - 80usize];
    ["Offset of field: priority_factors_t::tres_weights"]
        [::std::mem::offset_of!(priority_factors_t, tres_weights) - 88usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct priority_factors_object {
    pub account: *mut ::std::os::raw::c_char,
    pub cluster_name: *mut ::std::os::raw::c_char,
    pub direct_prio: f64,
    pub job_id: u32,
    pub partition: *mut ::std::os::raw::c_char,
    pub prio_factors: *mut priority_factors_t,
    pub qos: *mut ::std::os::raw::c_char,
    pub user_id: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of priority_factors_object"][::std::mem::size_of::<priority_factors_object>() - 64usize];
    ["Alignment of priority_factors_object"]
        [::std::mem::align_of::<priority_factors_object>() - 8usize];
    ["Offset of field: priority_factors_object::account"]
        [::std::mem::offset_of!(priority_factors_object, account) - 0usize];
    ["Offset of field: priority_factors_object::cluster_name"]
        [::std::mem::offset_of!(priority_factors_object, cluster_name) - 8usize];
    ["Offset of field: priority_factors_object::direct_prio"]
        [::std::mem::offset_of!(priority_factors_object, direct_prio) - 16usize];
    ["Offset of field: priority_factors_object::job_id"]
        [::std::mem::offset_of!(priority_factors_object, job_id) - 24usize];
    ["Offset of field: priority_factors_object::partition"]
        [::std::mem::offset_of!(priority_factors_object, partition) - 32usize];
    ["Offset of field: priority_factors_object::prio_factors"]
        [::std::mem::offset_of!(priority_factors_object, prio_factors) - 40usize];
    ["Offset of field: priority_factors_object::qos"]
        [::std::mem::offset_of!(priority_factors_object, qos) - 48usize];
    ["Offset of field: priority_factors_object::user_id"]
        [::std::mem::offset_of!(priority_factors_object, user_id) - 56usize];
};
pub type priority_factors_object_t = priority_factors_object;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct priority_factors_response_msg {
    pub priority_factors_list: *mut list_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of priority_factors_response_msg"]
        [::std::mem::size_of::<priority_factors_response_msg>() - 8usize];
    ["Alignment of priority_factors_response_msg"]
        [::std::mem::align_of::<priority_factors_response_msg>() - 8usize];
    ["Offset of field: priority_factors_response_msg::priority_factors_list"]
        [::std::mem::offset_of!(priority_factors_response_msg, priority_factors_list) - 0usize];
};
pub type priority_factors_response_msg_t = priority_factors_response_msg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct job_info_msg {
    pub last_backfill: time_t,
    pub last_update: time_t,
    pub record_count: u32,
    pub job_array: *mut slurm_job_info_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of job_info_msg"][::std::mem::size_of::<job_info_msg>() - 32usize];
    ["Alignment of job_info_msg"][::std::mem::align_of::<job_info_msg>() - 8usize];
    ["Offset of field: job_info_msg::last_backfill"]
        [::std::mem::offset_of!(job_info_msg, last_backfill) - 0usize];
    ["Offset of field: job_info_msg::last_update"]
        [::std::mem::offset_of!(job_info_msg, last_update) - 8usize];
    ["Offset of field: job_info_msg::record_count"]
        [::std::mem::offset_of!(job_info_msg, record_count) - 16usize];
    ["Offset of field: job_info_msg::job_array"]
        [::std::mem::offset_of!(job_info_msg, job_array) - 24usize];
};
pub type job_info_msg_t = job_info_msg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct listjobs_info {
    pub job_id: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of listjobs_info"][::std::mem::size_of::<listjobs_info>() - 4usize];
    ["Alignment of listjobs_info"][::std::mem::align_of::<listjobs_info>() - 4usize];
    ["Offset of field: listjobs_info::job_id"]
        [::std::mem::offset_of!(listjobs_info, job_id) - 0usize];
};
pub type listjobs_info_t = listjobs_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct listpids_info {
    pub global_task_id: u32,
    pub job_id: u32,
    pub local_task_id: u32,
    pub pid: pid_t,
    pub step_id: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of listpids_info"][::std::mem::size_of::<listpids_info>() - 24usize];
    ["Alignment of listpids_info"][::std::mem::align_of::<listpids_info>() - 8usize];
    ["Offset of field: listpids_info::global_task_id"]
        [::std::mem::offset_of!(listpids_info, global_task_id) - 0usize];
    ["Offset of field: listpids_info::job_id"]
        [::std::mem::offset_of!(listpids_info, job_id) - 4usize];
    ["Offset of field: listpids_info::local_task_id"]
        [::std::mem::offset_of!(listpids_info, local_task_id) - 8usize];
    ["Offset of field: listpids_info::pid"][::std::mem::offset_of!(listpids_info, pid) - 12usize];
    ["Offset of field: listpids_info::step_id"]
        [::std::mem::offset_of!(listpids_info, step_id) - 16usize];
};
pub type listpids_info_t = listpids_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct liststeps_info {
    pub job_id: u32,
    pub step_id: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of liststeps_info"][::std::mem::size_of::<liststeps_info>() - 16usize];
    ["Alignment of liststeps_info"][::std::mem::align_of::<liststeps_info>() - 8usize];
    ["Offset of field: liststeps_info::job_id"]
        [::std::mem::offset_of!(liststeps_info, job_id) - 0usize];
    ["Offset of field: liststeps_info::step_id"]
        [::std::mem::offset_of!(liststeps_info, step_id) - 8usize];
};
pub type liststeps_info_t = liststeps_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct job_state_response_job_t {
    pub job_id: u32,
    pub array_job_id: u32,
    pub array_task_id: u32,
    pub array_task_id_bitmap: *mut bitstr_t,
    pub het_job_id: u32,
    pub state: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of job_state_response_job_t"]
        [::std::mem::size_of::<job_state_response_job_t>() - 32usize];
    ["Alignment of job_state_response_job_t"]
        [::std::mem::align_of::<job_state_response_job_t>() - 8usize];
    ["Offset of field: job_state_response_job_t::job_id"]
        [::std::mem::offset_of!(job_state_response_job_t, job_id) - 0usize];
    ["Offset of field: job_state_response_job_t::array_job_id"]
        [::std::mem::offset_of!(job_state_response_job_t, array_job_id) - 4usize];
    ["Offset of field: job_state_response_job_t::array_task_id"]
        [::std::mem::offset_of!(job_state_response_job_t, array_task_id) - 8usize];
    ["Offset of field: job_state_response_job_t::array_task_id_bitmap"]
        [::std::mem::offset_of!(job_state_response_job_t, array_task_id_bitmap) - 16usize];
    ["Offset of field: job_state_response_job_t::het_job_id"]
        [::std::mem::offset_of!(job_state_response_job_t, het_job_id) - 24usize];
    ["Offset of field: job_state_response_job_t::state"]
        [::std::mem::offset_of!(job_state_response_job_t, state) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct job_state_response_msg_t {
    pub jobs_count: u32,
    pub jobs: *mut job_state_response_job_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of job_state_response_msg_t"]
        [::std::mem::size_of::<job_state_response_msg_t>() - 16usize];
    ["Alignment of job_state_response_msg_t"]
        [::std::mem::align_of::<job_state_response_msg_t>() - 8usize];
    ["Offset of field: job_state_response_msg_t::jobs_count"]
        [::std::mem::offset_of!(job_state_response_msg_t, jobs_count) - 0usize];
    ["Offset of field: job_state_response_msg_t::jobs"]
        [::std::mem::offset_of!(job_state_response_msg_t, jobs) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct step_update_request_msg {
    pub job_id: u32,
    pub step_id: u32,
    pub time_limit: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of step_update_request_msg"][::std::mem::size_of::<step_update_request_msg>() - 12usize];
    ["Alignment of step_update_request_msg"]
        [::std::mem::align_of::<step_update_request_msg>() - 4usize];
    ["Offset of field: step_update_request_msg::job_id"]
        [::std::mem::offset_of!(step_update_request_msg, job_id) - 0usize];
    ["Offset of field: step_update_request_msg::step_id"]
        [::std::mem::offset_of!(step_update_request_msg, step_id) - 4usize];
    ["Offset of field: step_update_request_msg::time_limit"]
        [::std::mem::offset_of!(step_update_request_msg, time_limit) - 8usize];
};
pub type step_update_request_msg_t = step_update_request_msg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct suspend_exc_update_msg {
    pub update_str: *mut ::std::os::raw::c_char,
    pub mode: update_mode_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of suspend_exc_update_msg"][::std::mem::size_of::<suspend_exc_update_msg>() - 16usize];
    ["Alignment of suspend_exc_update_msg"]
        [::std::mem::align_of::<suspend_exc_update_msg>() - 8usize];
    ["Offset of field: suspend_exc_update_msg::update_str"]
        [::std::mem::offset_of!(suspend_exc_update_msg, update_str) - 0usize];
    ["Offset of field: suspend_exc_update_msg::mode"]
        [::std::mem::offset_of!(suspend_exc_update_msg, mode) - 8usize];
};
pub type suspend_exc_update_msg_t = suspend_exc_update_msg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct slurm_step_layout_req_t {
    pub node_list: *mut ::std::os::raw::c_char,
    pub cpus_per_node: *mut u16,
    pub cpu_count_reps: *mut u32,
    pub num_hosts: u32,
    pub num_tasks: u32,
    pub cpus_per_task: *mut u16,
    pub cpus_task_reps: *mut u32,
    pub task_dist: u32,
    pub plane_size: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of slurm_step_layout_req_t"][::std::mem::size_of::<slurm_step_layout_req_t>() - 56usize];
    ["Alignment of slurm_step_layout_req_t"]
        [::std::mem::align_of::<slurm_step_layout_req_t>() - 8usize];
    ["Offset of field: slurm_step_layout_req_t::node_list"]
        [::std::mem::offset_of!(slurm_step_layout_req_t, node_list) - 0usize];
    ["Offset of field: slurm_step_layout_req_t::cpus_per_node"]
        [::std::mem::offset_of!(slurm_step_layout_req_t, cpus_per_node) - 8usize];
    ["Offset of field: slurm_step_layout_req_t::cpu_count_reps"]
        [::std::mem::offset_of!(slurm_step_layout_req_t, cpu_count_reps) - 16usize];
    ["Offset of field: slurm_step_layout_req_t::num_hosts"]
        [::std::mem::offset_of!(slurm_step_layout_req_t, num_hosts) - 24usize];
    ["Offset of field: slurm_step_layout_req_t::num_tasks"]
        [::std::mem::offset_of!(slurm_step_layout_req_t, num_tasks) - 28usize];
    ["Offset of field: slurm_step_layout_req_t::cpus_per_task"]
        [::std::mem::offset_of!(slurm_step_layout_req_t, cpus_per_task) - 32usize];
    ["Offset of field: slurm_step_layout_req_t::cpus_task_reps"]
        [::std::mem::offset_of!(slurm_step_layout_req_t, cpus_task_reps) - 40usize];
    ["Offset of field: slurm_step_layout_req_t::task_dist"]
        [::std::mem::offset_of!(slurm_step_layout_req_t, task_dist) - 48usize];
    ["Offset of field: slurm_step_layout_req_t::plane_size"]
        [::std::mem::offset_of!(slurm_step_layout_req_t, plane_size) - 52usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct slurm_step_layout {
    pub cpt_compact_array: *mut u16,
    pub cpt_compact_cnt: u32,
    pub cpt_compact_reps: *mut u32,
    pub front_end: *mut ::std::os::raw::c_char,
    pub alias_addrs: *mut slurm_node_alias_addrs_t,
    pub node_cnt: u32,
    pub node_list: *mut ::std::os::raw::c_char,
    pub plane_size: u16,
    pub start_protocol_ver: u16,
    pub tasks: *mut u16,
    pub task_cnt: u32,
    pub task_dist: u32,
    pub tids: *mut *mut u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of slurm_step_layout"][::std::mem::size_of::<slurm_step_layout>() - 88usize];
    ["Alignment of slurm_step_layout"][::std::mem::align_of::<slurm_step_layout>() - 8usize];
    ["Offset of field: slurm_step_layout::cpt_compact_array"]
        [::std::mem::offset_of!(slurm_step_layout, cpt_compact_array) - 0usize];
    ["Offset of field: slurm_step_layout::cpt_compact_cnt"]
        [::std::mem::offset_of!(slurm_step_layout, cpt_compact_cnt) - 8usize];
    ["Offset of field: slurm_step_layout::cpt_compact_reps"]
        [::std::mem::offset_of!(slurm_step_layout, cpt_compact_reps) - 16usize];
    ["Offset of field: slurm_step_layout::front_end"]
        [::std::mem::offset_of!(slurm_step_layout, front_end) - 24usize];
    ["Offset of field: slurm_step_layout::alias_addrs"]
        [::std::mem::offset_of!(slurm_step_layout, alias_addrs) - 32usize];
    ["Offset of field: slurm_step_layout::node_cnt"]
        [::std::mem::offset_of!(slurm_step_layout, node_cnt) - 40usize];
    ["Offset of field: slurm_step_layout::node_list"]
        [::std::mem::offset_of!(slurm_step_layout, node_list) - 48usize];
    ["Offset of field: slurm_step_layout::plane_size"]
        [::std::mem::offset_of!(slurm_step_layout, plane_size) - 56usize];
    ["Offset of field: slurm_step_layout::start_protocol_ver"]
        [::std::mem::offset_of!(slurm_step_layout, start_protocol_ver) - 58usize];
    ["Offset of field: slurm_step_layout::tasks"]
        [::std::mem::offset_of!(slurm_step_layout, tasks) - 64usize];
    ["Offset of field: slurm_step_layout::task_cnt"]
        [::std::mem::offset_of!(slurm_step_layout, task_cnt) - 72usize];
    ["Offset of field: slurm_step_layout::task_dist"]
        [::std::mem::offset_of!(slurm_step_layout, task_dist) - 76usize];
    ["Offset of field: slurm_step_layout::tids"]
        [::std::mem::offset_of!(slurm_step_layout, tids) - 80usize];
};
pub type slurm_step_layout_t = slurm_step_layout;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct slurm_step_id_msg {
    pub sluid: sluid_t,
    pub job_id: u32,
    pub step_het_comp: u32,
    pub step_id: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of slurm_step_id_msg"][::std::mem::size_of::<slurm_step_id_msg>() - 24usize];
    ["Alignment of slurm_step_id_msg"][::std::mem::align_of::<slurm_step_id_msg>() - 8usize];
    ["Offset of field: slurm_step_id_msg::sluid"]
        [::std::mem::offset_of!(slurm_step_id_msg, sluid) - 0usize];
    ["Offset of field: slurm_step_id_msg::job_id"]
        [::std::mem::offset_of!(slurm_step_id_msg, job_id) - 8usize];
    ["Offset of field: slurm_step_id_msg::step_het_comp"]
        [::std::mem::offset_of!(slurm_step_id_msg, step_het_comp) - 12usize];
    ["Offset of field: slurm_step_id_msg::step_id"]
        [::std::mem::offset_of!(slurm_step_id_msg, step_id) - 16usize];
};
pub type slurm_step_id_t = slurm_step_id_msg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct slurm_step_io_fds {
    pub input: slurm_step_io_fds__bindgen_ty_1,
    pub out: slurm_step_io_fds__bindgen_ty_1,
    pub err: slurm_step_io_fds__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct slurm_step_io_fds__bindgen_ty_1 {
    pub fd: ::std::os::raw::c_int,
    pub taskid: u32,
    pub nodeid: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of slurm_step_io_fds__bindgen_ty_1"]
        [::std::mem::size_of::<slurm_step_io_fds__bindgen_ty_1>() - 12usize];
    ["Alignment of slurm_step_io_fds__bindgen_ty_1"]
        [::std::mem::align_of::<slurm_step_io_fds__bindgen_ty_1>() - 4usize];
    ["Offset of field: slurm_step_io_fds__bindgen_ty_1::fd"]
        [::std::mem::offset_of!(slurm_step_io_fds__bindgen_ty_1, fd) - 0usize];
    ["Offset of field: slurm_step_io_fds__bindgen_ty_1::taskid"]
        [::std::mem::offset_of!(slurm_step_io_fds__bindgen_ty_1, taskid) - 4usize];
    ["Offset of field: slurm_step_io_fds__bindgen_ty_1::nodeid"]
        [::std::mem::offset_of!(slurm_step_io_fds__bindgen_ty_1, nodeid) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of slurm_step_io_fds"][::std::mem::size_of::<slurm_step_io_fds>() - 36usize];
    ["Alignment of slurm_step_io_fds"][::std::mem::align_of::<slurm_step_io_fds>() - 4usize];
    ["Offset of field: slurm_step_io_fds::input"]
        [::std::mem::offset_of!(slurm_step_io_fds, input) - 0usize];
    ["Offset of field: slurm_step_io_fds::out"]
        [::std::mem::offset_of!(slurm_step_io_fds, out) - 12usize];
    ["Offset of field: slurm_step_io_fds::err"]
        [::std::mem::offset_of!(slurm_step_io_fds, err) - 24usize];
};
pub type slurm_step_io_fds_t = slurm_step_io_fds;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct launch_tasks_response_msg {
    pub return_code: u32,
    pub node_name: *mut ::std::os::raw::c_char,
    pub srun_node_id: u32,
    pub count_of_pids: u32,
    pub local_pids: *mut u32,
    pub step_id: slurm_step_id_t,
    pub task_ids: *mut u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of launch_tasks_response_msg"]
        [::std::mem::size_of::<launch_tasks_response_msg>() - 64usize];
    ["Alignment of launch_tasks_response_msg"]
        [::std::mem::align_of::<launch_tasks_response_msg>() - 8usize];
    ["Offset of field: launch_tasks_response_msg::return_code"]
        [::std::mem::offset_of!(launch_tasks_response_msg, return_code) - 0usize];
    ["Offset of field: launch_tasks_response_msg::node_name"]
        [::std::mem::offset_of!(launch_tasks_response_msg, node_name) - 8usize];
    ["Offset of field: launch_tasks_response_msg::srun_node_id"]
        [::std::mem::offset_of!(launch_tasks_response_msg, srun_node_id) - 16usize];
    ["Offset of field: launch_tasks_response_msg::count_of_pids"]
        [::std::mem::offset_of!(launch_tasks_response_msg, count_of_pids) - 20usize];
    ["Offset of field: launch_tasks_response_msg::local_pids"]
        [::std::mem::offset_of!(launch_tasks_response_msg, local_pids) - 24usize];
    ["Offset of field: launch_tasks_response_msg::step_id"]
        [::std::mem::offset_of!(launch_tasks_response_msg, step_id) - 32usize];
    ["Offset of field: launch_tasks_response_msg::task_ids"]
        [::std::mem::offset_of!(launch_tasks_response_msg, task_ids) - 56usize];
};
pub type launch_tasks_response_msg_t = launch_tasks_response_msg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct task_ext_msg {
    pub num_tasks: u32,
    pub task_id_list: *mut u32,
    pub return_code: u32,
    pub step_id: slurm_step_id_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of task_ext_msg"][::std::mem::size_of::<task_ext_msg>() - 48usize];
    ["Alignment of task_ext_msg"][::std::mem::align_of::<task_ext_msg>() - 8usize];
    ["Offset of field: task_ext_msg::num_tasks"]
        [::std::mem::offset_of!(task_ext_msg, num_tasks) - 0usize];
    ["Offset of field: task_ext_msg::task_id_list"]
        [::std::mem::offset_of!(task_ext_msg, task_id_list) - 8usize];
    ["Offset of field: task_ext_msg::return_code"]
        [::std::mem::offset_of!(task_ext_msg, return_code) - 16usize];
    ["Offset of field: task_ext_msg::step_id"]
        [::std::mem::offset_of!(task_ext_msg, step_id) - 24usize];
};
pub type task_exit_msg_t = task_ext_msg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct net_forward_msg_t {
    pub job_id: u32,
    pub flags: u32,
    pub port: u16,
    pub target: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of net_forward_msg_t"][::std::mem::size_of::<net_forward_msg_t>() - 24usize];
    ["Alignment of net_forward_msg_t"][::std::mem::align_of::<net_forward_msg_t>() - 8usize];
    ["Offset of field: net_forward_msg_t::job_id"]
        [::std::mem::offset_of!(net_forward_msg_t, job_id) - 0usize];
    ["Offset of field: net_forward_msg_t::flags"]
        [::std::mem::offset_of!(net_forward_msg_t, flags) - 4usize];
    ["Offset of field: net_forward_msg_t::port"]
        [::std::mem::offset_of!(net_forward_msg_t, port) - 8usize];
    ["Offset of field: net_forward_msg_t::target"]
        [::std::mem::offset_of!(net_forward_msg_t, target) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct srun_ping_msg {
    pub job_id: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of srun_ping_msg"][::std::mem::size_of::<srun_ping_msg>() - 4usize];
    ["Alignment of srun_ping_msg"][::std::mem::align_of::<srun_ping_msg>() - 4usize];
    ["Offset of field: srun_ping_msg::job_id"]
        [::std::mem::offset_of!(srun_ping_msg, job_id) - 0usize];
};
pub type srun_ping_msg_t = srun_ping_msg;
pub type srun_job_complete_msg_t = slurm_step_id_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct srun_timeout_msg {
    pub step_id: slurm_step_id_t,
    pub timeout: time_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of srun_timeout_msg"][::std::mem::size_of::<srun_timeout_msg>() - 32usize];
    ["Alignment of srun_timeout_msg"][::std::mem::align_of::<srun_timeout_msg>() - 8usize];
    ["Offset of field: srun_timeout_msg::step_id"]
        [::std::mem::offset_of!(srun_timeout_msg, step_id) - 0usize];
    ["Offset of field: srun_timeout_msg::timeout"]
        [::std::mem::offset_of!(srun_timeout_msg, timeout) - 24usize];
};
pub type srun_timeout_msg_t = srun_timeout_msg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct srun_user_msg {
    pub job_id: u32,
    pub msg: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of srun_user_msg"][::std::mem::size_of::<srun_user_msg>() - 16usize];
    ["Alignment of srun_user_msg"][::std::mem::align_of::<srun_user_msg>() - 8usize];
    ["Offset of field: srun_user_msg::job_id"]
        [::std::mem::offset_of!(srun_user_msg, job_id) - 0usize];
    ["Offset of field: srun_user_msg::msg"][::std::mem::offset_of!(srun_user_msg, msg) - 8usize];
};
pub type srun_user_msg_t = srun_user_msg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct srun_node_fail_msg {
    pub nodelist: *mut ::std::os::raw::c_char,
    pub step_id: slurm_step_id_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of srun_node_fail_msg"][::std::mem::size_of::<srun_node_fail_msg>() - 32usize];
    ["Alignment of srun_node_fail_msg"][::std::mem::align_of::<srun_node_fail_msg>() - 8usize];
    ["Offset of field: srun_node_fail_msg::nodelist"]
        [::std::mem::offset_of!(srun_node_fail_msg, nodelist) - 0usize];
    ["Offset of field: srun_node_fail_msg::step_id"]
        [::std::mem::offset_of!(srun_node_fail_msg, step_id) - 8usize];
};
pub type srun_node_fail_msg_t = srun_node_fail_msg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct srun_step_missing_msg {
    pub nodelist: *mut ::std::os::raw::c_char,
    pub step_id: slurm_step_id_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of srun_step_missing_msg"][::std::mem::size_of::<srun_step_missing_msg>() - 32usize];
    ["Alignment of srun_step_missing_msg"]
        [::std::mem::align_of::<srun_step_missing_msg>() - 8usize];
    ["Offset of field: srun_step_missing_msg::nodelist"]
        [::std::mem::offset_of!(srun_step_missing_msg, nodelist) - 0usize];
    ["Offset of field: srun_step_missing_msg::step_id"]
        [::std::mem::offset_of!(srun_step_missing_msg, step_id) - 8usize];
};
pub type srun_step_missing_msg_t = srun_step_missing_msg;
pub const suspend_opts_SUSPEND_JOB: suspend_opts = 0;
pub const suspend_opts_RESUME_JOB: suspend_opts = 1;
pub type suspend_opts = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct suspend_msg {
    pub op: u16,
    pub job_id: u32,
    pub job_id_str: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of suspend_msg"][::std::mem::size_of::<suspend_msg>() - 16usize];
    ["Alignment of suspend_msg"][::std::mem::align_of::<suspend_msg>() - 8usize];
    ["Offset of field: suspend_msg::op"][::std::mem::offset_of!(suspend_msg, op) - 0usize];
    ["Offset of field: suspend_msg::job_id"][::std::mem::offset_of!(suspend_msg, job_id) - 4usize];
    ["Offset of field: suspend_msg::job_id_str"]
        [::std::mem::offset_of!(suspend_msg, job_id_str) - 8usize];
};
pub type suspend_msg_t = suspend_msg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct top_job_msg {
    pub op: u16,
    pub job_id: u32,
    pub job_id_str: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of top_job_msg"][::std::mem::size_of::<top_job_msg>() - 16usize];
    ["Alignment of top_job_msg"][::std::mem::align_of::<top_job_msg>() - 8usize];
    ["Offset of field: top_job_msg::op"][::std::mem::offset_of!(top_job_msg, op) - 0usize];
    ["Offset of field: top_job_msg::job_id"][::std::mem::offset_of!(top_job_msg, job_id) - 4usize];
    ["Offset of field: top_job_msg::job_id_str"]
        [::std::mem::offset_of!(top_job_msg, job_id_str) - 8usize];
};
pub type top_job_msg_t = top_job_msg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct slurm_step_launch_params_t {
    pub alias_list: *mut ::std::os::raw::c_char,
    pub argc: u32,
    pub argv: *mut *mut ::std::os::raw::c_char,
    pub envc: u32,
    pub env: *mut *mut ::std::os::raw::c_char,
    pub container: *mut ::std::os::raw::c_char,
    pub cwd: *mut ::std::os::raw::c_char,
    pub msg_timeout: u32,
    pub ntasks_per_board: u16,
    pub ntasks_per_core: u16,
    pub ntasks_per_tres: u16,
    pub ntasks_per_socket: u16,
    pub buffered_stdio: bool,
    pub labelio: bool,
    pub remote_output_filename: *mut ::std::os::raw::c_char,
    pub remote_error_filename: *mut ::std::os::raw::c_char,
    pub remote_input_filename: *mut ::std::os::raw::c_char,
    pub local_fds: slurm_step_io_fds_t,
    pub multi_prog: bool,
    pub no_alloc: bool,
    pub slurmd_debug: u32,
    pub het_job_node_offset: u32,
    pub het_job_id: u32,
    pub het_job_nnodes: u32,
    pub het_job_ntasks: u32,
    pub het_job_step_cnt: u32,
    pub het_job_task_cnts: *mut u16,
    pub het_job_tids: *mut *mut u32,
    pub het_job_tid_offsets: *mut u32,
    pub het_job_offset: u32,
    pub het_job_task_offset: u32,
    pub het_job_node_list: *mut ::std::os::raw::c_char,
    pub parallel_debug: bool,
    pub profile: u32,
    pub task_prolog: *mut ::std::os::raw::c_char,
    pub task_epilog: *mut ::std::os::raw::c_char,
    pub cpu_bind_type: u16,
    pub cpu_bind: *mut ::std::os::raw::c_char,
    pub cpu_freq_min: u32,
    pub cpu_freq_max: u32,
    pub cpu_freq_gov: u32,
    pub mem_bind_type: u16,
    pub mem_bind: *mut ::std::os::raw::c_char,
    pub accel_bind_type: u16,
    pub max_sockets: u16,
    pub max_cores: u16,
    pub max_threads: u16,
    pub cpus_per_task: u16,
    pub cpt_compact_array: *mut u16,
    pub cpt_compact_cnt: u32,
    pub cpt_compact_reps: *mut u32,
    pub threads_per_core: u16,
    pub task_dist: u32,
    pub tree_width: u16,
    pub preserve_env: bool,
    pub mpi_plugin_name: *mut ::std::os::raw::c_char,
    pub open_mode: u8,
    pub acctg_freq: *mut ::std::os::raw::c_char,
    pub pty: bool,
    pub spank_job_env: *mut *mut ::std::os::raw::c_char,
    pub spank_job_env_size: u32,
    pub tres_bind: *mut ::std::os::raw::c_char,
    pub tres_freq: *mut ::std::os::raw::c_char,
    pub oom_kill_step: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of slurm_step_launch_params_t"]
        [::std::mem::size_of::<slurm_step_launch_params_t>() - 392usize];
    ["Alignment of slurm_step_launch_params_t"]
        [::std::mem::align_of::<slurm_step_launch_params_t>() - 8usize];
    ["Offset of field: slurm_step_launch_params_t::alias_list"]
        [::std::mem::offset_of!(slurm_step_launch_params_t, alias_list) - 0usize];
    ["Offset of field: slurm_step_launch_params_t::argc"]
        [::std::mem::offset_of!(slurm_step_launch_params_t, argc) - 8usize];
    ["Offset of field: slurm_step_launch_params_t::argv"]
        [::std::mem::offset_of!(slurm_step_launch_params_t, argv) - 16usize];
    ["Offset of field: slurm_step_launch_params_t::envc"]
        [::std::mem::offset_of!(slurm_step_launch_params_t, envc) - 24usize];
    ["Offset of field: slurm_step_launch_params_t::env"]
        [::std::mem::offset_of!(slurm_step_launch_params_t, env) - 32usize];
    ["Offset of field: slurm_step_launch_params_t::container"]
        [::std::mem::offset_of!(slurm_step_launch_params_t, container) - 40usize];
    ["Offset of field: slurm_step_launch_params_t::cwd"]
        [::std::mem::offset_of!(slurm_step_launch_params_t, cwd) - 48usize];
    ["Offset of field: slurm_step_launch_params_t::msg_timeout"]
        [::std::mem::offset_of!(slurm_step_launch_params_t, msg_timeout) - 56usize];
    ["Offset of field: slurm_step_launch_params_t::ntasks_per_board"]
        [::std::mem::offset_of!(slurm_step_launch_params_t, ntasks_per_board) - 60usize];
    ["Offset of field: slurm_step_launch_params_t::ntasks_per_core"]
        [::std::mem::offset_of!(slurm_step_launch_params_t, ntasks_per_core) - 62usize];
    ["Offset of field: slurm_step_launch_params_t::ntasks_per_tres"]
        [::std::mem::offset_of!(slurm_step_launch_params_t, ntasks_per_tres) - 64usize];
    ["Offset of field: slurm_step_launch_params_t::ntasks_per_socket"]
        [::std::mem::offset_of!(slurm_step_launch_params_t, ntasks_per_socket) - 66usize];
    ["Offset of field: slurm_step_launch_params_t::buffered_stdio"]
        [::std::mem::offset_of!(slurm_step_launch_params_t, buffered_stdio) - 68usize];
    ["Offset of field: slurm_step_launch_params_t::labelio"]
        [::std::mem::offset_of!(slurm_step_launch_params_t, labelio) - 69usize];
    ["Offset of field: slurm_step_launch_params_t::remote_output_filename"]
        [::std::mem::offset_of!(slurm_step_launch_params_t, remote_output_filename) - 72usize];
    ["Offset of field: slurm_step_launch_params_t::remote_error_filename"]
        [::std::mem::offset_of!(slurm_step_launch_params_t, remote_error_filename) - 80usize];
    ["Offset of field: slurm_step_launch_params_t::remote_input_filename"]
        [::std::mem::offset_of!(slurm_step_launch_params_t, remote_input_filename) - 88usize];
    ["Offset of field: slurm_step_launch_params_t::local_fds"]
        [::std::mem::offset_of!(slurm_step_launch_params_t, local_fds) - 96usize];
    ["Offset of field: slurm_step_launch_params_t::multi_prog"]
        [::std::mem::offset_of!(slurm_step_launch_params_t, multi_prog) - 132usize];
    ["Offset of field: slurm_step_launch_params_t::no_alloc"]
        [::std::mem::offset_of!(slurm_step_launch_params_t, no_alloc) - 133usize];
    ["Offset of field: slurm_step_launch_params_t::slurmd_debug"]
        [::std::mem::offset_of!(slurm_step_launch_params_t, slurmd_debug) - 136usize];
    ["Offset of field: slurm_step_launch_params_t::het_job_node_offset"]
        [::std::mem::offset_of!(slurm_step_launch_params_t, het_job_node_offset) - 140usize];
    ["Offset of field: slurm_step_launch_params_t::het_job_id"]
        [::std::mem::offset_of!(slurm_step_launch_params_t, het_job_id) - 144usize];
    ["Offset of field: slurm_step_launch_params_t::het_job_nnodes"]
        [::std::mem::offset_of!(slurm_step_launch_params_t, het_job_nnodes) - 148usize];
    ["Offset of field: slurm_step_launch_params_t::het_job_ntasks"]
        [::std::mem::offset_of!(slurm_step_launch_params_t, het_job_ntasks) - 152usize];
    ["Offset of field: slurm_step_launch_params_t::het_job_step_cnt"]
        [::std::mem::offset_of!(slurm_step_launch_params_t, het_job_step_cnt) - 156usize];
    ["Offset of field: slurm_step_launch_params_t::het_job_task_cnts"]
        [::std::mem::offset_of!(slurm_step_launch_params_t, het_job_task_cnts) - 160usize];
    ["Offset of field: slurm_step_launch_params_t::het_job_tids"]
        [::std::mem::offset_of!(slurm_step_launch_params_t, het_job_tids) - 168usize];
    ["Offset of field: slurm_step_launch_params_t::het_job_tid_offsets"]
        [::std::mem::offset_of!(slurm_step_launch_params_t, het_job_tid_offsets) - 176usize];
    ["Offset of field: slurm_step_launch_params_t::het_job_offset"]
        [::std::mem::offset_of!(slurm_step_launch_params_t, het_job_offset) - 184usize];
    ["Offset of field: slurm_step_launch_params_t::het_job_task_offset"]
        [::std::mem::offset_of!(slurm_step_launch_params_t, het_job_task_offset) - 188usize];
    ["Offset of field: slurm_step_launch_params_t::het_job_node_list"]
        [::std::mem::offset_of!(slurm_step_launch_params_t, het_job_node_list) - 192usize];
    ["Offset of field: slurm_step_launch_params_t::parallel_debug"]
        [::std::mem::offset_of!(slurm_step_launch_params_t, parallel_debug) - 200usize];
    ["Offset of field: slurm_step_launch_params_t::profile"]
        [::std::mem::offset_of!(slurm_step_launch_params_t, profile) - 204usize];
    ["Offset of field: slurm_step_launch_params_t::task_prolog"]
        [::std::mem::offset_of!(slurm_step_launch_params_t, task_prolog) - 208usize];
    ["Offset of field: slurm_step_launch_params_t::task_epilog"]
        [::std::mem::offset_of!(slurm_step_launch_params_t, task_epilog) - 216usize];
    ["Offset of field: slurm_step_launch_params_t::cpu_bind_type"]
        [::std::mem::offset_of!(slurm_step_launch_params_t, cpu_bind_type) - 224usize];
    ["Offset of field: slurm_step_launch_params_t::cpu_bind"]
        [::std::mem::offset_of!(slurm_step_launch_params_t, cpu_bind) - 232usize];
    ["Offset of field: slurm_step_launch_params_t::cpu_freq_min"]
        [::std::mem::offset_of!(slurm_step_launch_params_t, cpu_freq_min) - 240usize];
    ["Offset of field: slurm_step_launch_params_t::cpu_freq_max"]
        [::std::mem::offset_of!(slurm_step_launch_params_t, cpu_freq_max) - 244usize];
    ["Offset of field: slurm_step_launch_params_t::cpu_freq_gov"]
        [::std::mem::offset_of!(slurm_step_launch_params_t, cpu_freq_gov) - 248usize];
    ["Offset of field: slurm_step_launch_params_t::mem_bind_type"]
        [::std::mem::offset_of!(slurm_step_launch_params_t, mem_bind_type) - 252usize];
    ["Offset of field: slurm_step_launch_params_t::mem_bind"]
        [::std::mem::offset_of!(slurm_step_launch_params_t, mem_bind) - 256usize];
    ["Offset of field: slurm_step_launch_params_t::accel_bind_type"]
        [::std::mem::offset_of!(slurm_step_launch_params_t, accel_bind_type) - 264usize];
    ["Offset of field: slurm_step_launch_params_t::max_sockets"]
        [::std::mem::offset_of!(slurm_step_launch_params_t, max_sockets) - 266usize];
    ["Offset of field: slurm_step_launch_params_t::max_cores"]
        [::std::mem::offset_of!(slurm_step_launch_params_t, max_cores) - 268usize];
    ["Offset of field: slurm_step_launch_params_t::max_threads"]
        [::std::mem::offset_of!(slurm_step_launch_params_t, max_threads) - 270usize];
    ["Offset of field: slurm_step_launch_params_t::cpus_per_task"]
        [::std::mem::offset_of!(slurm_step_launch_params_t, cpus_per_task) - 272usize];
    ["Offset of field: slurm_step_launch_params_t::cpt_compact_array"]
        [::std::mem::offset_of!(slurm_step_launch_params_t, cpt_compact_array) - 280usize];
    ["Offset of field: slurm_step_launch_params_t::cpt_compact_cnt"]
        [::std::mem::offset_of!(slurm_step_launch_params_t, cpt_compact_cnt) - 288usize];
    ["Offset of field: slurm_step_launch_params_t::cpt_compact_reps"]
        [::std::mem::offset_of!(slurm_step_launch_params_t, cpt_compact_reps) - 296usize];
    ["Offset of field: slurm_step_launch_params_t::threads_per_core"]
        [::std::mem::offset_of!(slurm_step_launch_params_t, threads_per_core) - 304usize];
    ["Offset of field: slurm_step_launch_params_t::task_dist"]
        [::std::mem::offset_of!(slurm_step_launch_params_t, task_dist) - 308usize];
    ["Offset of field: slurm_step_launch_params_t::tree_width"]
        [::std::mem::offset_of!(slurm_step_launch_params_t, tree_width) - 312usize];
    ["Offset of field: slurm_step_launch_params_t::preserve_env"]
        [::std::mem::offset_of!(slurm_step_launch_params_t, preserve_env) - 314usize];
    ["Offset of field: slurm_step_launch_params_t::mpi_plugin_name"]
        [::std::mem::offset_of!(slurm_step_launch_params_t, mpi_plugin_name) - 320usize];
    ["Offset of field: slurm_step_launch_params_t::open_mode"]
        [::std::mem::offset_of!(slurm_step_launch_params_t, open_mode) - 328usize];
    ["Offset of field: slurm_step_launch_params_t::acctg_freq"]
        [::std::mem::offset_of!(slurm_step_launch_params_t, acctg_freq) - 336usize];
    ["Offset of field: slurm_step_launch_params_t::pty"]
        [::std::mem::offset_of!(slurm_step_launch_params_t, pty) - 344usize];
    ["Offset of field: slurm_step_launch_params_t::spank_job_env"]
        [::std::mem::offset_of!(slurm_step_launch_params_t, spank_job_env) - 352usize];
    ["Offset of field: slurm_step_launch_params_t::spank_job_env_size"]
        [::std::mem::offset_of!(slurm_step_launch_params_t, spank_job_env_size) - 360usize];
    ["Offset of field: slurm_step_launch_params_t::tres_bind"]
        [::std::mem::offset_of!(slurm_step_launch_params_t, tres_bind) - 368usize];
    ["Offset of field: slurm_step_launch_params_t::tres_freq"]
        [::std::mem::offset_of!(slurm_step_launch_params_t, tres_freq) - 376usize];
    ["Offset of field: slurm_step_launch_params_t::oom_kill_step"]
        [::std::mem::offset_of!(slurm_step_launch_params_t, oom_kill_step) - 384usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct slurm_step_launch_callbacks_t {
    pub step_complete:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut srun_job_complete_msg_t)>,
    pub step_signal: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    pub step_timeout: ::std::option::Option<unsafe extern "C" fn(arg1: *mut srun_timeout_msg_t)>,
    pub task_start:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut launch_tasks_response_msg_t)>,
    pub task_finish: ::std::option::Option<unsafe extern "C" fn(arg1: *mut task_exit_msg_t)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of slurm_step_launch_callbacks_t"]
        [::std::mem::size_of::<slurm_step_launch_callbacks_t>() - 40usize];
    ["Alignment of slurm_step_launch_callbacks_t"]
        [::std::mem::align_of::<slurm_step_launch_callbacks_t>() - 8usize];
    ["Offset of field: slurm_step_launch_callbacks_t::step_complete"]
        [::std::mem::offset_of!(slurm_step_launch_callbacks_t, step_complete) - 0usize];
    ["Offset of field: slurm_step_launch_callbacks_t::step_signal"]
        [::std::mem::offset_of!(slurm_step_launch_callbacks_t, step_signal) - 8usize];
    ["Offset of field: slurm_step_launch_callbacks_t::step_timeout"]
        [::std::mem::offset_of!(slurm_step_launch_callbacks_t, step_timeout) - 16usize];
    ["Offset of field: slurm_step_launch_callbacks_t::task_start"]
        [::std::mem::offset_of!(slurm_step_launch_callbacks_t, task_start) - 24usize];
    ["Offset of field: slurm_step_launch_callbacks_t::task_finish"]
        [::std::mem::offset_of!(slurm_step_launch_callbacks_t, task_finish) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct slurm_allocation_callbacks_t {
    pub job_complete:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut srun_job_complete_msg_t)>,
    pub timeout: ::std::option::Option<unsafe extern "C" fn(arg1: *mut srun_timeout_msg_t)>,
    pub user_msg: ::std::option::Option<unsafe extern "C" fn(arg1: *mut srun_user_msg_t)>,
    pub node_fail: ::std::option::Option<unsafe extern "C" fn(arg1: *mut srun_node_fail_msg_t)>,
    pub job_suspend: ::std::option::Option<unsafe extern "C" fn(arg1: *mut suspend_msg_t)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of slurm_allocation_callbacks_t"]
        [::std::mem::size_of::<slurm_allocation_callbacks_t>() - 40usize];
    ["Alignment of slurm_allocation_callbacks_t"]
        [::std::mem::align_of::<slurm_allocation_callbacks_t>() - 8usize];
    ["Offset of field: slurm_allocation_callbacks_t::job_complete"]
        [::std::mem::offset_of!(slurm_allocation_callbacks_t, job_complete) - 0usize];
    ["Offset of field: slurm_allocation_callbacks_t::timeout"]
        [::std::mem::offset_of!(slurm_allocation_callbacks_t, timeout) - 8usize];
    ["Offset of field: slurm_allocation_callbacks_t::user_msg"]
        [::std::mem::offset_of!(slurm_allocation_callbacks_t, user_msg) - 16usize];
    ["Offset of field: slurm_allocation_callbacks_t::node_fail"]
        [::std::mem::offset_of!(slurm_allocation_callbacks_t, node_fail) - 24usize];
    ["Offset of field: slurm_allocation_callbacks_t::job_suspend"]
        [::std::mem::offset_of!(slurm_allocation_callbacks_t, job_suspend) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct slurm_trigger_callbacks_t {
    pub acct_full: ::std::option::Option<unsafe extern "C" fn()>,
    pub dbd_fail: ::std::option::Option<unsafe extern "C" fn()>,
    pub dbd_resumed: ::std::option::Option<unsafe extern "C" fn()>,
    pub db_fail: ::std::option::Option<unsafe extern "C" fn()>,
    pub db_resumed: ::std::option::Option<unsafe extern "C" fn()>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of slurm_trigger_callbacks_t"]
        [::std::mem::size_of::<slurm_trigger_callbacks_t>() - 40usize];
    ["Alignment of slurm_trigger_callbacks_t"]
        [::std::mem::align_of::<slurm_trigger_callbacks_t>() - 8usize];
    ["Offset of field: slurm_trigger_callbacks_t::acct_full"]
        [::std::mem::offset_of!(slurm_trigger_callbacks_t, acct_full) - 0usize];
    ["Offset of field: slurm_trigger_callbacks_t::dbd_fail"]
        [::std::mem::offset_of!(slurm_trigger_callbacks_t, dbd_fail) - 8usize];
    ["Offset of field: slurm_trigger_callbacks_t::dbd_resumed"]
        [::std::mem::offset_of!(slurm_trigger_callbacks_t, dbd_resumed) - 16usize];
    ["Offset of field: slurm_trigger_callbacks_t::db_fail"]
        [::std::mem::offset_of!(slurm_trigger_callbacks_t, db_fail) - 24usize];
    ["Offset of field: slurm_trigger_callbacks_t::db_resumed"]
        [::std::mem::offset_of!(slurm_trigger_callbacks_t, db_resumed) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct job_step_info_t {
    pub array_job_id: u32,
    pub array_task_id: u32,
    pub cluster: *mut ::std::os::raw::c_char,
    pub container: *mut ::std::os::raw::c_char,
    pub container_id: *mut ::std::os::raw::c_char,
    pub cpu_freq_min: u32,
    pub cpu_freq_max: u32,
    pub cpu_freq_gov: u32,
    pub cpus_per_tres: *mut ::std::os::raw::c_char,
    pub mem_per_tres: *mut ::std::os::raw::c_char,
    pub name: *mut ::std::os::raw::c_char,
    pub network: *mut ::std::os::raw::c_char,
    pub nodes: *mut ::std::os::raw::c_char,
    pub node_inx: *mut i32,
    pub num_cpus: u32,
    pub num_tasks: u32,
    pub partition: *mut ::std::os::raw::c_char,
    pub resv_ports: *mut ::std::os::raw::c_char,
    pub run_time: time_t,
    pub srun_host: *mut ::std::os::raw::c_char,
    pub srun_pid: u32,
    pub start_time: time_t,
    pub start_protocol_ver: u16,
    pub state: u32,
    pub step_id: slurm_step_id_t,
    pub submit_line: *mut ::std::os::raw::c_char,
    pub task_dist: u32,
    pub time_limit: u32,
    pub tres_alloc_str: *mut ::std::os::raw::c_char,
    pub tres_bind: *mut ::std::os::raw::c_char,
    pub tres_freq: *mut ::std::os::raw::c_char,
    pub tres_per_step: *mut ::std::os::raw::c_char,
    pub tres_per_node: *mut ::std::os::raw::c_char,
    pub tres_per_socket: *mut ::std::os::raw::c_char,
    pub tres_per_task: *mut ::std::os::raw::c_char,
    pub user_id: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of job_step_info_t"][::std::mem::size_of::<job_step_info_t>() - 264usize];
    ["Alignment of job_step_info_t"][::std::mem::align_of::<job_step_info_t>() - 8usize];
    ["Offset of field: job_step_info_t::array_job_id"]
        [::std::mem::offset_of!(job_step_info_t, array_job_id) - 0usize];
    ["Offset of field: job_step_info_t::array_task_id"]
        [::std::mem::offset_of!(job_step_info_t, array_task_id) - 4usize];
    ["Offset of field: job_step_info_t::cluster"]
        [::std::mem::offset_of!(job_step_info_t, cluster) - 8usize];
    ["Offset of field: job_step_info_t::container"]
        [::std::mem::offset_of!(job_step_info_t, container) - 16usize];
    ["Offset of field: job_step_info_t::container_id"]
        [::std::mem::offset_of!(job_step_info_t, container_id) - 24usize];
    ["Offset of field: job_step_info_t::cpu_freq_min"]
        [::std::mem::offset_of!(job_step_info_t, cpu_freq_min) - 32usize];
    ["Offset of field: job_step_info_t::cpu_freq_max"]
        [::std::mem::offset_of!(job_step_info_t, cpu_freq_max) - 36usize];
    ["Offset of field: job_step_info_t::cpu_freq_gov"]
        [::std::mem::offset_of!(job_step_info_t, cpu_freq_gov) - 40usize];
    ["Offset of field: job_step_info_t::cpus_per_tres"]
        [::std::mem::offset_of!(job_step_info_t, cpus_per_tres) - 48usize];
    ["Offset of field: job_step_info_t::mem_per_tres"]
        [::std::mem::offset_of!(job_step_info_t, mem_per_tres) - 56usize];
    ["Offset of field: job_step_info_t::name"]
        [::std::mem::offset_of!(job_step_info_t, name) - 64usize];
    ["Offset of field: job_step_info_t::network"]
        [::std::mem::offset_of!(job_step_info_t, network) - 72usize];
    ["Offset of field: job_step_info_t::nodes"]
        [::std::mem::offset_of!(job_step_info_t, nodes) - 80usize];
    ["Offset of field: job_step_info_t::node_inx"]
        [::std::mem::offset_of!(job_step_info_t, node_inx) - 88usize];
    ["Offset of field: job_step_info_t::num_cpus"]
        [::std::mem::offset_of!(job_step_info_t, num_cpus) - 96usize];
    ["Offset of field: job_step_info_t::num_tasks"]
        [::std::mem::offset_of!(job_step_info_t, num_tasks) - 100usize];
    ["Offset of field: job_step_info_t::partition"]
        [::std::mem::offset_of!(job_step_info_t, partition) - 104usize];
    ["Offset of field: job_step_info_t::resv_ports"]
        [::std::mem::offset_of!(job_step_info_t, resv_ports) - 112usize];
    ["Offset of field: job_step_info_t::run_time"]
        [::std::mem::offset_of!(job_step_info_t, run_time) - 120usize];
    ["Offset of field: job_step_info_t::srun_host"]
        [::std::mem::offset_of!(job_step_info_t, srun_host) - 128usize];
    ["Offset of field: job_step_info_t::srun_pid"]
        [::std::mem::offset_of!(job_step_info_t, srun_pid) - 136usize];
    ["Offset of field: job_step_info_t::start_time"]
        [::std::mem::offset_of!(job_step_info_t, start_time) - 144usize];
    ["Offset of field: job_step_info_t::start_protocol_ver"]
        [::std::mem::offset_of!(job_step_info_t, start_protocol_ver) - 152usize];
    ["Offset of field: job_step_info_t::state"]
        [::std::mem::offset_of!(job_step_info_t, state) - 156usize];
    ["Offset of field: job_step_info_t::step_id"]
        [::std::mem::offset_of!(job_step_info_t, step_id) - 160usize];
    ["Offset of field: job_step_info_t::submit_line"]
        [::std::mem::offset_of!(job_step_info_t, submit_line) - 184usize];
    ["Offset of field: job_step_info_t::task_dist"]
        [::std::mem::offset_of!(job_step_info_t, task_dist) - 192usize];
    ["Offset of field: job_step_info_t::time_limit"]
        [::std::mem::offset_of!(job_step_info_t, time_limit) - 196usize];
    ["Offset of field: job_step_info_t::tres_alloc_str"]
        [::std::mem::offset_of!(job_step_info_t, tres_alloc_str) - 200usize];
    ["Offset of field: job_step_info_t::tres_bind"]
        [::std::mem::offset_of!(job_step_info_t, tres_bind) - 208usize];
    ["Offset of field: job_step_info_t::tres_freq"]
        [::std::mem::offset_of!(job_step_info_t, tres_freq) - 216usize];
    ["Offset of field: job_step_info_t::tres_per_step"]
        [::std::mem::offset_of!(job_step_info_t, tres_per_step) - 224usize];
    ["Offset of field: job_step_info_t::tres_per_node"]
        [::std::mem::offset_of!(job_step_info_t, tres_per_node) - 232usize];
    ["Offset of field: job_step_info_t::tres_per_socket"]
        [::std::mem::offset_of!(job_step_info_t, tres_per_socket) - 240usize];
    ["Offset of field: job_step_info_t::tres_per_task"]
        [::std::mem::offset_of!(job_step_info_t, tres_per_task) - 248usize];
    ["Offset of field: job_step_info_t::user_id"]
        [::std::mem::offset_of!(job_step_info_t, user_id) - 256usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stepmgr_job_info_t {
    pub job_id: u32,
    pub stepmgr: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of stepmgr_job_info_t"][::std::mem::size_of::<stepmgr_job_info_t>() - 16usize];
    ["Alignment of stepmgr_job_info_t"][::std::mem::align_of::<stepmgr_job_info_t>() - 8usize];
    ["Offset of field: stepmgr_job_info_t::job_id"]
        [::std::mem::offset_of!(stepmgr_job_info_t, job_id) - 0usize];
    ["Offset of field: stepmgr_job_info_t::stepmgr"]
        [::std::mem::offset_of!(stepmgr_job_info_t, stepmgr) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct job_step_info_response_msg {
    pub last_update: time_t,
    pub job_step_count: u32,
    pub job_steps: *mut job_step_info_t,
    pub stepmgr_jobs: *mut list_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of job_step_info_response_msg"]
        [::std::mem::size_of::<job_step_info_response_msg>() - 32usize];
    ["Alignment of job_step_info_response_msg"]
        [::std::mem::align_of::<job_step_info_response_msg>() - 8usize];
    ["Offset of field: job_step_info_response_msg::last_update"]
        [::std::mem::offset_of!(job_step_info_response_msg, last_update) - 0usize];
    ["Offset of field: job_step_info_response_msg::job_step_count"]
        [::std::mem::offset_of!(job_step_info_response_msg, job_step_count) - 8usize];
    ["Offset of field: job_step_info_response_msg::job_steps"]
        [::std::mem::offset_of!(job_step_info_response_msg, job_steps) - 16usize];
    ["Offset of field: job_step_info_response_msg::stepmgr_jobs"]
        [::std::mem::offset_of!(job_step_info_response_msg, stepmgr_jobs) - 24usize];
};
pub type job_step_info_response_msg_t = job_step_info_response_msg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct job_step_pids_t {
    pub node_name: *mut ::std::os::raw::c_char,
    pub pid: *mut u32,
    pub pid_cnt: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of job_step_pids_t"][::std::mem::size_of::<job_step_pids_t>() - 24usize];
    ["Alignment of job_step_pids_t"][::std::mem::align_of::<job_step_pids_t>() - 8usize];
    ["Offset of field: job_step_pids_t::node_name"]
        [::std::mem::offset_of!(job_step_pids_t, node_name) - 0usize];
    ["Offset of field: job_step_pids_t::pid"]
        [::std::mem::offset_of!(job_step_pids_t, pid) - 8usize];
    ["Offset of field: job_step_pids_t::pid_cnt"]
        [::std::mem::offset_of!(job_step_pids_t, pid_cnt) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct job_step_pids_response_msg_t {
    pub pid_list: *mut list_t,
    pub step_id: slurm_step_id_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of job_step_pids_response_msg_t"]
        [::std::mem::size_of::<job_step_pids_response_msg_t>() - 32usize];
    ["Alignment of job_step_pids_response_msg_t"]
        [::std::mem::align_of::<job_step_pids_response_msg_t>() - 8usize];
    ["Offset of field: job_step_pids_response_msg_t::pid_list"]
        [::std::mem::offset_of!(job_step_pids_response_msg_t, pid_list) - 0usize];
    ["Offset of field: job_step_pids_response_msg_t::step_id"]
        [::std::mem::offset_of!(job_step_pids_response_msg_t, step_id) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct job_step_stat_t {
    pub jobacct: *mut jobacctinfo_t,
    pub num_tasks: u32,
    pub return_code: u32,
    pub step_pids: *mut job_step_pids_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of job_step_stat_t"][::std::mem::size_of::<job_step_stat_t>() - 24usize];
    ["Alignment of job_step_stat_t"][::std::mem::align_of::<job_step_stat_t>() - 8usize];
    ["Offset of field: job_step_stat_t::jobacct"]
        [::std::mem::offset_of!(job_step_stat_t, jobacct) - 0usize];
    ["Offset of field: job_step_stat_t::num_tasks"]
        [::std::mem::offset_of!(job_step_stat_t, num_tasks) - 8usize];
    ["Offset of field: job_step_stat_t::return_code"]
        [::std::mem::offset_of!(job_step_stat_t, return_code) - 12usize];
    ["Offset of field: job_step_stat_t::step_pids"]
        [::std::mem::offset_of!(job_step_stat_t, step_pids) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct job_step_stat_response_msg_t {
    pub stats_list: *mut list_t,
    pub step_id: slurm_step_id_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of job_step_stat_response_msg_t"]
        [::std::mem::size_of::<job_step_stat_response_msg_t>() - 32usize];
    ["Alignment of job_step_stat_response_msg_t"]
        [::std::mem::align_of::<job_step_stat_response_msg_t>() - 8usize];
    ["Offset of field: job_step_stat_response_msg_t::stats_list"]
        [::std::mem::offset_of!(job_step_stat_response_msg_t, stats_list) - 0usize];
    ["Offset of field: job_step_stat_response_msg_t::step_id"]
        [::std::mem::offset_of!(job_step_stat_response_msg_t, step_id) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct node_info {
    pub arch: *mut ::std::os::raw::c_char,
    pub bcast_address: *mut ::std::os::raw::c_char,
    pub boards: u16,
    pub boot_time: time_t,
    pub cluster_name: *mut ::std::os::raw::c_char,
    pub cores: u16,
    pub core_spec_cnt: u16,
    pub cpu_bind: u32,
    pub cpu_load: u32,
    pub free_mem: u64,
    pub cpus: u16,
    pub cpus_efctv: u16,
    pub cpu_spec_list: *mut ::std::os::raw::c_char,
    pub energy: *mut acct_gather_energy_t,
    pub extra: *mut ::std::os::raw::c_char,
    pub features: *mut ::std::os::raw::c_char,
    pub features_act: *mut ::std::os::raw::c_char,
    pub gres: *mut ::std::os::raw::c_char,
    pub gres_drain: *mut ::std::os::raw::c_char,
    pub gres_used: *mut ::std::os::raw::c_char,
    pub instance_id: *mut ::std::os::raw::c_char,
    pub instance_type: *mut ::std::os::raw::c_char,
    pub last_busy: time_t,
    pub mcs_label: *mut ::std::os::raw::c_char,
    pub mem_spec_limit: u64,
    pub name: *mut ::std::os::raw::c_char,
    pub next_state: u32,
    pub node_addr: *mut ::std::os::raw::c_char,
    pub node_hostname: *mut ::std::os::raw::c_char,
    pub node_state: u32,
    pub os: *mut ::std::os::raw::c_char,
    pub owner: u32,
    pub partitions: *mut ::std::os::raw::c_char,
    pub port: u16,
    pub real_memory: u64,
    pub res_cores_per_gpu: u16,
    pub gpu_spec: *mut ::std::os::raw::c_char,
    pub comment: *mut ::std::os::raw::c_char,
    pub reason: *mut ::std::os::raw::c_char,
    pub reason_time: time_t,
    pub reason_uid: u32,
    pub resume_after: time_t,
    pub resv_name: *mut ::std::os::raw::c_char,
    pub select_nodeinfo: *mut dynamic_plugin_data_t,
    pub slurmd_start_time: time_t,
    pub sockets: u16,
    pub threads: u16,
    pub tmp_disk: u32,
    pub weight: u32,
    pub tres_fmt_str: *mut ::std::os::raw::c_char,
    pub version: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of node_info"][::std::mem::size_of::<node_info>() - 368usize];
    ["Alignment of node_info"][::std::mem::align_of::<node_info>() - 8usize];
    ["Offset of field: node_info::arch"][::std::mem::offset_of!(node_info, arch) - 0usize];
    ["Offset of field: node_info::bcast_address"]
        [::std::mem::offset_of!(node_info, bcast_address) - 8usize];
    ["Offset of field: node_info::boards"][::std::mem::offset_of!(node_info, boards) - 16usize];
    ["Offset of field: node_info::boot_time"]
        [::std::mem::offset_of!(node_info, boot_time) - 24usize];
    ["Offset of field: node_info::cluster_name"]
        [::std::mem::offset_of!(node_info, cluster_name) - 32usize];
    ["Offset of field: node_info::cores"][::std::mem::offset_of!(node_info, cores) - 40usize];
    ["Offset of field: node_info::core_spec_cnt"]
        [::std::mem::offset_of!(node_info, core_spec_cnt) - 42usize];
    ["Offset of field: node_info::cpu_bind"][::std::mem::offset_of!(node_info, cpu_bind) - 44usize];
    ["Offset of field: node_info::cpu_load"][::std::mem::offset_of!(node_info, cpu_load) - 48usize];
    ["Offset of field: node_info::free_mem"][::std::mem::offset_of!(node_info, free_mem) - 56usize];
    ["Offset of field: node_info::cpus"][::std::mem::offset_of!(node_info, cpus) - 64usize];
    ["Offset of field: node_info::cpus_efctv"]
        [::std::mem::offset_of!(node_info, cpus_efctv) - 66usize];
    ["Offset of field: node_info::cpu_spec_list"]
        [::std::mem::offset_of!(node_info, cpu_spec_list) - 72usize];
    ["Offset of field: node_info::energy"][::std::mem::offset_of!(node_info, energy) - 80usize];
    ["Offset of field: node_info::extra"][::std::mem::offset_of!(node_info, extra) - 88usize];
    ["Offset of field: node_info::features"][::std::mem::offset_of!(node_info, features) - 96usize];
    ["Offset of field: node_info::features_act"]
        [::std::mem::offset_of!(node_info, features_act) - 104usize];
    ["Offset of field: node_info::gres"][::std::mem::offset_of!(node_info, gres) - 112usize];
    ["Offset of field: node_info::gres_drain"]
        [::std::mem::offset_of!(node_info, gres_drain) - 120usize];
    ["Offset of field: node_info::gres_used"]
        [::std::mem::offset_of!(node_info, gres_used) - 128usize];
    ["Offset of field: node_info::instance_id"]
        [::std::mem::offset_of!(node_info, instance_id) - 136usize];
    ["Offset of field: node_info::instance_type"]
        [::std::mem::offset_of!(node_info, instance_type) - 144usize];
    ["Offset of field: node_info::last_busy"]
        [::std::mem::offset_of!(node_info, last_busy) - 152usize];
    ["Offset of field: node_info::mcs_label"]
        [::std::mem::offset_of!(node_info, mcs_label) - 160usize];
    ["Offset of field: node_info::mem_spec_limit"]
        [::std::mem::offset_of!(node_info, mem_spec_limit) - 168usize];
    ["Offset of field: node_info::name"][::std::mem::offset_of!(node_info, name) - 176usize];
    ["Offset of field: node_info::next_state"]
        [::std::mem::offset_of!(node_info, next_state) - 184usize];
    ["Offset of field: node_info::node_addr"]
        [::std::mem::offset_of!(node_info, node_addr) - 192usize];
    ["Offset of field: node_info::node_hostname"]
        [::std::mem::offset_of!(node_info, node_hostname) - 200usize];
    ["Offset of field: node_info::node_state"]
        [::std::mem::offset_of!(node_info, node_state) - 208usize];
    ["Offset of field: node_info::os"][::std::mem::offset_of!(node_info, os) - 216usize];
    ["Offset of field: node_info::owner"][::std::mem::offset_of!(node_info, owner) - 224usize];
    ["Offset of field: node_info::partitions"]
        [::std::mem::offset_of!(node_info, partitions) - 232usize];
    ["Offset of field: node_info::port"][::std::mem::offset_of!(node_info, port) - 240usize];
    ["Offset of field: node_info::real_memory"]
        [::std::mem::offset_of!(node_info, real_memory) - 248usize];
    ["Offset of field: node_info::res_cores_per_gpu"]
        [::std::mem::offset_of!(node_info, res_cores_per_gpu) - 256usize];
    ["Offset of field: node_info::gpu_spec"]
        [::std::mem::offset_of!(node_info, gpu_spec) - 264usize];
    ["Offset of field: node_info::comment"][::std::mem::offset_of!(node_info, comment) - 272usize];
    ["Offset of field: node_info::reason"][::std::mem::offset_of!(node_info, reason) - 280usize];
    ["Offset of field: node_info::reason_time"]
        [::std::mem::offset_of!(node_info, reason_time) - 288usize];
    ["Offset of field: node_info::reason_uid"]
        [::std::mem::offset_of!(node_info, reason_uid) - 296usize];
    ["Offset of field: node_info::resume_after"]
        [::std::mem::offset_of!(node_info, resume_after) - 304usize];
    ["Offset of field: node_info::resv_name"]
        [::std::mem::offset_of!(node_info, resv_name) - 312usize];
    ["Offset of field: node_info::select_nodeinfo"]
        [::std::mem::offset_of!(node_info, select_nodeinfo) - 320usize];
    ["Offset of field: node_info::slurmd_start_time"]
        [::std::mem::offset_of!(node_info, slurmd_start_time) - 328usize];
    ["Offset of field: node_info::sockets"][::std::mem::offset_of!(node_info, sockets) - 336usize];
    ["Offset of field: node_info::threads"][::std::mem::offset_of!(node_info, threads) - 338usize];
    ["Offset of field: node_info::tmp_disk"]
        [::std::mem::offset_of!(node_info, tmp_disk) - 340usize];
    ["Offset of field: node_info::weight"][::std::mem::offset_of!(node_info, weight) - 344usize];
    ["Offset of field: node_info::tres_fmt_str"]
        [::std::mem::offset_of!(node_info, tres_fmt_str) - 352usize];
    ["Offset of field: node_info::version"][::std::mem::offset_of!(node_info, version) - 360usize];
};
pub type node_info_t = node_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct node_info_msg {
    pub last_update: time_t,
    pub record_count: u32,
    pub node_array: *mut node_info_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of node_info_msg"][::std::mem::size_of::<node_info_msg>() - 24usize];
    ["Alignment of node_info_msg"][::std::mem::align_of::<node_info_msg>() - 8usize];
    ["Offset of field: node_info_msg::last_update"]
        [::std::mem::offset_of!(node_info_msg, last_update) - 0usize];
    ["Offset of field: node_info_msg::record_count"]
        [::std::mem::offset_of!(node_info_msg, record_count) - 8usize];
    ["Offset of field: node_info_msg::node_array"]
        [::std::mem::offset_of!(node_info_msg, node_array) - 16usize];
};
pub type node_info_msg_t = node_info_msg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct front_end_info {
    pub allow_groups: *mut ::std::os::raw::c_char,
    pub allow_users: *mut ::std::os::raw::c_char,
    pub boot_time: time_t,
    pub deny_groups: *mut ::std::os::raw::c_char,
    pub deny_users: *mut ::std::os::raw::c_char,
    pub name: *mut ::std::os::raw::c_char,
    pub node_state: u32,
    pub reason: *mut ::std::os::raw::c_char,
    pub reason_time: time_t,
    pub reason_uid: u32,
    pub slurmd_start_time: time_t,
    pub version: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of front_end_info"][::std::mem::size_of::<front_end_info>() - 96usize];
    ["Alignment of front_end_info"][::std::mem::align_of::<front_end_info>() - 8usize];
    ["Offset of field: front_end_info::allow_groups"]
        [::std::mem::offset_of!(front_end_info, allow_groups) - 0usize];
    ["Offset of field: front_end_info::allow_users"]
        [::std::mem::offset_of!(front_end_info, allow_users) - 8usize];
    ["Offset of field: front_end_info::boot_time"]
        [::std::mem::offset_of!(front_end_info, boot_time) - 16usize];
    ["Offset of field: front_end_info::deny_groups"]
        [::std::mem::offset_of!(front_end_info, deny_groups) - 24usize];
    ["Offset of field: front_end_info::deny_users"]
        [::std::mem::offset_of!(front_end_info, deny_users) - 32usize];
    ["Offset of field: front_end_info::name"]
        [::std::mem::offset_of!(front_end_info, name) - 40usize];
    ["Offset of field: front_end_info::node_state"]
        [::std::mem::offset_of!(front_end_info, node_state) - 48usize];
    ["Offset of field: front_end_info::reason"]
        [::std::mem::offset_of!(front_end_info, reason) - 56usize];
    ["Offset of field: front_end_info::reason_time"]
        [::std::mem::offset_of!(front_end_info, reason_time) - 64usize];
    ["Offset of field: front_end_info::reason_uid"]
        [::std::mem::offset_of!(front_end_info, reason_uid) - 72usize];
    ["Offset of field: front_end_info::slurmd_start_time"]
        [::std::mem::offset_of!(front_end_info, slurmd_start_time) - 80usize];
    ["Offset of field: front_end_info::version"]
        [::std::mem::offset_of!(front_end_info, version) - 88usize];
};
pub type front_end_info_t = front_end_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct front_end_info_msg {
    pub last_update: time_t,
    pub record_count: u32,
    pub front_end_array: *mut front_end_info_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of front_end_info_msg"][::std::mem::size_of::<front_end_info_msg>() - 24usize];
    ["Alignment of front_end_info_msg"][::std::mem::align_of::<front_end_info_msg>() - 8usize];
    ["Offset of field: front_end_info_msg::last_update"]
        [::std::mem::offset_of!(front_end_info_msg, last_update) - 0usize];
    ["Offset of field: front_end_info_msg::record_count"]
        [::std::mem::offset_of!(front_end_info_msg, record_count) - 8usize];
    ["Offset of field: front_end_info_msg::front_end_array"]
        [::std::mem::offset_of!(front_end_info_msg, front_end_array) - 16usize];
};
pub type front_end_info_msg_t = front_end_info_msg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct topo_info {
    pub level: u16,
    pub link_speed: u32,
    pub name: *mut ::std::os::raw::c_char,
    pub nodes: *mut ::std::os::raw::c_char,
    pub switches: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of topo_info"][::std::mem::size_of::<topo_info>() - 32usize];
    ["Alignment of topo_info"][::std::mem::align_of::<topo_info>() - 8usize];
    ["Offset of field: topo_info::level"][::std::mem::offset_of!(topo_info, level) - 0usize];
    ["Offset of field: topo_info::link_speed"]
        [::std::mem::offset_of!(topo_info, link_speed) - 4usize];
    ["Offset of field: topo_info::name"][::std::mem::offset_of!(topo_info, name) - 8usize];
    ["Offset of field: topo_info::nodes"][::std::mem::offset_of!(topo_info, nodes) - 16usize];
    ["Offset of field: topo_info::switches"][::std::mem::offset_of!(topo_info, switches) - 24usize];
};
pub type topo_info_t = topo_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct topo_info_response_msg {
    pub record_count: u32,
    pub topo_array: *mut topo_info_t,
    pub topo_info: *mut dynamic_plugin_data_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of topo_info_response_msg"][::std::mem::size_of::<topo_info_response_msg>() - 24usize];
    ["Alignment of topo_info_response_msg"]
        [::std::mem::align_of::<topo_info_response_msg>() - 8usize];
    ["Offset of field: topo_info_response_msg::record_count"]
        [::std::mem::offset_of!(topo_info_response_msg, record_count) - 0usize];
    ["Offset of field: topo_info_response_msg::topo_array"]
        [::std::mem::offset_of!(topo_info_response_msg, topo_array) - 8usize];
    ["Offset of field: topo_info_response_msg::topo_info"]
        [::std::mem::offset_of!(topo_info_response_msg, topo_info) - 16usize];
};
pub type topo_info_response_msg_t = topo_info_response_msg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct job_alloc_info_msg {
    pub job_id: u32,
    pub req_cluster: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of job_alloc_info_msg"][::std::mem::size_of::<job_alloc_info_msg>() - 16usize];
    ["Alignment of job_alloc_info_msg"][::std::mem::align_of::<job_alloc_info_msg>() - 8usize];
    ["Offset of field: job_alloc_info_msg::job_id"]
        [::std::mem::offset_of!(job_alloc_info_msg, job_id) - 0usize];
    ["Offset of field: job_alloc_info_msg::req_cluster"]
        [::std::mem::offset_of!(job_alloc_info_msg, req_cluster) - 8usize];
};
pub type job_alloc_info_msg_t = job_alloc_info_msg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct slurm_selected_step_t {
    pub array_bitmap: *mut bitstr_t,
    pub array_task_id: u32,
    pub het_job_offset: u32,
    pub step_id: slurm_step_id_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of slurm_selected_step_t"][::std::mem::size_of::<slurm_selected_step_t>() - 40usize];
    ["Alignment of slurm_selected_step_t"]
        [::std::mem::align_of::<slurm_selected_step_t>() - 8usize];
    ["Offset of field: slurm_selected_step_t::array_bitmap"]
        [::std::mem::offset_of!(slurm_selected_step_t, array_bitmap) - 0usize];
    ["Offset of field: slurm_selected_step_t::array_task_id"]
        [::std::mem::offset_of!(slurm_selected_step_t, array_task_id) - 8usize];
    ["Offset of field: slurm_selected_step_t::het_job_offset"]
        [::std::mem::offset_of!(slurm_selected_step_t, het_job_offset) - 12usize];
    ["Offset of field: slurm_selected_step_t::step_id"]
        [::std::mem::offset_of!(slurm_selected_step_t, step_id) - 16usize];
};
pub type step_alloc_info_msg_t = slurm_selected_step_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acct_gather_node_resp_msg {
    pub energy: *mut acct_gather_energy_t,
    pub node_name: *mut ::std::os::raw::c_char,
    pub sensor_cnt: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acct_gather_node_resp_msg"]
        [::std::mem::size_of::<acct_gather_node_resp_msg>() - 24usize];
    ["Alignment of acct_gather_node_resp_msg"]
        [::std::mem::align_of::<acct_gather_node_resp_msg>() - 8usize];
    ["Offset of field: acct_gather_node_resp_msg::energy"]
        [::std::mem::offset_of!(acct_gather_node_resp_msg, energy) - 0usize];
    ["Offset of field: acct_gather_node_resp_msg::node_name"]
        [::std::mem::offset_of!(acct_gather_node_resp_msg, node_name) - 8usize];
    ["Offset of field: acct_gather_node_resp_msg::sensor_cnt"]
        [::std::mem::offset_of!(acct_gather_node_resp_msg, sensor_cnt) - 16usize];
};
pub type acct_gather_node_resp_msg_t = acct_gather_node_resp_msg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acct_gather_energy_req_msg {
    pub context_id: u16,
    pub delta: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acct_gather_energy_req_msg"]
        [::std::mem::size_of::<acct_gather_energy_req_msg>() - 4usize];
    ["Alignment of acct_gather_energy_req_msg"]
        [::std::mem::align_of::<acct_gather_energy_req_msg>() - 2usize];
    ["Offset of field: acct_gather_energy_req_msg::context_id"]
        [::std::mem::offset_of!(acct_gather_energy_req_msg, context_id) - 0usize];
    ["Offset of field: acct_gather_energy_req_msg::delta"]
        [::std::mem::offset_of!(acct_gather_energy_req_msg, delta) - 2usize];
};
pub type acct_gather_energy_req_msg_t = acct_gather_energy_req_msg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct job_defaults {
    pub type_: u16,
    pub value: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of job_defaults"][::std::mem::size_of::<job_defaults>() - 16usize];
    ["Alignment of job_defaults"][::std::mem::align_of::<job_defaults>() - 8usize];
    ["Offset of field: job_defaults::type_"][::std::mem::offset_of!(job_defaults, type_) - 0usize];
    ["Offset of field: job_defaults::value"][::std::mem::offset_of!(job_defaults, value) - 8usize];
};
pub type job_defaults_t = job_defaults;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct partition_info {
    pub allow_alloc_nodes: *mut ::std::os::raw::c_char,
    pub allow_accounts: *mut ::std::os::raw::c_char,
    pub allow_groups: *mut ::std::os::raw::c_char,
    pub allow_qos: *mut ::std::os::raw::c_char,
    pub alternate: *mut ::std::os::raw::c_char,
    pub billing_weights_str: *mut ::std::os::raw::c_char,
    pub cluster_name: *mut ::std::os::raw::c_char,
    pub cr_type: u16,
    pub cpu_bind: u32,
    pub def_mem_per_cpu: u64,
    pub default_time: u32,
    pub deny_accounts: *mut ::std::os::raw::c_char,
    pub deny_qos: *mut ::std::os::raw::c_char,
    pub flags: u32,
    pub grace_time: u32,
    pub job_defaults_list: *mut list_t,
    pub job_defaults_str: *mut ::std::os::raw::c_char,
    pub max_cpus_per_node: u32,
    pub max_cpus_per_socket: u32,
    pub max_mem_per_cpu: u64,
    pub max_nodes: u32,
    pub max_share: u16,
    pub max_time: u32,
    pub min_nodes: u32,
    pub name: *mut ::std::os::raw::c_char,
    pub node_inx: *mut i32,
    pub nodes: *mut ::std::os::raw::c_char,
    pub nodesets: *mut ::std::os::raw::c_char,
    pub over_time_limit: u16,
    pub preempt_mode: u16,
    pub priority_job_factor: u16,
    pub priority_tier: u16,
    pub qos_char: *mut ::std::os::raw::c_char,
    pub resume_timeout: u16,
    pub state_up: u16,
    pub suspend_time: u32,
    pub suspend_timeout: u16,
    pub total_cpus: u32,
    pub total_nodes: u32,
    pub tres_fmt_str: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of partition_info"][::std::mem::size_of::<partition_info>() - 232usize];
    ["Alignment of partition_info"][::std::mem::align_of::<partition_info>() - 8usize];
    ["Offset of field: partition_info::allow_alloc_nodes"]
        [::std::mem::offset_of!(partition_info, allow_alloc_nodes) - 0usize];
    ["Offset of field: partition_info::allow_accounts"]
        [::std::mem::offset_of!(partition_info, allow_accounts) - 8usize];
    ["Offset of field: partition_info::allow_groups"]
        [::std::mem::offset_of!(partition_info, allow_groups) - 16usize];
    ["Offset of field: partition_info::allow_qos"]
        [::std::mem::offset_of!(partition_info, allow_qos) - 24usize];
    ["Offset of field: partition_info::alternate"]
        [::std::mem::offset_of!(partition_info, alternate) - 32usize];
    ["Offset of field: partition_info::billing_weights_str"]
        [::std::mem::offset_of!(partition_info, billing_weights_str) - 40usize];
    ["Offset of field: partition_info::cluster_name"]
        [::std::mem::offset_of!(partition_info, cluster_name) - 48usize];
    ["Offset of field: partition_info::cr_type"]
        [::std::mem::offset_of!(partition_info, cr_type) - 56usize];
    ["Offset of field: partition_info::cpu_bind"]
        [::std::mem::offset_of!(partition_info, cpu_bind) - 60usize];
    ["Offset of field: partition_info::def_mem_per_cpu"]
        [::std::mem::offset_of!(partition_info, def_mem_per_cpu) - 64usize];
    ["Offset of field: partition_info::default_time"]
        [::std::mem::offset_of!(partition_info, default_time) - 72usize];
    ["Offset of field: partition_info::deny_accounts"]
        [::std::mem::offset_of!(partition_info, deny_accounts) - 80usize];
    ["Offset of field: partition_info::deny_qos"]
        [::std::mem::offset_of!(partition_info, deny_qos) - 88usize];
    ["Offset of field: partition_info::flags"]
        [::std::mem::offset_of!(partition_info, flags) - 96usize];
    ["Offset of field: partition_info::grace_time"]
        [::std::mem::offset_of!(partition_info, grace_time) - 100usize];
    ["Offset of field: partition_info::job_defaults_list"]
        [::std::mem::offset_of!(partition_info, job_defaults_list) - 104usize];
    ["Offset of field: partition_info::job_defaults_str"]
        [::std::mem::offset_of!(partition_info, job_defaults_str) - 112usize];
    ["Offset of field: partition_info::max_cpus_per_node"]
        [::std::mem::offset_of!(partition_info, max_cpus_per_node) - 120usize];
    ["Offset of field: partition_info::max_cpus_per_socket"]
        [::std::mem::offset_of!(partition_info, max_cpus_per_socket) - 124usize];
    ["Offset of field: partition_info::max_mem_per_cpu"]
        [::std::mem::offset_of!(partition_info, max_mem_per_cpu) - 128usize];
    ["Offset of field: partition_info::max_nodes"]
        [::std::mem::offset_of!(partition_info, max_nodes) - 136usize];
    ["Offset of field: partition_info::max_share"]
        [::std::mem::offset_of!(partition_info, max_share) - 140usize];
    ["Offset of field: partition_info::max_time"]
        [::std::mem::offset_of!(partition_info, max_time) - 144usize];
    ["Offset of field: partition_info::min_nodes"]
        [::std::mem::offset_of!(partition_info, min_nodes) - 148usize];
    ["Offset of field: partition_info::name"]
        [::std::mem::offset_of!(partition_info, name) - 152usize];
    ["Offset of field: partition_info::node_inx"]
        [::std::mem::offset_of!(partition_info, node_inx) - 160usize];
    ["Offset of field: partition_info::nodes"]
        [::std::mem::offset_of!(partition_info, nodes) - 168usize];
    ["Offset of field: partition_info::nodesets"]
        [::std::mem::offset_of!(partition_info, nodesets) - 176usize];
    ["Offset of field: partition_info::over_time_limit"]
        [::std::mem::offset_of!(partition_info, over_time_limit) - 184usize];
    ["Offset of field: partition_info::preempt_mode"]
        [::std::mem::offset_of!(partition_info, preempt_mode) - 186usize];
    ["Offset of field: partition_info::priority_job_factor"]
        [::std::mem::offset_of!(partition_info, priority_job_factor) - 188usize];
    ["Offset of field: partition_info::priority_tier"]
        [::std::mem::offset_of!(partition_info, priority_tier) - 190usize];
    ["Offset of field: partition_info::qos_char"]
        [::std::mem::offset_of!(partition_info, qos_char) - 192usize];
    ["Offset of field: partition_info::resume_timeout"]
        [::std::mem::offset_of!(partition_info, resume_timeout) - 200usize];
    ["Offset of field: partition_info::state_up"]
        [::std::mem::offset_of!(partition_info, state_up) - 202usize];
    ["Offset of field: partition_info::suspend_time"]
        [::std::mem::offset_of!(partition_info, suspend_time) - 204usize];
    ["Offset of field: partition_info::suspend_timeout"]
        [::std::mem::offset_of!(partition_info, suspend_timeout) - 208usize];
    ["Offset of field: partition_info::total_cpus"]
        [::std::mem::offset_of!(partition_info, total_cpus) - 212usize];
    ["Offset of field: partition_info::total_nodes"]
        [::std::mem::offset_of!(partition_info, total_nodes) - 216usize];
    ["Offset of field: partition_info::tres_fmt_str"]
        [::std::mem::offset_of!(partition_info, tres_fmt_str) - 224usize];
};
pub type partition_info_t = partition_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct delete_partition_msg {
    pub name: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of delete_partition_msg"][::std::mem::size_of::<delete_partition_msg>() - 8usize];
    ["Alignment of delete_partition_msg"][::std::mem::align_of::<delete_partition_msg>() - 8usize];
    ["Offset of field: delete_partition_msg::name"]
        [::std::mem::offset_of!(delete_partition_msg, name) - 0usize];
};
pub type delete_part_msg_t = delete_partition_msg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct resource_allocation_response_msg {
    pub account: *mut ::std::os::raw::c_char,
    pub job_id: u32,
    pub alias_list: *mut ::std::os::raw::c_char,
    pub batch_host: *mut ::std::os::raw::c_char,
    pub cpu_freq_min: u32,
    pub cpu_freq_max: u32,
    pub cpu_freq_gov: u32,
    pub cpus_per_node: *mut u16,
    pub cpu_count_reps: *mut u32,
    pub env_size: u32,
    pub environment: *mut *mut ::std::os::raw::c_char,
    pub error_code: u32,
    pub gid: gid_t,
    pub group_name: *mut ::std::os::raw::c_char,
    pub job_submit_user_msg: *mut ::std::os::raw::c_char,
    pub node_addr: *mut slurm_addr_t,
    pub node_cnt: u32,
    pub node_list: *mut ::std::os::raw::c_char,
    pub ntasks_per_board: u16,
    pub ntasks_per_core: u16,
    pub ntasks_per_tres: u16,
    pub ntasks_per_socket: u16,
    pub num_cpu_groups: u32,
    pub partition: *mut ::std::os::raw::c_char,
    pub pn_min_memory: u64,
    pub qos: *mut ::std::os::raw::c_char,
    pub resv_name: *mut ::std::os::raw::c_char,
    pub tres_per_node: *mut ::std::os::raw::c_char,
    pub uid: uid_t,
    pub user_name: *mut ::std::os::raw::c_char,
    pub working_cluster_rec: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of resource_allocation_response_msg"]
        [::std::mem::size_of::<resource_allocation_response_msg>() - 208usize];
    ["Alignment of resource_allocation_response_msg"]
        [::std::mem::align_of::<resource_allocation_response_msg>() - 8usize];
    ["Offset of field: resource_allocation_response_msg::account"]
        [::std::mem::offset_of!(resource_allocation_response_msg, account) - 0usize];
    ["Offset of field: resource_allocation_response_msg::job_id"]
        [::std::mem::offset_of!(resource_allocation_response_msg, job_id) - 8usize];
    ["Offset of field: resource_allocation_response_msg::alias_list"]
        [::std::mem::offset_of!(resource_allocation_response_msg, alias_list) - 16usize];
    ["Offset of field: resource_allocation_response_msg::batch_host"]
        [::std::mem::offset_of!(resource_allocation_response_msg, batch_host) - 24usize];
    ["Offset of field: resource_allocation_response_msg::cpu_freq_min"]
        [::std::mem::offset_of!(resource_allocation_response_msg, cpu_freq_min) - 32usize];
    ["Offset of field: resource_allocation_response_msg::cpu_freq_max"]
        [::std::mem::offset_of!(resource_allocation_response_msg, cpu_freq_max) - 36usize];
    ["Offset of field: resource_allocation_response_msg::cpu_freq_gov"]
        [::std::mem::offset_of!(resource_allocation_response_msg, cpu_freq_gov) - 40usize];
    ["Offset of field: resource_allocation_response_msg::cpus_per_node"]
        [::std::mem::offset_of!(resource_allocation_response_msg, cpus_per_node) - 48usize];
    ["Offset of field: resource_allocation_response_msg::cpu_count_reps"]
        [::std::mem::offset_of!(resource_allocation_response_msg, cpu_count_reps) - 56usize];
    ["Offset of field: resource_allocation_response_msg::env_size"]
        [::std::mem::offset_of!(resource_allocation_response_msg, env_size) - 64usize];
    ["Offset of field: resource_allocation_response_msg::environment"]
        [::std::mem::offset_of!(resource_allocation_response_msg, environment) - 72usize];
    ["Offset of field: resource_allocation_response_msg::error_code"]
        [::std::mem::offset_of!(resource_allocation_response_msg, error_code) - 80usize];
    ["Offset of field: resource_allocation_response_msg::gid"]
        [::std::mem::offset_of!(resource_allocation_response_msg, gid) - 84usize];
    ["Offset of field: resource_allocation_response_msg::group_name"]
        [::std::mem::offset_of!(resource_allocation_response_msg, group_name) - 88usize];
    ["Offset of field: resource_allocation_response_msg::job_submit_user_msg"]
        [::std::mem::offset_of!(resource_allocation_response_msg, job_submit_user_msg) - 96usize];
    ["Offset of field: resource_allocation_response_msg::node_addr"]
        [::std::mem::offset_of!(resource_allocation_response_msg, node_addr) - 104usize];
    ["Offset of field: resource_allocation_response_msg::node_cnt"]
        [::std::mem::offset_of!(resource_allocation_response_msg, node_cnt) - 112usize];
    ["Offset of field: resource_allocation_response_msg::node_list"]
        [::std::mem::offset_of!(resource_allocation_response_msg, node_list) - 120usize];
    ["Offset of field: resource_allocation_response_msg::ntasks_per_board"]
        [::std::mem::offset_of!(resource_allocation_response_msg, ntasks_per_board) - 128usize];
    ["Offset of field: resource_allocation_response_msg::ntasks_per_core"]
        [::std::mem::offset_of!(resource_allocation_response_msg, ntasks_per_core) - 130usize];
    ["Offset of field: resource_allocation_response_msg::ntasks_per_tres"]
        [::std::mem::offset_of!(resource_allocation_response_msg, ntasks_per_tres) - 132usize];
    ["Offset of field: resource_allocation_response_msg::ntasks_per_socket"]
        [::std::mem::offset_of!(resource_allocation_response_msg, ntasks_per_socket) - 134usize];
    ["Offset of field: resource_allocation_response_msg::num_cpu_groups"]
        [::std::mem::offset_of!(resource_allocation_response_msg, num_cpu_groups) - 136usize];
    ["Offset of field: resource_allocation_response_msg::partition"]
        [::std::mem::offset_of!(resource_allocation_response_msg, partition) - 144usize];
    ["Offset of field: resource_allocation_response_msg::pn_min_memory"]
        [::std::mem::offset_of!(resource_allocation_response_msg, pn_min_memory) - 152usize];
    ["Offset of field: resource_allocation_response_msg::qos"]
        [::std::mem::offset_of!(resource_allocation_response_msg, qos) - 160usize];
    ["Offset of field: resource_allocation_response_msg::resv_name"]
        [::std::mem::offset_of!(resource_allocation_response_msg, resv_name) - 168usize];
    ["Offset of field: resource_allocation_response_msg::tres_per_node"]
        [::std::mem::offset_of!(resource_allocation_response_msg, tres_per_node) - 176usize];
    ["Offset of field: resource_allocation_response_msg::uid"]
        [::std::mem::offset_of!(resource_allocation_response_msg, uid) - 184usize];
    ["Offset of field: resource_allocation_response_msg::user_name"]
        [::std::mem::offset_of!(resource_allocation_response_msg, user_name) - 192usize];
    ["Offset of field: resource_allocation_response_msg::working_cluster_rec"]
        [::std::mem::offset_of!(resource_allocation_response_msg, working_cluster_rec) - 200usize];
};
pub type resource_allocation_response_msg_t = resource_allocation_response_msg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct partition_info_msg {
    pub last_update: time_t,
    pub record_count: u32,
    pub partition_array: *mut partition_info_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of partition_info_msg"][::std::mem::size_of::<partition_info_msg>() - 24usize];
    ["Alignment of partition_info_msg"][::std::mem::align_of::<partition_info_msg>() - 8usize];
    ["Offset of field: partition_info_msg::last_update"]
        [::std::mem::offset_of!(partition_info_msg, last_update) - 0usize];
    ["Offset of field: partition_info_msg::record_count"]
        [::std::mem::offset_of!(partition_info_msg, record_count) - 8usize];
    ["Offset of field: partition_info_msg::partition_array"]
        [::std::mem::offset_of!(partition_info_msg, partition_array) - 16usize];
};
pub type partition_info_msg_t = partition_info_msg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct will_run_response_msg {
    pub job_id: u32,
    pub job_submit_user_msg: *mut ::std::os::raw::c_char,
    pub node_list: *mut ::std::os::raw::c_char,
    pub part_name: *mut ::std::os::raw::c_char,
    pub preemptee_job_id: *mut list_t,
    pub proc_cnt: u32,
    pub start_time: time_t,
    pub sys_usage_per: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of will_run_response_msg"][::std::mem::size_of::<will_run_response_msg>() - 64usize];
    ["Alignment of will_run_response_msg"]
        [::std::mem::align_of::<will_run_response_msg>() - 8usize];
    ["Offset of field: will_run_response_msg::job_id"]
        [::std::mem::offset_of!(will_run_response_msg, job_id) - 0usize];
    ["Offset of field: will_run_response_msg::job_submit_user_msg"]
        [::std::mem::offset_of!(will_run_response_msg, job_submit_user_msg) - 8usize];
    ["Offset of field: will_run_response_msg::node_list"]
        [::std::mem::offset_of!(will_run_response_msg, node_list) - 16usize];
    ["Offset of field: will_run_response_msg::part_name"]
        [::std::mem::offset_of!(will_run_response_msg, part_name) - 24usize];
    ["Offset of field: will_run_response_msg::preemptee_job_id"]
        [::std::mem::offset_of!(will_run_response_msg, preemptee_job_id) - 32usize];
    ["Offset of field: will_run_response_msg::proc_cnt"]
        [::std::mem::offset_of!(will_run_response_msg, proc_cnt) - 40usize];
    ["Offset of field: will_run_response_msg::start_time"]
        [::std::mem::offset_of!(will_run_response_msg, start_time) - 48usize];
    ["Offset of field: will_run_response_msg::sys_usage_per"]
        [::std::mem::offset_of!(will_run_response_msg, sys_usage_per) - 56usize];
};
pub type will_run_response_msg_t = will_run_response_msg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct resv_core_spec {
    pub node_name: *mut ::std::os::raw::c_char,
    pub core_id: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of resv_core_spec"][::std::mem::size_of::<resv_core_spec>() - 16usize];
    ["Alignment of resv_core_spec"][::std::mem::align_of::<resv_core_spec>() - 8usize];
    ["Offset of field: resv_core_spec::node_name"]
        [::std::mem::offset_of!(resv_core_spec, node_name) - 0usize];
    ["Offset of field: resv_core_spec::core_id"]
        [::std::mem::offset_of!(resv_core_spec, core_id) - 8usize];
};
pub type resv_core_spec_t = resv_core_spec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct reserve_info {
    pub accounts: *mut ::std::os::raw::c_char,
    pub burst_buffer: *mut ::std::os::raw::c_char,
    pub comment: *mut ::std::os::raw::c_char,
    pub core_cnt: u32,
    pub core_spec_cnt: u32,
    pub core_spec: *mut resv_core_spec_t,
    pub end_time: time_t,
    pub features: *mut ::std::os::raw::c_char,
    pub flags: u64,
    pub groups: *mut ::std::os::raw::c_char,
    pub licenses: *mut ::std::os::raw::c_char,
    pub max_start_delay: u32,
    pub name: *mut ::std::os::raw::c_char,
    pub node_cnt: u32,
    pub node_inx: *mut i32,
    pub node_list: *mut ::std::os::raw::c_char,
    pub partition: *mut ::std::os::raw::c_char,
    pub purge_comp_time: u32,
    pub start_time: time_t,
    pub tres_str: *mut ::std::os::raw::c_char,
    pub users: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of reserve_info"][::std::mem::size_of::<reserve_info>() - 160usize];
    ["Alignment of reserve_info"][::std::mem::align_of::<reserve_info>() - 8usize];
    ["Offset of field: reserve_info::accounts"]
        [::std::mem::offset_of!(reserve_info, accounts) - 0usize];
    ["Offset of field: reserve_info::burst_buffer"]
        [::std::mem::offset_of!(reserve_info, burst_buffer) - 8usize];
    ["Offset of field: reserve_info::comment"]
        [::std::mem::offset_of!(reserve_info, comment) - 16usize];
    ["Offset of field: reserve_info::core_cnt"]
        [::std::mem::offset_of!(reserve_info, core_cnt) - 24usize];
    ["Offset of field: reserve_info::core_spec_cnt"]
        [::std::mem::offset_of!(reserve_info, core_spec_cnt) - 28usize];
    ["Offset of field: reserve_info::core_spec"]
        [::std::mem::offset_of!(reserve_info, core_spec) - 32usize];
    ["Offset of field: reserve_info::end_time"]
        [::std::mem::offset_of!(reserve_info, end_time) - 40usize];
    ["Offset of field: reserve_info::features"]
        [::std::mem::offset_of!(reserve_info, features) - 48usize];
    ["Offset of field: reserve_info::flags"][::std::mem::offset_of!(reserve_info, flags) - 56usize];
    ["Offset of field: reserve_info::groups"]
        [::std::mem::offset_of!(reserve_info, groups) - 64usize];
    ["Offset of field: reserve_info::licenses"]
        [::std::mem::offset_of!(reserve_info, licenses) - 72usize];
    ["Offset of field: reserve_info::max_start_delay"]
        [::std::mem::offset_of!(reserve_info, max_start_delay) - 80usize];
    ["Offset of field: reserve_info::name"][::std::mem::offset_of!(reserve_info, name) - 88usize];
    ["Offset of field: reserve_info::node_cnt"]
        [::std::mem::offset_of!(reserve_info, node_cnt) - 96usize];
    ["Offset of field: reserve_info::node_inx"]
        [::std::mem::offset_of!(reserve_info, node_inx) - 104usize];
    ["Offset of field: reserve_info::node_list"]
        [::std::mem::offset_of!(reserve_info, node_list) - 112usize];
    ["Offset of field: reserve_info::partition"]
        [::std::mem::offset_of!(reserve_info, partition) - 120usize];
    ["Offset of field: reserve_info::purge_comp_time"]
        [::std::mem::offset_of!(reserve_info, purge_comp_time) - 128usize];
    ["Offset of field: reserve_info::start_time"]
        [::std::mem::offset_of!(reserve_info, start_time) - 136usize];
    ["Offset of field: reserve_info::tres_str"]
        [::std::mem::offset_of!(reserve_info, tres_str) - 144usize];
    ["Offset of field: reserve_info::users"]
        [::std::mem::offset_of!(reserve_info, users) - 152usize];
};
pub type reserve_info_t = reserve_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct reserve_info_msg {
    pub last_update: time_t,
    pub record_count: u32,
    pub reservation_array: *mut reserve_info_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of reserve_info_msg"][::std::mem::size_of::<reserve_info_msg>() - 24usize];
    ["Alignment of reserve_info_msg"][::std::mem::align_of::<reserve_info_msg>() - 8usize];
    ["Offset of field: reserve_info_msg::last_update"]
        [::std::mem::offset_of!(reserve_info_msg, last_update) - 0usize];
    ["Offset of field: reserve_info_msg::record_count"]
        [::std::mem::offset_of!(reserve_info_msg, record_count) - 8usize];
    ["Offset of field: reserve_info_msg::reservation_array"]
        [::std::mem::offset_of!(reserve_info_msg, reservation_array) - 16usize];
};
pub type reserve_info_msg_t = reserve_info_msg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct resv_desc_msg {
    pub accounts: *mut ::std::os::raw::c_char,
    pub burst_buffer: *mut ::std::os::raw::c_char,
    pub comment: *mut ::std::os::raw::c_char,
    pub core_cnt: u32,
    pub duration: u32,
    pub end_time: time_t,
    pub features: *mut ::std::os::raw::c_char,
    pub flags: u64,
    pub groups: *mut ::std::os::raw::c_char,
    pub job_ptr: *mut ::std::os::raw::c_void,
    pub licenses: *mut ::std::os::raw::c_char,
    pub max_start_delay: u32,
    pub name: *mut ::std::os::raw::c_char,
    pub node_cnt: u32,
    pub node_list: *mut ::std::os::raw::c_char,
    pub partition: *mut ::std::os::raw::c_char,
    pub purge_comp_time: u32,
    pub start_time: time_t,
    pub tres_str: *mut ::std::os::raw::c_char,
    pub users: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of resv_desc_msg"][::std::mem::size_of::<resv_desc_msg>() - 152usize];
    ["Alignment of resv_desc_msg"][::std::mem::align_of::<resv_desc_msg>() - 8usize];
    ["Offset of field: resv_desc_msg::accounts"]
        [::std::mem::offset_of!(resv_desc_msg, accounts) - 0usize];
    ["Offset of field: resv_desc_msg::burst_buffer"]
        [::std::mem::offset_of!(resv_desc_msg, burst_buffer) - 8usize];
    ["Offset of field: resv_desc_msg::comment"]
        [::std::mem::offset_of!(resv_desc_msg, comment) - 16usize];
    ["Offset of field: resv_desc_msg::core_cnt"]
        [::std::mem::offset_of!(resv_desc_msg, core_cnt) - 24usize];
    ["Offset of field: resv_desc_msg::duration"]
        [::std::mem::offset_of!(resv_desc_msg, duration) - 28usize];
    ["Offset of field: resv_desc_msg::end_time"]
        [::std::mem::offset_of!(resv_desc_msg, end_time) - 32usize];
    ["Offset of field: resv_desc_msg::features"]
        [::std::mem::offset_of!(resv_desc_msg, features) - 40usize];
    ["Offset of field: resv_desc_msg::flags"]
        [::std::mem::offset_of!(resv_desc_msg, flags) - 48usize];
    ["Offset of field: resv_desc_msg::groups"]
        [::std::mem::offset_of!(resv_desc_msg, groups) - 56usize];
    ["Offset of field: resv_desc_msg::job_ptr"]
        [::std::mem::offset_of!(resv_desc_msg, job_ptr) - 64usize];
    ["Offset of field: resv_desc_msg::licenses"]
        [::std::mem::offset_of!(resv_desc_msg, licenses) - 72usize];
    ["Offset of field: resv_desc_msg::max_start_delay"]
        [::std::mem::offset_of!(resv_desc_msg, max_start_delay) - 80usize];
    ["Offset of field: resv_desc_msg::name"][::std::mem::offset_of!(resv_desc_msg, name) - 88usize];
    ["Offset of field: resv_desc_msg::node_cnt"]
        [::std::mem::offset_of!(resv_desc_msg, node_cnt) - 96usize];
    ["Offset of field: resv_desc_msg::node_list"]
        [::std::mem::offset_of!(resv_desc_msg, node_list) - 104usize];
    ["Offset of field: resv_desc_msg::partition"]
        [::std::mem::offset_of!(resv_desc_msg, partition) - 112usize];
    ["Offset of field: resv_desc_msg::purge_comp_time"]
        [::std::mem::offset_of!(resv_desc_msg, purge_comp_time) - 120usize];
    ["Offset of field: resv_desc_msg::start_time"]
        [::std::mem::offset_of!(resv_desc_msg, start_time) - 128usize];
    ["Offset of field: resv_desc_msg::tres_str"]
        [::std::mem::offset_of!(resv_desc_msg, tres_str) - 136usize];
    ["Offset of field: resv_desc_msg::users"]
        [::std::mem::offset_of!(resv_desc_msg, users) - 144usize];
};
pub type resv_desc_msg_t = resv_desc_msg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct reserve_response_msg {
    pub name: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of reserve_response_msg"][::std::mem::size_of::<reserve_response_msg>() - 8usize];
    ["Alignment of reserve_response_msg"][::std::mem::align_of::<reserve_response_msg>() - 8usize];
    ["Offset of field: reserve_response_msg::name"]
        [::std::mem::offset_of!(reserve_response_msg, name) - 0usize];
};
pub type reserve_response_msg_t = reserve_response_msg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct reservation_name_msg {
    pub name: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of reservation_name_msg"][::std::mem::size_of::<reservation_name_msg>() - 8usize];
    ["Alignment of reservation_name_msg"][::std::mem::align_of::<reservation_name_msg>() - 8usize];
    ["Offset of field: reservation_name_msg::name"]
        [::std::mem::offset_of!(reservation_name_msg, name) - 0usize];
};
pub type reservation_name_msg_t = reservation_name_msg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct slurm_conf_t {
    pub last_update: time_t,
    pub accounting_storage_tres: *mut ::std::os::raw::c_char,
    pub accounting_storage_enforce: u16,
    pub accounting_storage_backup_host: *mut ::std::os::raw::c_char,
    pub accounting_storage_ext_host: *mut ::std::os::raw::c_char,
    pub accounting_storage_host: *mut ::std::os::raw::c_char,
    pub accounting_storage_params: *mut ::std::os::raw::c_char,
    pub accounting_storage_pass: *mut ::std::os::raw::c_char,
    pub accounting_storage_port: u16,
    pub accounting_storage_type: *mut ::std::os::raw::c_char,
    pub accounting_storage_user: *mut ::std::os::raw::c_char,
    pub acct_gather_conf: *mut ::std::os::raw::c_void,
    pub acct_gather_energy_type: *mut ::std::os::raw::c_char,
    pub acct_gather_profile_type: *mut ::std::os::raw::c_char,
    pub acct_gather_interconnect_type: *mut ::std::os::raw::c_char,
    pub acct_gather_filesystem_type: *mut ::std::os::raw::c_char,
    pub acct_gather_node_freq: u16,
    pub authalttypes: *mut ::std::os::raw::c_char,
    pub authinfo: *mut ::std::os::raw::c_char,
    pub authalt_params: *mut ::std::os::raw::c_char,
    pub authtype: *mut ::std::os::raw::c_char,
    pub batch_start_timeout: u16,
    pub bb_type: *mut ::std::os::raw::c_char,
    pub bcast_exclude: *mut ::std::os::raw::c_char,
    pub bcast_parameters: *mut ::std::os::raw::c_char,
    pub boot_time: time_t,
    pub certmgr_params: *mut ::std::os::raw::c_char,
    pub certmgr_type: *mut ::std::os::raw::c_char,
    pub cgroup_conf: *mut ::std::os::raw::c_void,
    pub cli_filter_plugins: *mut ::std::os::raw::c_char,
    pub cluster_id: u16,
    pub cluster_name: *mut ::std::os::raw::c_char,
    pub comm_params: *mut ::std::os::raw::c_char,
    pub complete_wait: u16,
    pub conf_flags: u32,
    pub control_addr: *mut *mut ::std::os::raw::c_char,
    pub control_cnt: u32,
    pub control_machine: *mut *mut ::std::os::raw::c_char,
    pub cpu_freq_def: u32,
    pub cpu_freq_govs: u32,
    pub cred_type: *mut ::std::os::raw::c_char,
    pub data_parser_parameters: *mut ::std::os::raw::c_char,
    pub debug_flags: u64,
    pub def_mem_per_cpu: u64,
    pub dependency_params: *mut ::std::os::raw::c_char,
    pub eio_timeout: u16,
    pub enforce_part_limits: u16,
    pub epilog: *mut *mut ::std::os::raw::c_char,
    pub epilog_cnt: u32,
    pub epilog_msg_time: u32,
    pub epilog_slurmctld: *mut *mut ::std::os::raw::c_char,
    pub epilog_slurmctld_cnt: u32,
    pub fed_params: *mut ::std::os::raw::c_char,
    pub first_job_id: u32,
    pub fs_dampening_factor: u16,
    pub getnameinfo_cache_timeout: u16,
    pub get_env_timeout: u16,
    pub gres_plugins: *mut ::std::os::raw::c_char,
    pub group_time: u16,
    pub group_force: u16,
    pub gpu_freq_def: *mut ::std::os::raw::c_char,
    pub hash_plugin: *mut ::std::os::raw::c_char,
    pub hash_val: u32,
    pub health_check_interval: u16,
    pub health_check_node_state: u16,
    pub health_check_program: *mut ::std::os::raw::c_char,
    pub inactive_limit: u16,
    pub interactive_step_opts: *mut ::std::os::raw::c_char,
    pub job_acct_gather_freq: *mut ::std::os::raw::c_char,
    pub job_acct_gather_type: *mut ::std::os::raw::c_char,
    pub job_acct_gather_params: *mut ::std::os::raw::c_char,
    pub job_acct_oom_kill: u16,
    pub job_comp_host: *mut ::std::os::raw::c_char,
    pub job_comp_loc: *mut ::std::os::raw::c_char,
    pub job_comp_params: *mut ::std::os::raw::c_char,
    pub job_comp_pass: *mut ::std::os::raw::c_char,
    pub job_comp_port: u32,
    pub job_comp_type: *mut ::std::os::raw::c_char,
    pub job_comp_user: *mut ::std::os::raw::c_char,
    pub job_container_plugin: *mut ::std::os::raw::c_char,
    pub job_defaults_list: *mut list_t,
    pub job_file_append: u16,
    pub job_requeue: u16,
    pub job_submit_plugins: *mut ::std::os::raw::c_char,
    pub keepalive_interval: u32,
    pub keepalive_probes: u32,
    pub keepalive_time: u32,
    pub kill_on_bad_exit: u16,
    pub kill_wait: u16,
    pub launch_params: *mut ::std::os::raw::c_char,
    pub licenses: *mut ::std::os::raw::c_char,
    pub log_fmt: u16,
    pub mail_domain: *mut ::std::os::raw::c_char,
    pub mail_prog: *mut ::std::os::raw::c_char,
    pub max_array_sz: u32,
    pub max_batch_requeue: u32,
    pub max_dbd_msgs: u32,
    pub max_job_cnt: u32,
    pub max_job_id: u32,
    pub max_mem_per_cpu: u64,
    pub max_node_cnt: u32,
    pub max_step_cnt: u32,
    pub max_tasks_per_node: u16,
    pub mcs_plugin: *mut ::std::os::raw::c_char,
    pub mcs_plugin_params: *mut ::std::os::raw::c_char,
    pub min_job_age: u32,
    pub mpi_conf: *mut ::std::os::raw::c_void,
    pub mpi_default: *mut ::std::os::raw::c_char,
    pub mpi_params: *mut ::std::os::raw::c_char,
    pub msg_timeout: u16,
    pub next_job_id: u32,
    pub node_features_conf: *mut ::std::os::raw::c_void,
    pub node_features_plugins: *mut ::std::os::raw::c_char,
    pub node_prefix: *mut ::std::os::raw::c_char,
    pub over_time_limit: u16,
    pub plugindir: *mut ::std::os::raw::c_char,
    pub plugstack: *mut ::std::os::raw::c_char,
    pub preempt_exempt_time: u32,
    pub preempt_mode: u16,
    pub preempt_params: *mut ::std::os::raw::c_char,
    pub preempt_type: *mut ::std::os::raw::c_char,
    pub prep_params: *mut ::std::os::raw::c_char,
    pub prep_plugins: *mut ::std::os::raw::c_char,
    pub priority_decay_hl: u32,
    pub priority_calc_period: u32,
    pub priority_favor_small: u16,
    pub priority_flags: u16,
    pub priority_max_age: u32,
    pub priority_params: *mut ::std::os::raw::c_char,
    pub priority_reset_period: u16,
    pub priority_type: *mut ::std::os::raw::c_char,
    pub priority_weight_age: u32,
    pub priority_weight_assoc: u32,
    pub priority_weight_fs: u32,
    pub priority_weight_js: u32,
    pub priority_weight_part: u32,
    pub priority_weight_qos: u32,
    pub priority_weight_tres: *mut ::std::os::raw::c_char,
    pub private_data: u16,
    pub proctrack_type: *mut ::std::os::raw::c_char,
    pub prolog: *mut *mut ::std::os::raw::c_char,
    pub prolog_cnt: u32,
    pub prolog_epilog_timeout: u16,
    pub prolog_slurmctld: *mut *mut ::std::os::raw::c_char,
    pub prolog_slurmctld_cnt: u32,
    pub propagate_prio_process: u16,
    pub prolog_flags: u16,
    pub propagate_rlimits: *mut ::std::os::raw::c_char,
    pub propagate_rlimits_except: *mut ::std::os::raw::c_char,
    pub reboot_program: *mut ::std::os::raw::c_char,
    pub reconfig_flags: u16,
    pub requeue_exit: *mut ::std::os::raw::c_char,
    pub requeue_exit_hold: *mut ::std::os::raw::c_char,
    pub resume_fail_program: *mut ::std::os::raw::c_char,
    pub resume_program: *mut ::std::os::raw::c_char,
    pub resume_rate: u16,
    pub resume_timeout: u16,
    pub resv_epilog: *mut ::std::os::raw::c_char,
    pub resv_over_run: u16,
    pub resv_prolog: *mut ::std::os::raw::c_char,
    pub ret2service: u16,
    pub sched_logfile: *mut ::std::os::raw::c_char,
    pub sched_log_level: u16,
    pub sched_params: *mut ::std::os::raw::c_char,
    pub sched_time_slice: u16,
    pub schedtype: *mut ::std::os::raw::c_char,
    pub scron_params: *mut ::std::os::raw::c_char,
    pub select_type: *mut ::std::os::raw::c_char,
    pub select_conf_key_pairs: *mut ::std::os::raw::c_void,
    pub select_type_param: u16,
    pub site_factor_plugin: *mut ::std::os::raw::c_char,
    pub site_factor_params: *mut ::std::os::raw::c_char,
    pub slurm_conf: *mut ::std::os::raw::c_char,
    pub slurm_user_id: u32,
    pub slurm_user_name: *mut ::std::os::raw::c_char,
    pub slurmd_user_id: u32,
    pub slurmd_user_name: *mut ::std::os::raw::c_char,
    pub slurmctld_addr: *mut ::std::os::raw::c_char,
    pub slurmctld_debug: u16,
    pub slurmctld_logfile: *mut ::std::os::raw::c_char,
    pub slurmctld_pidfile: *mut ::std::os::raw::c_char,
    pub slurmctld_port: u32,
    pub slurmctld_port_count: u16,
    pub slurmctld_primary_off_prog: *mut ::std::os::raw::c_char,
    pub slurmctld_primary_on_prog: *mut ::std::os::raw::c_char,
    pub slurmctld_syslog_debug: u16,
    pub slurmctld_timeout: u16,
    pub slurmctld_params: *mut ::std::os::raw::c_char,
    pub slurmd_debug: u16,
    pub slurmd_logfile: *mut ::std::os::raw::c_char,
    pub slurmd_params: *mut ::std::os::raw::c_char,
    pub slurmd_pidfile: *mut ::std::os::raw::c_char,
    pub slurmd_port: u32,
    pub slurmd_spooldir: *mut ::std::os::raw::c_char,
    pub slurmd_syslog_debug: u16,
    pub slurmd_timeout: u16,
    pub srun_epilog: *mut ::std::os::raw::c_char,
    pub srun_port_range: *mut u16,
    pub srun_prolog: *mut ::std::os::raw::c_char,
    pub state_save_location: *mut ::std::os::raw::c_char,
    pub suspend_exc_nodes: *mut ::std::os::raw::c_char,
    pub suspend_exc_parts: *mut ::std::os::raw::c_char,
    pub suspend_exc_states: *mut ::std::os::raw::c_char,
    pub suspend_program: *mut ::std::os::raw::c_char,
    pub suspend_rate: u16,
    pub suspend_time: u32,
    pub suspend_timeout: u16,
    pub switch_type: *mut ::std::os::raw::c_char,
    pub switch_param: *mut ::std::os::raw::c_char,
    pub task_epilog: *mut ::std::os::raw::c_char,
    pub task_plugin: *mut ::std::os::raw::c_char,
    pub task_plugin_param: u32,
    pub task_prolog: *mut ::std::os::raw::c_char,
    pub tls_params: *mut ::std::os::raw::c_char,
    pub tls_type: *mut ::std::os::raw::c_char,
    pub tcp_timeout: u16,
    pub tmp_fs: *mut ::std::os::raw::c_char,
    pub topology_param: *mut ::std::os::raw::c_char,
    pub topology_plugin: *mut ::std::os::raw::c_char,
    pub tree_width: u16,
    pub unkillable_program: *mut ::std::os::raw::c_char,
    pub unkillable_timeout: u16,
    pub version: *mut ::std::os::raw::c_char,
    pub vsize_factor: u16,
    pub wait_time: u16,
    pub x11_params: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of slurm_conf_t"][::std::mem::size_of::<slurm_conf_t>() - 1544usize];
    ["Alignment of slurm_conf_t"][::std::mem::align_of::<slurm_conf_t>() - 8usize];
    ["Offset of field: slurm_conf_t::last_update"]
        [::std::mem::offset_of!(slurm_conf_t, last_update) - 0usize];
    ["Offset of field: slurm_conf_t::accounting_storage_tres"]
        [::std::mem::offset_of!(slurm_conf_t, accounting_storage_tres) - 8usize];
    ["Offset of field: slurm_conf_t::accounting_storage_enforce"]
        [::std::mem::offset_of!(slurm_conf_t, accounting_storage_enforce) - 16usize];
    ["Offset of field: slurm_conf_t::accounting_storage_backup_host"]
        [::std::mem::offset_of!(slurm_conf_t, accounting_storage_backup_host) - 24usize];
    ["Offset of field: slurm_conf_t::accounting_storage_ext_host"]
        [::std::mem::offset_of!(slurm_conf_t, accounting_storage_ext_host) - 32usize];
    ["Offset of field: slurm_conf_t::accounting_storage_host"]
        [::std::mem::offset_of!(slurm_conf_t, accounting_storage_host) - 40usize];
    ["Offset of field: slurm_conf_t::accounting_storage_params"]
        [::std::mem::offset_of!(slurm_conf_t, accounting_storage_params) - 48usize];
    ["Offset of field: slurm_conf_t::accounting_storage_pass"]
        [::std::mem::offset_of!(slurm_conf_t, accounting_storage_pass) - 56usize];
    ["Offset of field: slurm_conf_t::accounting_storage_port"]
        [::std::mem::offset_of!(slurm_conf_t, accounting_storage_port) - 64usize];
    ["Offset of field: slurm_conf_t::accounting_storage_type"]
        [::std::mem::offset_of!(slurm_conf_t, accounting_storage_type) - 72usize];
    ["Offset of field: slurm_conf_t::accounting_storage_user"]
        [::std::mem::offset_of!(slurm_conf_t, accounting_storage_user) - 80usize];
    ["Offset of field: slurm_conf_t::acct_gather_conf"]
        [::std::mem::offset_of!(slurm_conf_t, acct_gather_conf) - 88usize];
    ["Offset of field: slurm_conf_t::acct_gather_energy_type"]
        [::std::mem::offset_of!(slurm_conf_t, acct_gather_energy_type) - 96usize];
    ["Offset of field: slurm_conf_t::acct_gather_profile_type"]
        [::std::mem::offset_of!(slurm_conf_t, acct_gather_profile_type) - 104usize];
    ["Offset of field: slurm_conf_t::acct_gather_interconnect_type"]
        [::std::mem::offset_of!(slurm_conf_t, acct_gather_interconnect_type) - 112usize];
    ["Offset of field: slurm_conf_t::acct_gather_filesystem_type"]
        [::std::mem::offset_of!(slurm_conf_t, acct_gather_filesystem_type) - 120usize];
    ["Offset of field: slurm_conf_t::acct_gather_node_freq"]
        [::std::mem::offset_of!(slurm_conf_t, acct_gather_node_freq) - 128usize];
    ["Offset of field: slurm_conf_t::authalttypes"]
        [::std::mem::offset_of!(slurm_conf_t, authalttypes) - 136usize];
    ["Offset of field: slurm_conf_t::authinfo"]
        [::std::mem::offset_of!(slurm_conf_t, authinfo) - 144usize];
    ["Offset of field: slurm_conf_t::authalt_params"]
        [::std::mem::offset_of!(slurm_conf_t, authalt_params) - 152usize];
    ["Offset of field: slurm_conf_t::authtype"]
        [::std::mem::offset_of!(slurm_conf_t, authtype) - 160usize];
    ["Offset of field: slurm_conf_t::batch_start_timeout"]
        [::std::mem::offset_of!(slurm_conf_t, batch_start_timeout) - 168usize];
    ["Offset of field: slurm_conf_t::bb_type"]
        [::std::mem::offset_of!(slurm_conf_t, bb_type) - 176usize];
    ["Offset of field: slurm_conf_t::bcast_exclude"]
        [::std::mem::offset_of!(slurm_conf_t, bcast_exclude) - 184usize];
    ["Offset of field: slurm_conf_t::bcast_parameters"]
        [::std::mem::offset_of!(slurm_conf_t, bcast_parameters) - 192usize];
    ["Offset of field: slurm_conf_t::boot_time"]
        [::std::mem::offset_of!(slurm_conf_t, boot_time) - 200usize];
    ["Offset of field: slurm_conf_t::certmgr_params"]
        [::std::mem::offset_of!(slurm_conf_t, certmgr_params) - 208usize];
    ["Offset of field: slurm_conf_t::certmgr_type"]
        [::std::mem::offset_of!(slurm_conf_t, certmgr_type) - 216usize];
    ["Offset of field: slurm_conf_t::cgroup_conf"]
        [::std::mem::offset_of!(slurm_conf_t, cgroup_conf) - 224usize];
    ["Offset of field: slurm_conf_t::cli_filter_plugins"]
        [::std::mem::offset_of!(slurm_conf_t, cli_filter_plugins) - 232usize];
    ["Offset of field: slurm_conf_t::cluster_id"]
        [::std::mem::offset_of!(slurm_conf_t, cluster_id) - 240usize];
    ["Offset of field: slurm_conf_t::cluster_name"]
        [::std::mem::offset_of!(slurm_conf_t, cluster_name) - 248usize];
    ["Offset of field: slurm_conf_t::comm_params"]
        [::std::mem::offset_of!(slurm_conf_t, comm_params) - 256usize];
    ["Offset of field: slurm_conf_t::complete_wait"]
        [::std::mem::offset_of!(slurm_conf_t, complete_wait) - 264usize];
    ["Offset of field: slurm_conf_t::conf_flags"]
        [::std::mem::offset_of!(slurm_conf_t, conf_flags) - 268usize];
    ["Offset of field: slurm_conf_t::control_addr"]
        [::std::mem::offset_of!(slurm_conf_t, control_addr) - 272usize];
    ["Offset of field: slurm_conf_t::control_cnt"]
        [::std::mem::offset_of!(slurm_conf_t, control_cnt) - 280usize];
    ["Offset of field: slurm_conf_t::control_machine"]
        [::std::mem::offset_of!(slurm_conf_t, control_machine) - 288usize];
    ["Offset of field: slurm_conf_t::cpu_freq_def"]
        [::std::mem::offset_of!(slurm_conf_t, cpu_freq_def) - 296usize];
    ["Offset of field: slurm_conf_t::cpu_freq_govs"]
        [::std::mem::offset_of!(slurm_conf_t, cpu_freq_govs) - 300usize];
    ["Offset of field: slurm_conf_t::cred_type"]
        [::std::mem::offset_of!(slurm_conf_t, cred_type) - 304usize];
    ["Offset of field: slurm_conf_t::data_parser_parameters"]
        [::std::mem::offset_of!(slurm_conf_t, data_parser_parameters) - 312usize];
    ["Offset of field: slurm_conf_t::debug_flags"]
        [::std::mem::offset_of!(slurm_conf_t, debug_flags) - 320usize];
    ["Offset of field: slurm_conf_t::def_mem_per_cpu"]
        [::std::mem::offset_of!(slurm_conf_t, def_mem_per_cpu) - 328usize];
    ["Offset of field: slurm_conf_t::dependency_params"]
        [::std::mem::offset_of!(slurm_conf_t, dependency_params) - 336usize];
    ["Offset of field: slurm_conf_t::eio_timeout"]
        [::std::mem::offset_of!(slurm_conf_t, eio_timeout) - 344usize];
    ["Offset of field: slurm_conf_t::enforce_part_limits"]
        [::std::mem::offset_of!(slurm_conf_t, enforce_part_limits) - 346usize];
    ["Offset of field: slurm_conf_t::epilog"]
        [::std::mem::offset_of!(slurm_conf_t, epilog) - 352usize];
    ["Offset of field: slurm_conf_t::epilog_cnt"]
        [::std::mem::offset_of!(slurm_conf_t, epilog_cnt) - 360usize];
    ["Offset of field: slurm_conf_t::epilog_msg_time"]
        [::std::mem::offset_of!(slurm_conf_t, epilog_msg_time) - 364usize];
    ["Offset of field: slurm_conf_t::epilog_slurmctld"]
        [::std::mem::offset_of!(slurm_conf_t, epilog_slurmctld) - 368usize];
    ["Offset of field: slurm_conf_t::epilog_slurmctld_cnt"]
        [::std::mem::offset_of!(slurm_conf_t, epilog_slurmctld_cnt) - 376usize];
    ["Offset of field: slurm_conf_t::fed_params"]
        [::std::mem::offset_of!(slurm_conf_t, fed_params) - 384usize];
    ["Offset of field: slurm_conf_t::first_job_id"]
        [::std::mem::offset_of!(slurm_conf_t, first_job_id) - 392usize];
    ["Offset of field: slurm_conf_t::fs_dampening_factor"]
        [::std::mem::offset_of!(slurm_conf_t, fs_dampening_factor) - 396usize];
    ["Offset of field: slurm_conf_t::getnameinfo_cache_timeout"]
        [::std::mem::offset_of!(slurm_conf_t, getnameinfo_cache_timeout) - 398usize];
    ["Offset of field: slurm_conf_t::get_env_timeout"]
        [::std::mem::offset_of!(slurm_conf_t, get_env_timeout) - 400usize];
    ["Offset of field: slurm_conf_t::gres_plugins"]
        [::std::mem::offset_of!(slurm_conf_t, gres_plugins) - 408usize];
    ["Offset of field: slurm_conf_t::group_time"]
        [::std::mem::offset_of!(slurm_conf_t, group_time) - 416usize];
    ["Offset of field: slurm_conf_t::group_force"]
        [::std::mem::offset_of!(slurm_conf_t, group_force) - 418usize];
    ["Offset of field: slurm_conf_t::gpu_freq_def"]
        [::std::mem::offset_of!(slurm_conf_t, gpu_freq_def) - 424usize];
    ["Offset of field: slurm_conf_t::hash_plugin"]
        [::std::mem::offset_of!(slurm_conf_t, hash_plugin) - 432usize];
    ["Offset of field: slurm_conf_t::hash_val"]
        [::std::mem::offset_of!(slurm_conf_t, hash_val) - 440usize];
    ["Offset of field: slurm_conf_t::health_check_interval"]
        [::std::mem::offset_of!(slurm_conf_t, health_check_interval) - 444usize];
    ["Offset of field: slurm_conf_t::health_check_node_state"]
        [::std::mem::offset_of!(slurm_conf_t, health_check_node_state) - 446usize];
    ["Offset of field: slurm_conf_t::health_check_program"]
        [::std::mem::offset_of!(slurm_conf_t, health_check_program) - 448usize];
    ["Offset of field: slurm_conf_t::inactive_limit"]
        [::std::mem::offset_of!(slurm_conf_t, inactive_limit) - 456usize];
    ["Offset of field: slurm_conf_t::interactive_step_opts"]
        [::std::mem::offset_of!(slurm_conf_t, interactive_step_opts) - 464usize];
    ["Offset of field: slurm_conf_t::job_acct_gather_freq"]
        [::std::mem::offset_of!(slurm_conf_t, job_acct_gather_freq) - 472usize];
    ["Offset of field: slurm_conf_t::job_acct_gather_type"]
        [::std::mem::offset_of!(slurm_conf_t, job_acct_gather_type) - 480usize];
    ["Offset of field: slurm_conf_t::job_acct_gather_params"]
        [::std::mem::offset_of!(slurm_conf_t, job_acct_gather_params) - 488usize];
    ["Offset of field: slurm_conf_t::job_acct_oom_kill"]
        [::std::mem::offset_of!(slurm_conf_t, job_acct_oom_kill) - 496usize];
    ["Offset of field: slurm_conf_t::job_comp_host"]
        [::std::mem::offset_of!(slurm_conf_t, job_comp_host) - 504usize];
    ["Offset of field: slurm_conf_t::job_comp_loc"]
        [::std::mem::offset_of!(slurm_conf_t, job_comp_loc) - 512usize];
    ["Offset of field: slurm_conf_t::job_comp_params"]
        [::std::mem::offset_of!(slurm_conf_t, job_comp_params) - 520usize];
    ["Offset of field: slurm_conf_t::job_comp_pass"]
        [::std::mem::offset_of!(slurm_conf_t, job_comp_pass) - 528usize];
    ["Offset of field: slurm_conf_t::job_comp_port"]
        [::std::mem::offset_of!(slurm_conf_t, job_comp_port) - 536usize];
    ["Offset of field: slurm_conf_t::job_comp_type"]
        [::std::mem::offset_of!(slurm_conf_t, job_comp_type) - 544usize];
    ["Offset of field: slurm_conf_t::job_comp_user"]
        [::std::mem::offset_of!(slurm_conf_t, job_comp_user) - 552usize];
    ["Offset of field: slurm_conf_t::job_container_plugin"]
        [::std::mem::offset_of!(slurm_conf_t, job_container_plugin) - 560usize];
    ["Offset of field: slurm_conf_t::job_defaults_list"]
        [::std::mem::offset_of!(slurm_conf_t, job_defaults_list) - 568usize];
    ["Offset of field: slurm_conf_t::job_file_append"]
        [::std::mem::offset_of!(slurm_conf_t, job_file_append) - 576usize];
    ["Offset of field: slurm_conf_t::job_requeue"]
        [::std::mem::offset_of!(slurm_conf_t, job_requeue) - 578usize];
    ["Offset of field: slurm_conf_t::job_submit_plugins"]
        [::std::mem::offset_of!(slurm_conf_t, job_submit_plugins) - 584usize];
    ["Offset of field: slurm_conf_t::keepalive_interval"]
        [::std::mem::offset_of!(slurm_conf_t, keepalive_interval) - 592usize];
    ["Offset of field: slurm_conf_t::keepalive_probes"]
        [::std::mem::offset_of!(slurm_conf_t, keepalive_probes) - 596usize];
    ["Offset of field: slurm_conf_t::keepalive_time"]
        [::std::mem::offset_of!(slurm_conf_t, keepalive_time) - 600usize];
    ["Offset of field: slurm_conf_t::kill_on_bad_exit"]
        [::std::mem::offset_of!(slurm_conf_t, kill_on_bad_exit) - 604usize];
    ["Offset of field: slurm_conf_t::kill_wait"]
        [::std::mem::offset_of!(slurm_conf_t, kill_wait) - 606usize];
    ["Offset of field: slurm_conf_t::launch_params"]
        [::std::mem::offset_of!(slurm_conf_t, launch_params) - 608usize];
    ["Offset of field: slurm_conf_t::licenses"]
        [::std::mem::offset_of!(slurm_conf_t, licenses) - 616usize];
    ["Offset of field: slurm_conf_t::log_fmt"]
        [::std::mem::offset_of!(slurm_conf_t, log_fmt) - 624usize];
    ["Offset of field: slurm_conf_t::mail_domain"]
        [::std::mem::offset_of!(slurm_conf_t, mail_domain) - 632usize];
    ["Offset of field: slurm_conf_t::mail_prog"]
        [::std::mem::offset_of!(slurm_conf_t, mail_prog) - 640usize];
    ["Offset of field: slurm_conf_t::max_array_sz"]
        [::std::mem::offset_of!(slurm_conf_t, max_array_sz) - 648usize];
    ["Offset of field: slurm_conf_t::max_batch_requeue"]
        [::std::mem::offset_of!(slurm_conf_t, max_batch_requeue) - 652usize];
    ["Offset of field: slurm_conf_t::max_dbd_msgs"]
        [::std::mem::offset_of!(slurm_conf_t, max_dbd_msgs) - 656usize];
    ["Offset of field: slurm_conf_t::max_job_cnt"]
        [::std::mem::offset_of!(slurm_conf_t, max_job_cnt) - 660usize];
    ["Offset of field: slurm_conf_t::max_job_id"]
        [::std::mem::offset_of!(slurm_conf_t, max_job_id) - 664usize];
    ["Offset of field: slurm_conf_t::max_mem_per_cpu"]
        [::std::mem::offset_of!(slurm_conf_t, max_mem_per_cpu) - 672usize];
    ["Offset of field: slurm_conf_t::max_node_cnt"]
        [::std::mem::offset_of!(slurm_conf_t, max_node_cnt) - 680usize];
    ["Offset of field: slurm_conf_t::max_step_cnt"]
        [::std::mem::offset_of!(slurm_conf_t, max_step_cnt) - 684usize];
    ["Offset of field: slurm_conf_t::max_tasks_per_node"]
        [::std::mem::offset_of!(slurm_conf_t, max_tasks_per_node) - 688usize];
    ["Offset of field: slurm_conf_t::mcs_plugin"]
        [::std::mem::offset_of!(slurm_conf_t, mcs_plugin) - 696usize];
    ["Offset of field: slurm_conf_t::mcs_plugin_params"]
        [::std::mem::offset_of!(slurm_conf_t, mcs_plugin_params) - 704usize];
    ["Offset of field: slurm_conf_t::min_job_age"]
        [::std::mem::offset_of!(slurm_conf_t, min_job_age) - 712usize];
    ["Offset of field: slurm_conf_t::mpi_conf"]
        [::std::mem::offset_of!(slurm_conf_t, mpi_conf) - 720usize];
    ["Offset of field: slurm_conf_t::mpi_default"]
        [::std::mem::offset_of!(slurm_conf_t, mpi_default) - 728usize];
    ["Offset of field: slurm_conf_t::mpi_params"]
        [::std::mem::offset_of!(slurm_conf_t, mpi_params) - 736usize];
    ["Offset of field: slurm_conf_t::msg_timeout"]
        [::std::mem::offset_of!(slurm_conf_t, msg_timeout) - 744usize];
    ["Offset of field: slurm_conf_t::next_job_id"]
        [::std::mem::offset_of!(slurm_conf_t, next_job_id) - 748usize];
    ["Offset of field: slurm_conf_t::node_features_conf"]
        [::std::mem::offset_of!(slurm_conf_t, node_features_conf) - 752usize];
    ["Offset of field: slurm_conf_t::node_features_plugins"]
        [::std::mem::offset_of!(slurm_conf_t, node_features_plugins) - 760usize];
    ["Offset of field: slurm_conf_t::node_prefix"]
        [::std::mem::offset_of!(slurm_conf_t, node_prefix) - 768usize];
    ["Offset of field: slurm_conf_t::over_time_limit"]
        [::std::mem::offset_of!(slurm_conf_t, over_time_limit) - 776usize];
    ["Offset of field: slurm_conf_t::plugindir"]
        [::std::mem::offset_of!(slurm_conf_t, plugindir) - 784usize];
    ["Offset of field: slurm_conf_t::plugstack"]
        [::std::mem::offset_of!(slurm_conf_t, plugstack) - 792usize];
    ["Offset of field: slurm_conf_t::preempt_exempt_time"]
        [::std::mem::offset_of!(slurm_conf_t, preempt_exempt_time) - 800usize];
    ["Offset of field: slurm_conf_t::preempt_mode"]
        [::std::mem::offset_of!(slurm_conf_t, preempt_mode) - 804usize];
    ["Offset of field: slurm_conf_t::preempt_params"]
        [::std::mem::offset_of!(slurm_conf_t, preempt_params) - 808usize];
    ["Offset of field: slurm_conf_t::preempt_type"]
        [::std::mem::offset_of!(slurm_conf_t, preempt_type) - 816usize];
    ["Offset of field: slurm_conf_t::prep_params"]
        [::std::mem::offset_of!(slurm_conf_t, prep_params) - 824usize];
    ["Offset of field: slurm_conf_t::prep_plugins"]
        [::std::mem::offset_of!(slurm_conf_t, prep_plugins) - 832usize];
    ["Offset of field: slurm_conf_t::priority_decay_hl"]
        [::std::mem::offset_of!(slurm_conf_t, priority_decay_hl) - 840usize];
    ["Offset of field: slurm_conf_t::priority_calc_period"]
        [::std::mem::offset_of!(slurm_conf_t, priority_calc_period) - 844usize];
    ["Offset of field: slurm_conf_t::priority_favor_small"]
        [::std::mem::offset_of!(slurm_conf_t, priority_favor_small) - 848usize];
    ["Offset of field: slurm_conf_t::priority_flags"]
        [::std::mem::offset_of!(slurm_conf_t, priority_flags) - 850usize];
    ["Offset of field: slurm_conf_t::priority_max_age"]
        [::std::mem::offset_of!(slurm_conf_t, priority_max_age) - 852usize];
    ["Offset of field: slurm_conf_t::priority_params"]
        [::std::mem::offset_of!(slurm_conf_t, priority_params) - 856usize];
    ["Offset of field: slurm_conf_t::priority_reset_period"]
        [::std::mem::offset_of!(slurm_conf_t, priority_reset_period) - 864usize];
    ["Offset of field: slurm_conf_t::priority_type"]
        [::std::mem::offset_of!(slurm_conf_t, priority_type) - 872usize];
    ["Offset of field: slurm_conf_t::priority_weight_age"]
        [::std::mem::offset_of!(slurm_conf_t, priority_weight_age) - 880usize];
    ["Offset of field: slurm_conf_t::priority_weight_assoc"]
        [::std::mem::offset_of!(slurm_conf_t, priority_weight_assoc) - 884usize];
    ["Offset of field: slurm_conf_t::priority_weight_fs"]
        [::std::mem::offset_of!(slurm_conf_t, priority_weight_fs) - 888usize];
    ["Offset of field: slurm_conf_t::priority_weight_js"]
        [::std::mem::offset_of!(slurm_conf_t, priority_weight_js) - 892usize];
    ["Offset of field: slurm_conf_t::priority_weight_part"]
        [::std::mem::offset_of!(slurm_conf_t, priority_weight_part) - 896usize];
    ["Offset of field: slurm_conf_t::priority_weight_qos"]
        [::std::mem::offset_of!(slurm_conf_t, priority_weight_qos) - 900usize];
    ["Offset of field: slurm_conf_t::priority_weight_tres"]
        [::std::mem::offset_of!(slurm_conf_t, priority_weight_tres) - 904usize];
    ["Offset of field: slurm_conf_t::private_data"]
        [::std::mem::offset_of!(slurm_conf_t, private_data) - 912usize];
    ["Offset of field: slurm_conf_t::proctrack_type"]
        [::std::mem::offset_of!(slurm_conf_t, proctrack_type) - 920usize];
    ["Offset of field: slurm_conf_t::prolog"]
        [::std::mem::offset_of!(slurm_conf_t, prolog) - 928usize];
    ["Offset of field: slurm_conf_t::prolog_cnt"]
        [::std::mem::offset_of!(slurm_conf_t, prolog_cnt) - 936usize];
    ["Offset of field: slurm_conf_t::prolog_epilog_timeout"]
        [::std::mem::offset_of!(slurm_conf_t, prolog_epilog_timeout) - 940usize];
    ["Offset of field: slurm_conf_t::prolog_slurmctld"]
        [::std::mem::offset_of!(slurm_conf_t, prolog_slurmctld) - 944usize];
    ["Offset of field: slurm_conf_t::prolog_slurmctld_cnt"]
        [::std::mem::offset_of!(slurm_conf_t, prolog_slurmctld_cnt) - 952usize];
    ["Offset of field: slurm_conf_t::propagate_prio_process"]
        [::std::mem::offset_of!(slurm_conf_t, propagate_prio_process) - 956usize];
    ["Offset of field: slurm_conf_t::prolog_flags"]
        [::std::mem::offset_of!(slurm_conf_t, prolog_flags) - 958usize];
    ["Offset of field: slurm_conf_t::propagate_rlimits"]
        [::std::mem::offset_of!(slurm_conf_t, propagate_rlimits) - 960usize];
    ["Offset of field: slurm_conf_t::propagate_rlimits_except"]
        [::std::mem::offset_of!(slurm_conf_t, propagate_rlimits_except) - 968usize];
    ["Offset of field: slurm_conf_t::reboot_program"]
        [::std::mem::offset_of!(slurm_conf_t, reboot_program) - 976usize];
    ["Offset of field: slurm_conf_t::reconfig_flags"]
        [::std::mem::offset_of!(slurm_conf_t, reconfig_flags) - 984usize];
    ["Offset of field: slurm_conf_t::requeue_exit"]
        [::std::mem::offset_of!(slurm_conf_t, requeue_exit) - 992usize];
    ["Offset of field: slurm_conf_t::requeue_exit_hold"]
        [::std::mem::offset_of!(slurm_conf_t, requeue_exit_hold) - 1000usize];
    ["Offset of field: slurm_conf_t::resume_fail_program"]
        [::std::mem::offset_of!(slurm_conf_t, resume_fail_program) - 1008usize];
    ["Offset of field: slurm_conf_t::resume_program"]
        [::std::mem::offset_of!(slurm_conf_t, resume_program) - 1016usize];
    ["Offset of field: slurm_conf_t::resume_rate"]
        [::std::mem::offset_of!(slurm_conf_t, resume_rate) - 1024usize];
    ["Offset of field: slurm_conf_t::resume_timeout"]
        [::std::mem::offset_of!(slurm_conf_t, resume_timeout) - 1026usize];
    ["Offset of field: slurm_conf_t::resv_epilog"]
        [::std::mem::offset_of!(slurm_conf_t, resv_epilog) - 1032usize];
    ["Offset of field: slurm_conf_t::resv_over_run"]
        [::std::mem::offset_of!(slurm_conf_t, resv_over_run) - 1040usize];
    ["Offset of field: slurm_conf_t::resv_prolog"]
        [::std::mem::offset_of!(slurm_conf_t, resv_prolog) - 1048usize];
    ["Offset of field: slurm_conf_t::ret2service"]
        [::std::mem::offset_of!(slurm_conf_t, ret2service) - 1056usize];
    ["Offset of field: slurm_conf_t::sched_logfile"]
        [::std::mem::offset_of!(slurm_conf_t, sched_logfile) - 1064usize];
    ["Offset of field: slurm_conf_t::sched_log_level"]
        [::std::mem::offset_of!(slurm_conf_t, sched_log_level) - 1072usize];
    ["Offset of field: slurm_conf_t::sched_params"]
        [::std::mem::offset_of!(slurm_conf_t, sched_params) - 1080usize];
    ["Offset of field: slurm_conf_t::sched_time_slice"]
        [::std::mem::offset_of!(slurm_conf_t, sched_time_slice) - 1088usize];
    ["Offset of field: slurm_conf_t::schedtype"]
        [::std::mem::offset_of!(slurm_conf_t, schedtype) - 1096usize];
    ["Offset of field: slurm_conf_t::scron_params"]
        [::std::mem::offset_of!(slurm_conf_t, scron_params) - 1104usize];
    ["Offset of field: slurm_conf_t::select_type"]
        [::std::mem::offset_of!(slurm_conf_t, select_type) - 1112usize];
    ["Offset of field: slurm_conf_t::select_conf_key_pairs"]
        [::std::mem::offset_of!(slurm_conf_t, select_conf_key_pairs) - 1120usize];
    ["Offset of field: slurm_conf_t::select_type_param"]
        [::std::mem::offset_of!(slurm_conf_t, select_type_param) - 1128usize];
    ["Offset of field: slurm_conf_t::site_factor_plugin"]
        [::std::mem::offset_of!(slurm_conf_t, site_factor_plugin) - 1136usize];
    ["Offset of field: slurm_conf_t::site_factor_params"]
        [::std::mem::offset_of!(slurm_conf_t, site_factor_params) - 1144usize];
    ["Offset of field: slurm_conf_t::slurm_conf"]
        [::std::mem::offset_of!(slurm_conf_t, slurm_conf) - 1152usize];
    ["Offset of field: slurm_conf_t::slurm_user_id"]
        [::std::mem::offset_of!(slurm_conf_t, slurm_user_id) - 1160usize];
    ["Offset of field: slurm_conf_t::slurm_user_name"]
        [::std::mem::offset_of!(slurm_conf_t, slurm_user_name) - 1168usize];
    ["Offset of field: slurm_conf_t::slurmd_user_id"]
        [::std::mem::offset_of!(slurm_conf_t, slurmd_user_id) - 1176usize];
    ["Offset of field: slurm_conf_t::slurmd_user_name"]
        [::std::mem::offset_of!(slurm_conf_t, slurmd_user_name) - 1184usize];
    ["Offset of field: slurm_conf_t::slurmctld_addr"]
        [::std::mem::offset_of!(slurm_conf_t, slurmctld_addr) - 1192usize];
    ["Offset of field: slurm_conf_t::slurmctld_debug"]
        [::std::mem::offset_of!(slurm_conf_t, slurmctld_debug) - 1200usize];
    ["Offset of field: slurm_conf_t::slurmctld_logfile"]
        [::std::mem::offset_of!(slurm_conf_t, slurmctld_logfile) - 1208usize];
    ["Offset of field: slurm_conf_t::slurmctld_pidfile"]
        [::std::mem::offset_of!(slurm_conf_t, slurmctld_pidfile) - 1216usize];
    ["Offset of field: slurm_conf_t::slurmctld_port"]
        [::std::mem::offset_of!(slurm_conf_t, slurmctld_port) - 1224usize];
    ["Offset of field: slurm_conf_t::slurmctld_port_count"]
        [::std::mem::offset_of!(slurm_conf_t, slurmctld_port_count) - 1228usize];
    ["Offset of field: slurm_conf_t::slurmctld_primary_off_prog"]
        [::std::mem::offset_of!(slurm_conf_t, slurmctld_primary_off_prog) - 1232usize];
    ["Offset of field: slurm_conf_t::slurmctld_primary_on_prog"]
        [::std::mem::offset_of!(slurm_conf_t, slurmctld_primary_on_prog) - 1240usize];
    ["Offset of field: slurm_conf_t::slurmctld_syslog_debug"]
        [::std::mem::offset_of!(slurm_conf_t, slurmctld_syslog_debug) - 1248usize];
    ["Offset of field: slurm_conf_t::slurmctld_timeout"]
        [::std::mem::offset_of!(slurm_conf_t, slurmctld_timeout) - 1250usize];
    ["Offset of field: slurm_conf_t::slurmctld_params"]
        [::std::mem::offset_of!(slurm_conf_t, slurmctld_params) - 1256usize];
    ["Offset of field: slurm_conf_t::slurmd_debug"]
        [::std::mem::offset_of!(slurm_conf_t, slurmd_debug) - 1264usize];
    ["Offset of field: slurm_conf_t::slurmd_logfile"]
        [::std::mem::offset_of!(slurm_conf_t, slurmd_logfile) - 1272usize];
    ["Offset of field: slurm_conf_t::slurmd_params"]
        [::std::mem::offset_of!(slurm_conf_t, slurmd_params) - 1280usize];
    ["Offset of field: slurm_conf_t::slurmd_pidfile"]
        [::std::mem::offset_of!(slurm_conf_t, slurmd_pidfile) - 1288usize];
    ["Offset of field: slurm_conf_t::slurmd_port"]
        [::std::mem::offset_of!(slurm_conf_t, slurmd_port) - 1296usize];
    ["Offset of field: slurm_conf_t::slurmd_spooldir"]
        [::std::mem::offset_of!(slurm_conf_t, slurmd_spooldir) - 1304usize];
    ["Offset of field: slurm_conf_t::slurmd_syslog_debug"]
        [::std::mem::offset_of!(slurm_conf_t, slurmd_syslog_debug) - 1312usize];
    ["Offset of field: slurm_conf_t::slurmd_timeout"]
        [::std::mem::offset_of!(slurm_conf_t, slurmd_timeout) - 1314usize];
    ["Offset of field: slurm_conf_t::srun_epilog"]
        [::std::mem::offset_of!(slurm_conf_t, srun_epilog) - 1320usize];
    ["Offset of field: slurm_conf_t::srun_port_range"]
        [::std::mem::offset_of!(slurm_conf_t, srun_port_range) - 1328usize];
    ["Offset of field: slurm_conf_t::srun_prolog"]
        [::std::mem::offset_of!(slurm_conf_t, srun_prolog) - 1336usize];
    ["Offset of field: slurm_conf_t::state_save_location"]
        [::std::mem::offset_of!(slurm_conf_t, state_save_location) - 1344usize];
    ["Offset of field: slurm_conf_t::suspend_exc_nodes"]
        [::std::mem::offset_of!(slurm_conf_t, suspend_exc_nodes) - 1352usize];
    ["Offset of field: slurm_conf_t::suspend_exc_parts"]
        [::std::mem::offset_of!(slurm_conf_t, suspend_exc_parts) - 1360usize];
    ["Offset of field: slurm_conf_t::suspend_exc_states"]
        [::std::mem::offset_of!(slurm_conf_t, suspend_exc_states) - 1368usize];
    ["Offset of field: slurm_conf_t::suspend_program"]
        [::std::mem::offset_of!(slurm_conf_t, suspend_program) - 1376usize];
    ["Offset of field: slurm_conf_t::suspend_rate"]
        [::std::mem::offset_of!(slurm_conf_t, suspend_rate) - 1384usize];
    ["Offset of field: slurm_conf_t::suspend_time"]
        [::std::mem::offset_of!(slurm_conf_t, suspend_time) - 1388usize];
    ["Offset of field: slurm_conf_t::suspend_timeout"]
        [::std::mem::offset_of!(slurm_conf_t, suspend_timeout) - 1392usize];
    ["Offset of field: slurm_conf_t::switch_type"]
        [::std::mem::offset_of!(slurm_conf_t, switch_type) - 1400usize];
    ["Offset of field: slurm_conf_t::switch_param"]
        [::std::mem::offset_of!(slurm_conf_t, switch_param) - 1408usize];
    ["Offset of field: slurm_conf_t::task_epilog"]
        [::std::mem::offset_of!(slurm_conf_t, task_epilog) - 1416usize];
    ["Offset of field: slurm_conf_t::task_plugin"]
        [::std::mem::offset_of!(slurm_conf_t, task_plugin) - 1424usize];
    ["Offset of field: slurm_conf_t::task_plugin_param"]
        [::std::mem::offset_of!(slurm_conf_t, task_plugin_param) - 1432usize];
    ["Offset of field: slurm_conf_t::task_prolog"]
        [::std::mem::offset_of!(slurm_conf_t, task_prolog) - 1440usize];
    ["Offset of field: slurm_conf_t::tls_params"]
        [::std::mem::offset_of!(slurm_conf_t, tls_params) - 1448usize];
    ["Offset of field: slurm_conf_t::tls_type"]
        [::std::mem::offset_of!(slurm_conf_t, tls_type) - 1456usize];
    ["Offset of field: slurm_conf_t::tcp_timeout"]
        [::std::mem::offset_of!(slurm_conf_t, tcp_timeout) - 1464usize];
    ["Offset of field: slurm_conf_t::tmp_fs"]
        [::std::mem::offset_of!(slurm_conf_t, tmp_fs) - 1472usize];
    ["Offset of field: slurm_conf_t::topology_param"]
        [::std::mem::offset_of!(slurm_conf_t, topology_param) - 1480usize];
    ["Offset of field: slurm_conf_t::topology_plugin"]
        [::std::mem::offset_of!(slurm_conf_t, topology_plugin) - 1488usize];
    ["Offset of field: slurm_conf_t::tree_width"]
        [::std::mem::offset_of!(slurm_conf_t, tree_width) - 1496usize];
    ["Offset of field: slurm_conf_t::unkillable_program"]
        [::std::mem::offset_of!(slurm_conf_t, unkillable_program) - 1504usize];
    ["Offset of field: slurm_conf_t::unkillable_timeout"]
        [::std::mem::offset_of!(slurm_conf_t, unkillable_timeout) - 1512usize];
    ["Offset of field: slurm_conf_t::version"]
        [::std::mem::offset_of!(slurm_conf_t, version) - 1520usize];
    ["Offset of field: slurm_conf_t::vsize_factor"]
        [::std::mem::offset_of!(slurm_conf_t, vsize_factor) - 1528usize];
    ["Offset of field: slurm_conf_t::wait_time"]
        [::std::mem::offset_of!(slurm_conf_t, wait_time) - 1530usize];
    ["Offset of field: slurm_conf_t::x11_params"]
        [::std::mem::offset_of!(slurm_conf_t, x11_params) - 1536usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct slurmd_status_msg {
    pub booted: time_t,
    pub last_slurmctld_msg: time_t,
    pub slurmd_debug: u16,
    pub actual_cpus: u16,
    pub actual_boards: u16,
    pub actual_sockets: u16,
    pub actual_cores: u16,
    pub actual_threads: u16,
    pub actual_real_mem: u64,
    pub actual_tmp_disk: u32,
    pub pid: u32,
    pub hostname: *mut ::std::os::raw::c_char,
    pub slurmd_logfile: *mut ::std::os::raw::c_char,
    pub step_list: *mut ::std::os::raw::c_char,
    pub version: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of slurmd_status_msg"][::std::mem::size_of::<slurmd_status_msg>() - 80usize];
    ["Alignment of slurmd_status_msg"][::std::mem::align_of::<slurmd_status_msg>() - 8usize];
    ["Offset of field: slurmd_status_msg::booted"]
        [::std::mem::offset_of!(slurmd_status_msg, booted) - 0usize];
    ["Offset of field: slurmd_status_msg::last_slurmctld_msg"]
        [::std::mem::offset_of!(slurmd_status_msg, last_slurmctld_msg) - 8usize];
    ["Offset of field: slurmd_status_msg::slurmd_debug"]
        [::std::mem::offset_of!(slurmd_status_msg, slurmd_debug) - 16usize];
    ["Offset of field: slurmd_status_msg::actual_cpus"]
        [::std::mem::offset_of!(slurmd_status_msg, actual_cpus) - 18usize];
    ["Offset of field: slurmd_status_msg::actual_boards"]
        [::std::mem::offset_of!(slurmd_status_msg, actual_boards) - 20usize];
    ["Offset of field: slurmd_status_msg::actual_sockets"]
        [::std::mem::offset_of!(slurmd_status_msg, actual_sockets) - 22usize];
    ["Offset of field: slurmd_status_msg::actual_cores"]
        [::std::mem::offset_of!(slurmd_status_msg, actual_cores) - 24usize];
    ["Offset of field: slurmd_status_msg::actual_threads"]
        [::std::mem::offset_of!(slurmd_status_msg, actual_threads) - 26usize];
    ["Offset of field: slurmd_status_msg::actual_real_mem"]
        [::std::mem::offset_of!(slurmd_status_msg, actual_real_mem) - 32usize];
    ["Offset of field: slurmd_status_msg::actual_tmp_disk"]
        [::std::mem::offset_of!(slurmd_status_msg, actual_tmp_disk) - 40usize];
    ["Offset of field: slurmd_status_msg::pid"]
        [::std::mem::offset_of!(slurmd_status_msg, pid) - 44usize];
    ["Offset of field: slurmd_status_msg::hostname"]
        [::std::mem::offset_of!(slurmd_status_msg, hostname) - 48usize];
    ["Offset of field: slurmd_status_msg::slurmd_logfile"]
        [::std::mem::offset_of!(slurmd_status_msg, slurmd_logfile) - 56usize];
    ["Offset of field: slurmd_status_msg::step_list"]
        [::std::mem::offset_of!(slurmd_status_msg, step_list) - 64usize];
    ["Offset of field: slurmd_status_msg::version"]
        [::std::mem::offset_of!(slurmd_status_msg, version) - 72usize];
};
pub type slurmd_status_t = slurmd_status_msg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct submit_response_msg {
    pub job_id: u32,
    pub step_id: u32,
    pub error_code: u32,
    pub job_submit_user_msg: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of submit_response_msg"][::std::mem::size_of::<submit_response_msg>() - 24usize];
    ["Alignment of submit_response_msg"][::std::mem::align_of::<submit_response_msg>() - 8usize];
    ["Offset of field: submit_response_msg::job_id"]
        [::std::mem::offset_of!(submit_response_msg, job_id) - 0usize];
    ["Offset of field: submit_response_msg::step_id"]
        [::std::mem::offset_of!(submit_response_msg, step_id) - 4usize];
    ["Offset of field: submit_response_msg::error_code"]
        [::std::mem::offset_of!(submit_response_msg, error_code) - 8usize];
    ["Offset of field: submit_response_msg::job_submit_user_msg"]
        [::std::mem::offset_of!(submit_response_msg, job_submit_user_msg) - 16usize];
};
pub type submit_response_msg_t = submit_response_msg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct slurm_update_node_msg {
    pub comment: *mut ::std::os::raw::c_char,
    pub cpu_bind: u32,
    pub cert_token: *mut ::std::os::raw::c_char,
    pub extra: *mut ::std::os::raw::c_char,
    pub features: *mut ::std::os::raw::c_char,
    pub features_act: *mut ::std::os::raw::c_char,
    pub gres: *mut ::std::os::raw::c_char,
    pub instance_id: *mut ::std::os::raw::c_char,
    pub instance_type: *mut ::std::os::raw::c_char,
    pub node_addr: *mut ::std::os::raw::c_char,
    pub node_hostname: *mut ::std::os::raw::c_char,
    pub node_names: *mut ::std::os::raw::c_char,
    pub node_state: u32,
    pub reason: *mut ::std::os::raw::c_char,
    pub reason_uid: u32,
    pub resume_after: u32,
    pub weight: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of slurm_update_node_msg"][::std::mem::size_of::<slurm_update_node_msg>() - 128usize];
    ["Alignment of slurm_update_node_msg"]
        [::std::mem::align_of::<slurm_update_node_msg>() - 8usize];
    ["Offset of field: slurm_update_node_msg::comment"]
        [::std::mem::offset_of!(slurm_update_node_msg, comment) - 0usize];
    ["Offset of field: slurm_update_node_msg::cpu_bind"]
        [::std::mem::offset_of!(slurm_update_node_msg, cpu_bind) - 8usize];
    ["Offset of field: slurm_update_node_msg::cert_token"]
        [::std::mem::offset_of!(slurm_update_node_msg, cert_token) - 16usize];
    ["Offset of field: slurm_update_node_msg::extra"]
        [::std::mem::offset_of!(slurm_update_node_msg, extra) - 24usize];
    ["Offset of field: slurm_update_node_msg::features"]
        [::std::mem::offset_of!(slurm_update_node_msg, features) - 32usize];
    ["Offset of field: slurm_update_node_msg::features_act"]
        [::std::mem::offset_of!(slurm_update_node_msg, features_act) - 40usize];
    ["Offset of field: slurm_update_node_msg::gres"]
        [::std::mem::offset_of!(slurm_update_node_msg, gres) - 48usize];
    ["Offset of field: slurm_update_node_msg::instance_id"]
        [::std::mem::offset_of!(slurm_update_node_msg, instance_id) - 56usize];
    ["Offset of field: slurm_update_node_msg::instance_type"]
        [::std::mem::offset_of!(slurm_update_node_msg, instance_type) - 64usize];
    ["Offset of field: slurm_update_node_msg::node_addr"]
        [::std::mem::offset_of!(slurm_update_node_msg, node_addr) - 72usize];
    ["Offset of field: slurm_update_node_msg::node_hostname"]
        [::std::mem::offset_of!(slurm_update_node_msg, node_hostname) - 80usize];
    ["Offset of field: slurm_update_node_msg::node_names"]
        [::std::mem::offset_of!(slurm_update_node_msg, node_names) - 88usize];
    ["Offset of field: slurm_update_node_msg::node_state"]
        [::std::mem::offset_of!(slurm_update_node_msg, node_state) - 96usize];
    ["Offset of field: slurm_update_node_msg::reason"]
        [::std::mem::offset_of!(slurm_update_node_msg, reason) - 104usize];
    ["Offset of field: slurm_update_node_msg::reason_uid"]
        [::std::mem::offset_of!(slurm_update_node_msg, reason_uid) - 112usize];
    ["Offset of field: slurm_update_node_msg::resume_after"]
        [::std::mem::offset_of!(slurm_update_node_msg, resume_after) - 116usize];
    ["Offset of field: slurm_update_node_msg::weight"]
        [::std::mem::offset_of!(slurm_update_node_msg, weight) - 120usize];
};
pub type update_node_msg_t = slurm_update_node_msg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct slurm_update_front_end_msg {
    pub name: *mut ::std::os::raw::c_char,
    pub node_state: u32,
    pub reason: *mut ::std::os::raw::c_char,
    pub reason_uid: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of slurm_update_front_end_msg"]
        [::std::mem::size_of::<slurm_update_front_end_msg>() - 32usize];
    ["Alignment of slurm_update_front_end_msg"]
        [::std::mem::align_of::<slurm_update_front_end_msg>() - 8usize];
    ["Offset of field: slurm_update_front_end_msg::name"]
        [::std::mem::offset_of!(slurm_update_front_end_msg, name) - 0usize];
    ["Offset of field: slurm_update_front_end_msg::node_state"]
        [::std::mem::offset_of!(slurm_update_front_end_msg, node_state) - 8usize];
    ["Offset of field: slurm_update_front_end_msg::reason"]
        [::std::mem::offset_of!(slurm_update_front_end_msg, reason) - 16usize];
    ["Offset of field: slurm_update_front_end_msg::reason_uid"]
        [::std::mem::offset_of!(slurm_update_front_end_msg, reason_uid) - 24usize];
};
pub type update_front_end_msg_t = slurm_update_front_end_msg;
pub type update_part_msg_t = partition_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct job_sbcast_cred_msg {
    pub job_id: u32,
    pub node_list: *mut ::std::os::raw::c_char,
    pub sbcast_cred: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of job_sbcast_cred_msg"][::std::mem::size_of::<job_sbcast_cred_msg>() - 24usize];
    ["Alignment of job_sbcast_cred_msg"][::std::mem::align_of::<job_sbcast_cred_msg>() - 8usize];
    ["Offset of field: job_sbcast_cred_msg::job_id"]
        [::std::mem::offset_of!(job_sbcast_cred_msg, job_id) - 0usize];
    ["Offset of field: job_sbcast_cred_msg::node_list"]
        [::std::mem::offset_of!(job_sbcast_cred_msg, node_list) - 8usize];
    ["Offset of field: job_sbcast_cred_msg::sbcast_cred"]
        [::std::mem::offset_of!(job_sbcast_cred_msg, sbcast_cred) - 16usize];
};
pub type job_sbcast_cred_msg_t = job_sbcast_cred_msg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sbcast_cred_req_msg {
    pub node_list: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sbcast_cred_req_msg"][::std::mem::size_of::<sbcast_cred_req_msg>() - 8usize];
    ["Alignment of sbcast_cred_req_msg"][::std::mem::align_of::<sbcast_cred_req_msg>() - 8usize];
    ["Offset of field: sbcast_cred_req_msg::node_list"]
        [::std::mem::offset_of!(sbcast_cred_req_msg, node_list) - 0usize];
};
pub type sbcast_cred_req_msg_t = sbcast_cred_req_msg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct token_request_msg_t {
    pub lifespan: u32,
    pub username: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of token_request_msg_t"][::std::mem::size_of::<token_request_msg_t>() - 16usize];
    ["Alignment of token_request_msg_t"][::std::mem::align_of::<token_request_msg_t>() - 8usize];
    ["Offset of field: token_request_msg_t::lifespan"]
        [::std::mem::offset_of!(token_request_msg_t, lifespan) - 0usize];
    ["Offset of field: token_request_msg_t::username"]
        [::std::mem::offset_of!(token_request_msg_t, username) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct token_response_msg_t {
    pub token: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of token_response_msg_t"][::std::mem::size_of::<token_response_msg_t>() - 8usize];
    ["Alignment of token_response_msg_t"][::std::mem::align_of::<token_response_msg_t>() - 8usize];
    ["Offset of field: token_response_msg_t::token"]
        [::std::mem::offset_of!(token_response_msg_t, token) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct slurm_step_ctx_struct {
    _unused: [u8; 0],
}
pub type slurm_step_ctx_t = slurm_step_ctx_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stats_info_request_msg {
    pub command_id: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of stats_info_request_msg"][::std::mem::size_of::<stats_info_request_msg>() - 2usize];
    ["Alignment of stats_info_request_msg"]
        [::std::mem::align_of::<stats_info_request_msg>() - 2usize];
    ["Offset of field: stats_info_request_msg::command_id"]
        [::std::mem::offset_of!(stats_info_request_msg, command_id) - 0usize];
};
pub type stats_info_request_msg_t = stats_info_request_msg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stats_info_response_msg {
    pub parts_packed: u32,
    pub req_time: time_t,
    pub req_time_start: time_t,
    pub server_thread_count: u32,
    pub agent_queue_size: u32,
    pub agent_count: u32,
    pub agent_thread_count: u32,
    pub dbd_agent_queue_size: u32,
    pub gettimeofday_latency: u32,
    pub schedule_cycle_max: u32,
    pub schedule_cycle_last: u32,
    pub schedule_cycle_sum: u32,
    pub schedule_cycle_counter: u32,
    pub schedule_cycle_depth: u32,
    pub schedule_exit: *mut u32,
    pub schedule_exit_cnt: u32,
    pub schedule_queue_len: u32,
    pub jobs_submitted: u32,
    pub jobs_started: u32,
    pub jobs_completed: u32,
    pub jobs_canceled: u32,
    pub jobs_failed: u32,
    pub jobs_pending: u32,
    pub jobs_running: u32,
    pub job_states_ts: time_t,
    pub bf_backfilled_jobs: u32,
    pub bf_last_backfilled_jobs: u32,
    pub bf_backfilled_het_jobs: u32,
    pub bf_cycle_counter: u32,
    pub bf_cycle_sum: u64,
    pub bf_cycle_last: u32,
    pub bf_cycle_max: u32,
    pub bf_exit: *mut u32,
    pub bf_exit_cnt: u32,
    pub bf_last_depth: u32,
    pub bf_last_depth_try: u32,
    pub bf_depth_sum: u32,
    pub bf_depth_try_sum: u32,
    pub bf_queue_len: u32,
    pub bf_queue_len_sum: u32,
    pub bf_table_size: u32,
    pub bf_table_size_sum: u32,
    pub bf_when_last_cycle: time_t,
    pub bf_active: u32,
    pub rpc_type_size: u32,
    pub rpc_type_id: *mut u16,
    pub rpc_type_cnt: *mut u32,
    pub rpc_type_time: *mut u64,
    pub rpc_queue_enabled: u8,
    pub rpc_type_queued: *mut u16,
    pub rpc_type_dropped: *mut u64,
    pub rpc_type_cycle_last: *mut u16,
    pub rpc_type_cycle_max: *mut u16,
    pub rpc_user_size: u32,
    pub rpc_user_id: *mut u32,
    pub rpc_user_cnt: *mut u32,
    pub rpc_user_time: *mut u64,
    pub rpc_queue_type_count: u32,
    pub rpc_queue_type_id: *mut u32,
    pub rpc_queue_count: *mut u32,
    pub rpc_dump_count: u32,
    pub rpc_dump_types: *mut u32,
    pub rpc_dump_hostlist: *mut *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of stats_info_response_msg"]
        [::std::mem::size_of::<stats_info_response_msg>() - 368usize];
    ["Alignment of stats_info_response_msg"]
        [::std::mem::align_of::<stats_info_response_msg>() - 8usize];
    ["Offset of field: stats_info_response_msg::parts_packed"]
        [::std::mem::offset_of!(stats_info_response_msg, parts_packed) - 0usize];
    ["Offset of field: stats_info_response_msg::req_time"]
        [::std::mem::offset_of!(stats_info_response_msg, req_time) - 8usize];
    ["Offset of field: stats_info_response_msg::req_time_start"]
        [::std::mem::offset_of!(stats_info_response_msg, req_time_start) - 16usize];
    ["Offset of field: stats_info_response_msg::server_thread_count"]
        [::std::mem::offset_of!(stats_info_response_msg, server_thread_count) - 24usize];
    ["Offset of field: stats_info_response_msg::agent_queue_size"]
        [::std::mem::offset_of!(stats_info_response_msg, agent_queue_size) - 28usize];
    ["Offset of field: stats_info_response_msg::agent_count"]
        [::std::mem::offset_of!(stats_info_response_msg, agent_count) - 32usize];
    ["Offset of field: stats_info_response_msg::agent_thread_count"]
        [::std::mem::offset_of!(stats_info_response_msg, agent_thread_count) - 36usize];
    ["Offset of field: stats_info_response_msg::dbd_agent_queue_size"]
        [::std::mem::offset_of!(stats_info_response_msg, dbd_agent_queue_size) - 40usize];
    ["Offset of field: stats_info_response_msg::gettimeofday_latency"]
        [::std::mem::offset_of!(stats_info_response_msg, gettimeofday_latency) - 44usize];
    ["Offset of field: stats_info_response_msg::schedule_cycle_max"]
        [::std::mem::offset_of!(stats_info_response_msg, schedule_cycle_max) - 48usize];
    ["Offset of field: stats_info_response_msg::schedule_cycle_last"]
        [::std::mem::offset_of!(stats_info_response_msg, schedule_cycle_last) - 52usize];
    ["Offset of field: stats_info_response_msg::schedule_cycle_sum"]
        [::std::mem::offset_of!(stats_info_response_msg, schedule_cycle_sum) - 56usize];
    ["Offset of field: stats_info_response_msg::schedule_cycle_counter"]
        [::std::mem::offset_of!(stats_info_response_msg, schedule_cycle_counter) - 60usize];
    ["Offset of field: stats_info_response_msg::schedule_cycle_depth"]
        [::std::mem::offset_of!(stats_info_response_msg, schedule_cycle_depth) - 64usize];
    ["Offset of field: stats_info_response_msg::schedule_exit"]
        [::std::mem::offset_of!(stats_info_response_msg, schedule_exit) - 72usize];
    ["Offset of field: stats_info_response_msg::schedule_exit_cnt"]
        [::std::mem::offset_of!(stats_info_response_msg, schedule_exit_cnt) - 80usize];
    ["Offset of field: stats_info_response_msg::schedule_queue_len"]
        [::std::mem::offset_of!(stats_info_response_msg, schedule_queue_len) - 84usize];
    ["Offset of field: stats_info_response_msg::jobs_submitted"]
        [::std::mem::offset_of!(stats_info_response_msg, jobs_submitted) - 88usize];
    ["Offset of field: stats_info_response_msg::jobs_started"]
        [::std::mem::offset_of!(stats_info_response_msg, jobs_started) - 92usize];
    ["Offset of field: stats_info_response_msg::jobs_completed"]
        [::std::mem::offset_of!(stats_info_response_msg, jobs_completed) - 96usize];
    ["Offset of field: stats_info_response_msg::jobs_canceled"]
        [::std::mem::offset_of!(stats_info_response_msg, jobs_canceled) - 100usize];
    ["Offset of field: stats_info_response_msg::jobs_failed"]
        [::std::mem::offset_of!(stats_info_response_msg, jobs_failed) - 104usize];
    ["Offset of field: stats_info_response_msg::jobs_pending"]
        [::std::mem::offset_of!(stats_info_response_msg, jobs_pending) - 108usize];
    ["Offset of field: stats_info_response_msg::jobs_running"]
        [::std::mem::offset_of!(stats_info_response_msg, jobs_running) - 112usize];
    ["Offset of field: stats_info_response_msg::job_states_ts"]
        [::std::mem::offset_of!(stats_info_response_msg, job_states_ts) - 120usize];
    ["Offset of field: stats_info_response_msg::bf_backfilled_jobs"]
        [::std::mem::offset_of!(stats_info_response_msg, bf_backfilled_jobs) - 128usize];
    ["Offset of field: stats_info_response_msg::bf_last_backfilled_jobs"]
        [::std::mem::offset_of!(stats_info_response_msg, bf_last_backfilled_jobs) - 132usize];
    ["Offset of field: stats_info_response_msg::bf_backfilled_het_jobs"]
        [::std::mem::offset_of!(stats_info_response_msg, bf_backfilled_het_jobs) - 136usize];
    ["Offset of field: stats_info_response_msg::bf_cycle_counter"]
        [::std::mem::offset_of!(stats_info_response_msg, bf_cycle_counter) - 140usize];
    ["Offset of field: stats_info_response_msg::bf_cycle_sum"]
        [::std::mem::offset_of!(stats_info_response_msg, bf_cycle_sum) - 144usize];
    ["Offset of field: stats_info_response_msg::bf_cycle_last"]
        [::std::mem::offset_of!(stats_info_response_msg, bf_cycle_last) - 152usize];
    ["Offset of field: stats_info_response_msg::bf_cycle_max"]
        [::std::mem::offset_of!(stats_info_response_msg, bf_cycle_max) - 156usize];
    ["Offset of field: stats_info_response_msg::bf_exit"]
        [::std::mem::offset_of!(stats_info_response_msg, bf_exit) - 160usize];
    ["Offset of field: stats_info_response_msg::bf_exit_cnt"]
        [::std::mem::offset_of!(stats_info_response_msg, bf_exit_cnt) - 168usize];
    ["Offset of field: stats_info_response_msg::bf_last_depth"]
        [::std::mem::offset_of!(stats_info_response_msg, bf_last_depth) - 172usize];
    ["Offset of field: stats_info_response_msg::bf_last_depth_try"]
        [::std::mem::offset_of!(stats_info_response_msg, bf_last_depth_try) - 176usize];
    ["Offset of field: stats_info_response_msg::bf_depth_sum"]
        [::std::mem::offset_of!(stats_info_response_msg, bf_depth_sum) - 180usize];
    ["Offset of field: stats_info_response_msg::bf_depth_try_sum"]
        [::std::mem::offset_of!(stats_info_response_msg, bf_depth_try_sum) - 184usize];
    ["Offset of field: stats_info_response_msg::bf_queue_len"]
        [::std::mem::offset_of!(stats_info_response_msg, bf_queue_len) - 188usize];
    ["Offset of field: stats_info_response_msg::bf_queue_len_sum"]
        [::std::mem::offset_of!(stats_info_response_msg, bf_queue_len_sum) - 192usize];
    ["Offset of field: stats_info_response_msg::bf_table_size"]
        [::std::mem::offset_of!(stats_info_response_msg, bf_table_size) - 196usize];
    ["Offset of field: stats_info_response_msg::bf_table_size_sum"]
        [::std::mem::offset_of!(stats_info_response_msg, bf_table_size_sum) - 200usize];
    ["Offset of field: stats_info_response_msg::bf_when_last_cycle"]
        [::std::mem::offset_of!(stats_info_response_msg, bf_when_last_cycle) - 208usize];
    ["Offset of field: stats_info_response_msg::bf_active"]
        [::std::mem::offset_of!(stats_info_response_msg, bf_active) - 216usize];
    ["Offset of field: stats_info_response_msg::rpc_type_size"]
        [::std::mem::offset_of!(stats_info_response_msg, rpc_type_size) - 220usize];
    ["Offset of field: stats_info_response_msg::rpc_type_id"]
        [::std::mem::offset_of!(stats_info_response_msg, rpc_type_id) - 224usize];
    ["Offset of field: stats_info_response_msg::rpc_type_cnt"]
        [::std::mem::offset_of!(stats_info_response_msg, rpc_type_cnt) - 232usize];
    ["Offset of field: stats_info_response_msg::rpc_type_time"]
        [::std::mem::offset_of!(stats_info_response_msg, rpc_type_time) - 240usize];
    ["Offset of field: stats_info_response_msg::rpc_queue_enabled"]
        [::std::mem::offset_of!(stats_info_response_msg, rpc_queue_enabled) - 248usize];
    ["Offset of field: stats_info_response_msg::rpc_type_queued"]
        [::std::mem::offset_of!(stats_info_response_msg, rpc_type_queued) - 256usize];
    ["Offset of field: stats_info_response_msg::rpc_type_dropped"]
        [::std::mem::offset_of!(stats_info_response_msg, rpc_type_dropped) - 264usize];
    ["Offset of field: stats_info_response_msg::rpc_type_cycle_last"]
        [::std::mem::offset_of!(stats_info_response_msg, rpc_type_cycle_last) - 272usize];
    ["Offset of field: stats_info_response_msg::rpc_type_cycle_max"]
        [::std::mem::offset_of!(stats_info_response_msg, rpc_type_cycle_max) - 280usize];
    ["Offset of field: stats_info_response_msg::rpc_user_size"]
        [::std::mem::offset_of!(stats_info_response_msg, rpc_user_size) - 288usize];
    ["Offset of field: stats_info_response_msg::rpc_user_id"]
        [::std::mem::offset_of!(stats_info_response_msg, rpc_user_id) - 296usize];
    ["Offset of field: stats_info_response_msg::rpc_user_cnt"]
        [::std::mem::offset_of!(stats_info_response_msg, rpc_user_cnt) - 304usize];
    ["Offset of field: stats_info_response_msg::rpc_user_time"]
        [::std::mem::offset_of!(stats_info_response_msg, rpc_user_time) - 312usize];
    ["Offset of field: stats_info_response_msg::rpc_queue_type_count"]
        [::std::mem::offset_of!(stats_info_response_msg, rpc_queue_type_count) - 320usize];
    ["Offset of field: stats_info_response_msg::rpc_queue_type_id"]
        [::std::mem::offset_of!(stats_info_response_msg, rpc_queue_type_id) - 328usize];
    ["Offset of field: stats_info_response_msg::rpc_queue_count"]
        [::std::mem::offset_of!(stats_info_response_msg, rpc_queue_count) - 336usize];
    ["Offset of field: stats_info_response_msg::rpc_dump_count"]
        [::std::mem::offset_of!(stats_info_response_msg, rpc_dump_count) - 344usize];
    ["Offset of field: stats_info_response_msg::rpc_dump_types"]
        [::std::mem::offset_of!(stats_info_response_msg, rpc_dump_types) - 352usize];
    ["Offset of field: stats_info_response_msg::rpc_dump_hostlist"]
        [::std::mem::offset_of!(stats_info_response_msg, rpc_dump_hostlist) - 360usize];
};
pub type stats_info_response_msg_t = stats_info_response_msg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct trigger_info {
    pub flags: u16,
    pub trig_id: u32,
    pub res_type: u16,
    pub res_id: *mut ::std::os::raw::c_char,
    pub control_inx: u32,
    pub trig_type: u32,
    pub offset: u16,
    pub user_id: u32,
    pub program: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of trigger_info"][::std::mem::size_of::<trigger_info>() - 48usize];
    ["Alignment of trigger_info"][::std::mem::align_of::<trigger_info>() - 8usize];
    ["Offset of field: trigger_info::flags"][::std::mem::offset_of!(trigger_info, flags) - 0usize];
    ["Offset of field: trigger_info::trig_id"]
        [::std::mem::offset_of!(trigger_info, trig_id) - 4usize];
    ["Offset of field: trigger_info::res_type"]
        [::std::mem::offset_of!(trigger_info, res_type) - 8usize];
    ["Offset of field: trigger_info::res_id"]
        [::std::mem::offset_of!(trigger_info, res_id) - 16usize];
    ["Offset of field: trigger_info::control_inx"]
        [::std::mem::offset_of!(trigger_info, control_inx) - 24usize];
    ["Offset of field: trigger_info::trig_type"]
        [::std::mem::offset_of!(trigger_info, trig_type) - 28usize];
    ["Offset of field: trigger_info::offset"]
        [::std::mem::offset_of!(trigger_info, offset) - 32usize];
    ["Offset of field: trigger_info::user_id"]
        [::std::mem::offset_of!(trigger_info, user_id) - 36usize];
    ["Offset of field: trigger_info::program"]
        [::std::mem::offset_of!(trigger_info, program) - 40usize];
};
pub type trigger_info_t = trigger_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct trigger_info_msg {
    pub record_count: u32,
    pub trigger_array: *mut trigger_info_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of trigger_info_msg"][::std::mem::size_of::<trigger_info_msg>() - 16usize];
    ["Alignment of trigger_info_msg"][::std::mem::align_of::<trigger_info_msg>() - 8usize];
    ["Offset of field: trigger_info_msg::record_count"]
        [::std::mem::offset_of!(trigger_info_msg, record_count) - 0usize];
    ["Offset of field: trigger_info_msg::trigger_array"]
        [::std::mem::offset_of!(trigger_info_msg, trigger_array) - 8usize];
};
pub type trigger_info_msg_t = trigger_info_msg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct slurm_license_info {
    pub name: *mut ::std::os::raw::c_char,
    pub total: u32,
    pub in_use: u32,
    pub available: u32,
    pub remote: u8,
    pub reserved: u32,
    pub last_consumed: u32,
    pub last_deficit: u32,
    pub last_update: time_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of slurm_license_info"][::std::mem::size_of::<slurm_license_info>() - 48usize];
    ["Alignment of slurm_license_info"][::std::mem::align_of::<slurm_license_info>() - 8usize];
    ["Offset of field: slurm_license_info::name"]
        [::std::mem::offset_of!(slurm_license_info, name) - 0usize];
    ["Offset of field: slurm_license_info::total"]
        [::std::mem::offset_of!(slurm_license_info, total) - 8usize];
    ["Offset of field: slurm_license_info::in_use"]
        [::std::mem::offset_of!(slurm_license_info, in_use) - 12usize];
    ["Offset of field: slurm_license_info::available"]
        [::std::mem::offset_of!(slurm_license_info, available) - 16usize];
    ["Offset of field: slurm_license_info::remote"]
        [::std::mem::offset_of!(slurm_license_info, remote) - 20usize];
    ["Offset of field: slurm_license_info::reserved"]
        [::std::mem::offset_of!(slurm_license_info, reserved) - 24usize];
    ["Offset of field: slurm_license_info::last_consumed"]
        [::std::mem::offset_of!(slurm_license_info, last_consumed) - 28usize];
    ["Offset of field: slurm_license_info::last_deficit"]
        [::std::mem::offset_of!(slurm_license_info, last_deficit) - 32usize];
    ["Offset of field: slurm_license_info::last_update"]
        [::std::mem::offset_of!(slurm_license_info, last_update) - 40usize];
};
pub type slurm_license_info_t = slurm_license_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct license_info_msg {
    pub last_update: time_t,
    pub num_lic: u32,
    pub lic_array: *mut slurm_license_info_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of license_info_msg"][::std::mem::size_of::<license_info_msg>() - 24usize];
    ["Alignment of license_info_msg"][::std::mem::align_of::<license_info_msg>() - 8usize];
    ["Offset of field: license_info_msg::last_update"]
        [::std::mem::offset_of!(license_info_msg, last_update) - 0usize];
    ["Offset of field: license_info_msg::num_lic"]
        [::std::mem::offset_of!(license_info_msg, num_lic) - 8usize];
    ["Offset of field: license_info_msg::lic_array"]
        [::std::mem::offset_of!(license_info_msg, lic_array) - 16usize];
};
pub type license_info_msg_t = license_info_msg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct job_array_resp_msg_t {
    pub job_array_count: u32,
    pub job_array_id: *mut *mut ::std::os::raw::c_char,
    pub error_code: *mut u32,
    pub err_msg: *mut *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of job_array_resp_msg_t"][::std::mem::size_of::<job_array_resp_msg_t>() - 32usize];
    ["Alignment of job_array_resp_msg_t"][::std::mem::align_of::<job_array_resp_msg_t>() - 8usize];
    ["Offset of field: job_array_resp_msg_t::job_array_count"]
        [::std::mem::offset_of!(job_array_resp_msg_t, job_array_count) - 0usize];
    ["Offset of field: job_array_resp_msg_t::job_array_id"]
        [::std::mem::offset_of!(job_array_resp_msg_t, job_array_id) - 8usize];
    ["Offset of field: job_array_resp_msg_t::error_code"]
        [::std::mem::offset_of!(job_array_resp_msg_t, error_code) - 16usize];
    ["Offset of field: job_array_resp_msg_t::err_msg"]
        [::std::mem::offset_of!(job_array_resp_msg_t, err_msg) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct assoc_mgr_info_msg_t {
    pub assoc_list: *mut list_t,
    pub qos_list: *mut list_t,
    pub tres_cnt: u32,
    pub tres_names: *mut *mut ::std::os::raw::c_char,
    pub user_list: *mut list_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of assoc_mgr_info_msg_t"][::std::mem::size_of::<assoc_mgr_info_msg_t>() - 40usize];
    ["Alignment of assoc_mgr_info_msg_t"][::std::mem::align_of::<assoc_mgr_info_msg_t>() - 8usize];
    ["Offset of field: assoc_mgr_info_msg_t::assoc_list"]
        [::std::mem::offset_of!(assoc_mgr_info_msg_t, assoc_list) - 0usize];
    ["Offset of field: assoc_mgr_info_msg_t::qos_list"]
        [::std::mem::offset_of!(assoc_mgr_info_msg_t, qos_list) - 8usize];
    ["Offset of field: assoc_mgr_info_msg_t::tres_cnt"]
        [::std::mem::offset_of!(assoc_mgr_info_msg_t, tres_cnt) - 16usize];
    ["Offset of field: assoc_mgr_info_msg_t::tres_names"]
        [::std::mem::offset_of!(assoc_mgr_info_msg_t, tres_names) - 24usize];
    ["Offset of field: assoc_mgr_info_msg_t::user_list"]
        [::std::mem::offset_of!(assoc_mgr_info_msg_t, user_list) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct assoc_mgr_info_request_msg_t {
    pub acct_list: *mut list_t,
    pub flags: u32,
    pub qos_list: *mut list_t,
    pub user_list: *mut list_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of assoc_mgr_info_request_msg_t"]
        [::std::mem::size_of::<assoc_mgr_info_request_msg_t>() - 32usize];
    ["Alignment of assoc_mgr_info_request_msg_t"]
        [::std::mem::align_of::<assoc_mgr_info_request_msg_t>() - 8usize];
    ["Offset of field: assoc_mgr_info_request_msg_t::acct_list"]
        [::std::mem::offset_of!(assoc_mgr_info_request_msg_t, acct_list) - 0usize];
    ["Offset of field: assoc_mgr_info_request_msg_t::flags"]
        [::std::mem::offset_of!(assoc_mgr_info_request_msg_t, flags) - 8usize];
    ["Offset of field: assoc_mgr_info_request_msg_t::qos_list"]
        [::std::mem::offset_of!(assoc_mgr_info_request_msg_t, qos_list) - 16usize];
    ["Offset of field: assoc_mgr_info_request_msg_t::user_list"]
        [::std::mem::offset_of!(assoc_mgr_info_request_msg_t, user_list) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct network_callerid_msg {
    pub ip_src: [::std::os::raw::c_uchar; 16usize],
    pub ip_dst: [::std::os::raw::c_uchar; 16usize],
    pub port_src: u32,
    pub port_dst: u32,
    pub af: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of network_callerid_msg"][::std::mem::size_of::<network_callerid_msg>() - 44usize];
    ["Alignment of network_callerid_msg"][::std::mem::align_of::<network_callerid_msg>() - 4usize];
    ["Offset of field: network_callerid_msg::ip_src"]
        [::std::mem::offset_of!(network_callerid_msg, ip_src) - 0usize];
    ["Offset of field: network_callerid_msg::ip_dst"]
        [::std::mem::offset_of!(network_callerid_msg, ip_dst) - 16usize];
    ["Offset of field: network_callerid_msg::port_src"]
        [::std::mem::offset_of!(network_callerid_msg, port_src) - 32usize];
    ["Offset of field: network_callerid_msg::port_dst"]
        [::std::mem::offset_of!(network_callerid_msg, port_dst) - 36usize];
    ["Offset of field: network_callerid_msg::af"]
        [::std::mem::offset_of!(network_callerid_msg, af) - 40usize];
};
pub type network_callerid_msg_t = network_callerid_msg;
unsafe extern "C" {
    pub fn slurm_get_cluster_info(
        cluster_records: *mut *mut list_t,
        cluster_names: *mut ::std::os::raw::c_char,
        show_flags: u16,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_init_job_desc_msg(job_desc_msg: *mut job_desc_msg_t);
}
unsafe extern "C" {
    pub fn slurm_allocate_resources(
        job_desc_msg: *mut job_desc_msg_t,
        job_alloc_resp_msg: *mut *mut resource_allocation_response_msg_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_allocate_resources_blocking(
        user_req: *const job_desc_msg_t,
        timeout: time_t,
        pending_callback: ::std::option::Option<unsafe extern "C" fn(job_id: u32)>,
    ) -> *mut resource_allocation_response_msg_t;
}
unsafe extern "C" {
    pub fn slurm_free_resource_allocation_response_msg(
        msg: *mut resource_allocation_response_msg_t,
    );
}
unsafe extern "C" {
    pub fn slurm_allocate_het_job_blocking(
        job_req_list: *mut list_t,
        timeout: time_t,
        pending_callback: ::std::option::Option<unsafe extern "C" fn(job_id: u32)>,
    ) -> *mut list_t;
}
unsafe extern "C" {
    pub fn slurm_allocation_lookup(
        job_id: u32,
        resp: *mut *mut resource_allocation_response_msg_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_het_job_lookup(jobid: u32, resp: *mut *mut list_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_read_hostfile(
        filename: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn slurm_allocation_msg_thr_create(
        port: *mut u16,
        callbacks: *const slurm_allocation_callbacks_t,
    ) -> *mut allocation_msg_thread_t;
}
unsafe extern "C" {
    pub fn slurm_allocation_msg_thr_destroy(msg_thr: *mut allocation_msg_thread_t);
}
unsafe extern "C" {
    pub fn slurm_submit_batch_job(
        job_desc_msg: *mut job_desc_msg_t,
        slurm_alloc_msg: *mut *mut submit_response_msg_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_submit_batch_het_job(
        job_req_list: *mut list_t,
        slurm_alloc_msg: *mut *mut submit_response_msg_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_free_submit_response_response_msg(msg: *mut submit_response_msg_t);
}
unsafe extern "C" {
    pub fn slurm_job_batch_script(out: *mut FILE, jobid: u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_job_will_run(job_desc_msg: *mut job_desc_msg_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_het_job_will_run(job_req_list: *mut list_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_job_will_run2(
        req: *mut job_desc_msg_t,
        will_run_resp: *mut *mut will_run_response_msg_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_sbcast_lookup(
        selected_step: *mut slurm_selected_step_t,
        info: *mut *mut job_sbcast_cred_msg_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_free_sbcast_cred_msg(msg: *mut job_sbcast_cred_msg_t);
}
unsafe extern "C" {
    pub fn slurm_load_licenses(
        arg1: time_t,
        arg2: *mut *mut license_info_msg_t,
        arg3: u16,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_free_license_info_msg(arg1: *mut license_info_msg_t);
}
unsafe extern "C" {
    pub fn slurm_load_assoc_mgr_info(
        arg1: *mut assoc_mgr_info_request_msg_t,
        arg2: *mut *mut assoc_mgr_info_msg_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_free_assoc_mgr_info_msg(arg1: *mut assoc_mgr_info_msg_t);
}
unsafe extern "C" {
    pub fn slurm_free_assoc_mgr_info_request_members(arg1: *mut assoc_mgr_info_request_msg_t);
}
unsafe extern "C" {
    pub fn slurm_free_assoc_mgr_info_request_msg(arg1: *mut assoc_mgr_info_request_msg_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct job_step_kill_msg {
    pub sjob_id: *mut ::std::os::raw::c_char,
    pub signal: u16,
    pub flags: u16,
    pub sibling: *mut ::std::os::raw::c_char,
    pub step_id: slurm_step_id_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of job_step_kill_msg"][::std::mem::size_of::<job_step_kill_msg>() - 48usize];
    ["Alignment of job_step_kill_msg"][::std::mem::align_of::<job_step_kill_msg>() - 8usize];
    ["Offset of field: job_step_kill_msg::sjob_id"]
        [::std::mem::offset_of!(job_step_kill_msg, sjob_id) - 0usize];
    ["Offset of field: job_step_kill_msg::signal"]
        [::std::mem::offset_of!(job_step_kill_msg, signal) - 8usize];
    ["Offset of field: job_step_kill_msg::flags"]
        [::std::mem::offset_of!(job_step_kill_msg, flags) - 10usize];
    ["Offset of field: job_step_kill_msg::sibling"]
        [::std::mem::offset_of!(job_step_kill_msg, sibling) - 16usize];
    ["Offset of field: job_step_kill_msg::step_id"]
        [::std::mem::offset_of!(job_step_kill_msg, step_id) - 24usize];
};
pub type job_step_kill_msg_t = job_step_kill_msg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kill_jobs_msg_t {
    pub account: *mut ::std::os::raw::c_char,
    pub flags: u16,
    pub job_name: *mut ::std::os::raw::c_char,
    pub jobs_array: *mut *mut ::std::os::raw::c_char,
    pub jobs_cnt: u32,
    pub partition: *mut ::std::os::raw::c_char,
    pub qos: *mut ::std::os::raw::c_char,
    pub reservation: *mut ::std::os::raw::c_char,
    pub signal: u16,
    pub state: u32,
    pub user_id: u32,
    pub user_name: *mut ::std::os::raw::c_char,
    pub wckey: *mut ::std::os::raw::c_char,
    pub nodelist: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kill_jobs_msg_t"][::std::mem::size_of::<kill_jobs_msg_t>() - 104usize];
    ["Alignment of kill_jobs_msg_t"][::std::mem::align_of::<kill_jobs_msg_t>() - 8usize];
    ["Offset of field: kill_jobs_msg_t::account"]
        [::std::mem::offset_of!(kill_jobs_msg_t, account) - 0usize];
    ["Offset of field: kill_jobs_msg_t::flags"]
        [::std::mem::offset_of!(kill_jobs_msg_t, flags) - 8usize];
    ["Offset of field: kill_jobs_msg_t::job_name"]
        [::std::mem::offset_of!(kill_jobs_msg_t, job_name) - 16usize];
    ["Offset of field: kill_jobs_msg_t::jobs_array"]
        [::std::mem::offset_of!(kill_jobs_msg_t, jobs_array) - 24usize];
    ["Offset of field: kill_jobs_msg_t::jobs_cnt"]
        [::std::mem::offset_of!(kill_jobs_msg_t, jobs_cnt) - 32usize];
    ["Offset of field: kill_jobs_msg_t::partition"]
        [::std::mem::offset_of!(kill_jobs_msg_t, partition) - 40usize];
    ["Offset of field: kill_jobs_msg_t::qos"]
        [::std::mem::offset_of!(kill_jobs_msg_t, qos) - 48usize];
    ["Offset of field: kill_jobs_msg_t::reservation"]
        [::std::mem::offset_of!(kill_jobs_msg_t, reservation) - 56usize];
    ["Offset of field: kill_jobs_msg_t::signal"]
        [::std::mem::offset_of!(kill_jobs_msg_t, signal) - 64usize];
    ["Offset of field: kill_jobs_msg_t::state"]
        [::std::mem::offset_of!(kill_jobs_msg_t, state) - 68usize];
    ["Offset of field: kill_jobs_msg_t::user_id"]
        [::std::mem::offset_of!(kill_jobs_msg_t, user_id) - 72usize];
    ["Offset of field: kill_jobs_msg_t::user_name"]
        [::std::mem::offset_of!(kill_jobs_msg_t, user_name) - 80usize];
    ["Offset of field: kill_jobs_msg_t::wckey"]
        [::std::mem::offset_of!(kill_jobs_msg_t, wckey) - 88usize];
    ["Offset of field: kill_jobs_msg_t::nodelist"]
        [::std::mem::offset_of!(kill_jobs_msg_t, nodelist) - 96usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kill_jobs_resp_job_t {
    pub error_code: u32,
    pub error_msg: *mut ::std::os::raw::c_char,
    pub id: *mut slurm_selected_step_t,
    pub real_job_id: u32,
    pub sibling_name: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kill_jobs_resp_job_t"][::std::mem::size_of::<kill_jobs_resp_job_t>() - 40usize];
    ["Alignment of kill_jobs_resp_job_t"][::std::mem::align_of::<kill_jobs_resp_job_t>() - 8usize];
    ["Offset of field: kill_jobs_resp_job_t::error_code"]
        [::std::mem::offset_of!(kill_jobs_resp_job_t, error_code) - 0usize];
    ["Offset of field: kill_jobs_resp_job_t::error_msg"]
        [::std::mem::offset_of!(kill_jobs_resp_job_t, error_msg) - 8usize];
    ["Offset of field: kill_jobs_resp_job_t::id"]
        [::std::mem::offset_of!(kill_jobs_resp_job_t, id) - 16usize];
    ["Offset of field: kill_jobs_resp_job_t::real_job_id"]
        [::std::mem::offset_of!(kill_jobs_resp_job_t, real_job_id) - 24usize];
    ["Offset of field: kill_jobs_resp_job_t::sibling_name"]
        [::std::mem::offset_of!(kill_jobs_resp_job_t, sibling_name) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kill_jobs_resp_msg_t {
    pub job_responses: *mut kill_jobs_resp_job_t,
    pub jobs_cnt: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kill_jobs_resp_msg_t"][::std::mem::size_of::<kill_jobs_resp_msg_t>() - 16usize];
    ["Alignment of kill_jobs_resp_msg_t"][::std::mem::align_of::<kill_jobs_resp_msg_t>() - 8usize];
    ["Offset of field: kill_jobs_resp_msg_t::job_responses"]
        [::std::mem::offset_of!(kill_jobs_resp_msg_t, job_responses) - 0usize];
    ["Offset of field: kill_jobs_resp_msg_t::jobs_cnt"]
        [::std::mem::offset_of!(kill_jobs_resp_msg_t, jobs_cnt) - 8usize];
};
unsafe extern "C" {
    pub fn slurm_kill_job(job_id: u32, signal: u16, flags: u16) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_kill_job_step(
        job_id: u32,
        step_id: u32,
        signal: u16,
        flags: u16,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_kill_job2(
        job_id: *const ::std::os::raw::c_char,
        signal: u16,
        flags: u16,
        sibling: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_kill_jobs(
        kill_msg: *mut kill_jobs_msg_t,
        kill_msg_resp: *mut *mut kill_jobs_resp_msg_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_signal_job(job_id: u32, signal: u16) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_signal_job_step(job_id: u32, step_id: u32, signal: u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_complete_job(job_id: u32, job_return_code: u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_terminate_job_step(job_id: u32, step_id: u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_step_launch_params_t_init(ptr: *mut slurm_step_launch_params_t);
}
unsafe extern "C" {
    pub fn slurm_step_launch(
        ctx: *mut slurm_step_ctx_t,
        params: *const slurm_step_launch_params_t,
        callbacks: *const slurm_step_launch_callbacks_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_step_launch_add(
        ctx: *mut slurm_step_ctx_t,
        first_ctx: *mut slurm_step_ctx_t,
        params: *const slurm_step_launch_params_t,
        node_list: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_step_launch_wait_start(ctx: *mut slurm_step_ctx_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_step_launch_wait_finish(ctx: *mut slurm_step_ctx_t);
}
unsafe extern "C" {
    pub fn slurm_step_launch_abort(ctx: *mut slurm_step_ctx_t);
}
unsafe extern "C" {
    pub fn slurm_step_launch_fwd_signal(ctx: *mut slurm_step_ctx_t, signo: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn slurm_step_launch_fwd_wake(ctx: *mut slurm_step_ctx_t);
}
unsafe extern "C" {
    pub fn slurm_api_version() -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn slurm_load_ctl_conf(
        update_time: time_t,
        slurm_ctl_conf_ptr: *mut *mut slurm_conf_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_free_ctl_conf(slurm_ctl_conf_ptr: *mut slurm_conf_t);
}
unsafe extern "C" {
    pub fn slurm_print_ctl_conf(out: *mut FILE, slurm_ctl_conf_ptr: *mut slurm_conf_t);
}
unsafe extern "C" {
    pub fn slurm_write_ctl_conf(
        slurm_ctl_conf_ptr: *mut slurm_conf_t,
        node_info_ptr: *mut node_info_msg_t,
        part_info_ptr: *mut partition_info_msg_t,
    );
}
unsafe extern "C" {
    pub fn slurm_ctl_conf_2_key_pairs(
        slurm_ctl_conf_ptr: *mut slurm_conf_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn slurm_print_key_pairs(
        out: *mut FILE,
        key_pairs: *mut ::std::os::raw::c_void,
        title: *mut ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    pub fn slurm_load_slurmd_status(
        slurmd_status_ptr: *mut *mut slurmd_status_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_free_slurmd_status(slurmd_status_ptr: *mut slurmd_status_t);
}
unsafe extern "C" {
    pub fn slurm_print_slurmd_status(out: *mut FILE, slurmd_status_ptr: *mut slurmd_status_t);
}
unsafe extern "C" {
    pub fn slurm_init_update_step_msg(step_msg: *mut step_update_request_msg_t);
}
unsafe extern "C" {
    pub fn slurm_get_statistics(
        buf: *mut *mut stats_info_response_msg_t,
        req: *mut stats_info_request_msg_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_reset_statistics(req: *mut stats_info_request_msg_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_free_job_info_msg(job_buffer_ptr: *mut job_info_msg_t);
}
unsafe extern "C" {
    pub fn slurm_free_job_state_response_msg(msg: *mut job_state_response_msg_t);
}
unsafe extern "C" {
    pub fn slurm_free_priority_factors_response_msg(
        factors_resp: *mut priority_factors_response_msg_t,
    );
}
unsafe extern "C" {
    pub fn slurm_get_end_time(jobid: u32, end_time_ptr: *mut time_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_get_job_stderr(
        buf: *mut ::std::os::raw::c_char,
        buf_size: ::std::os::raw::c_int,
        job_ptr: *mut job_info_t,
    );
}
unsafe extern "C" {
    pub fn slurm_get_job_stdin(
        buf: *mut ::std::os::raw::c_char,
        buf_size: ::std::os::raw::c_int,
        job_ptr: *mut job_info_t,
    );
}
unsafe extern "C" {
    pub fn slurm_get_job_stdout(
        buf: *mut ::std::os::raw::c_char,
        buf_size: ::std::os::raw::c_int,
        job_ptr: *mut job_info_t,
    );
}
unsafe extern "C" {
    pub fn slurm_get_rem_time(jobid: u32) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn slurm_job_node_ready(job_id: u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_load_job(
        resp: *mut *mut job_info_msg_t,
        job_id: u32,
        show_flags: u16,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_load_job_prio(
        factors_resp: *mut *mut priority_factors_response_msg_t,
        show_flags: u16,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_load_job_user(
        job_info_msg_pptr: *mut *mut job_info_msg_t,
        user_id: u32,
        show_flags: u16,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_load_jobs(
        update_time: time_t,
        job_info_msg_pptr: *mut *mut job_info_msg_t,
        show_flags: u16,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_load_job_state(
        job_id_count: ::std::os::raw::c_int,
        job_ids: *mut slurm_selected_step_t,
        jsr_pptr: *mut *mut job_state_response_msg_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_notify_job(
        job_id: u32,
        message: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_pid2jobid(job_pid: pid_t, job_id_ptr: *mut u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_update_job(job_msg: *mut job_desc_msg_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_update_job2(
        job_msg: *mut job_desc_msg_t,
        resp: *mut *mut job_array_resp_msg_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_get_job_steps(
        update_time: time_t,
        job_id: u32,
        step_id: u32,
        step_response_pptr: *mut *mut job_step_info_response_msg_t,
        show_flags: u16,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_find_step_ids_by_container_id(
        show_flags: u16,
        uid: uid_t,
        container_id: *const ::std::os::raw::c_char,
        steps: *mut list_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_free_job_step_info_response_msg(msg: *mut job_step_info_response_msg_t);
}
unsafe extern "C" {
    pub fn slurm_print_job_step_info_msg(
        out: *mut FILE,
        job_step_info_msg_ptr: *mut job_step_info_response_msg_t,
        one_liner: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn slurm_print_job_step_info(
        out: *mut FILE,
        step_ptr: *mut job_step_info_t,
        one_liner: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn slurm_job_step_layout_get(step_id: *mut slurm_step_id_t) -> *mut slurm_step_layout_t;
}
unsafe extern "C" {
    pub fn slurm_sprint_job_step_info(
        step_ptr: *mut job_step_info_t,
        one_liner: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn slurm_job_step_stat(
        step_id: *mut slurm_step_id_t,
        node_list: *mut ::std::os::raw::c_char,
        use_protocol_ver: u16,
        resp: *mut *mut job_step_stat_response_msg_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_job_step_get_pids(
        step_id: *mut slurm_step_id_t,
        node_list: *mut ::std::os::raw::c_char,
        resp: *mut *mut job_step_pids_response_msg_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_job_step_layout_free(layout: *mut slurm_step_layout_t);
}
unsafe extern "C" {
    pub fn slurm_job_step_pids_free(object: *mut job_step_pids_t);
}
unsafe extern "C" {
    pub fn slurm_job_step_pids_response_msg_free(object: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn slurm_job_step_stat_free(object: *mut job_step_stat_t);
}
unsafe extern "C" {
    pub fn slurm_job_step_stat_response_msg_free(object: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn slurm_update_step(step_msg: *mut step_update_request_msg_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_destroy_selected_step(object: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn slurm_load_node(
        update_time: time_t,
        resp: *mut *mut node_info_msg_t,
        show_flags: u16,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_load_node2(
        update_time: time_t,
        resp: *mut *mut node_info_msg_t,
        show_flags: u16,
        cluster: *mut slurmdb_cluster_rec_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_load_node_single(
        resp: *mut *mut node_info_msg_t,
        node_name: *mut ::std::os::raw::c_char,
        show_flags: u16,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_load_node_single2(
        resp: *mut *mut node_info_msg_t,
        node_name: *mut ::std::os::raw::c_char,
        show_flags: u16,
        cluster: *mut slurmdb_cluster_rec_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_populate_node_partitions(
        node_buffer_ptr: *mut node_info_msg_t,
        part_buffer_ptr: *mut partition_info_msg_t,
    );
}
unsafe extern "C" {
    pub fn slurm_get_node_energy(
        host: *mut ::std::os::raw::c_char,
        context_id: u16,
        delta: u16,
        sensors_cnt: *mut u16,
        energy: *mut *mut acct_gather_energy_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_get_node_alias_addrs(
        node_list: *mut ::std::os::raw::c_char,
        alias_addrs: *mut *mut slurm_node_alias_addrs_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_free_node_info_msg(node_buffer_ptr: *mut node_info_msg_t);
}
unsafe extern "C" {
    pub fn slurm_print_node_info_msg(
        out: *mut FILE,
        node_info_msg_ptr: *mut node_info_msg_t,
        one_liner: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn slurm_print_node_table(
        out: *mut FILE,
        node_ptr: *mut node_info_t,
        one_liner: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn slurm_sprint_node_table(
        node_ptr: *mut node_info_t,
        one_liner: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn slurm_init_update_node_msg(update_node_msg: *mut update_node_msg_t);
}
unsafe extern "C" {
    pub fn slurm_create_node(node_msg: *mut update_node_msg_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_update_node(node_msg: *mut update_node_msg_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_delete_node(node_msg: *mut update_node_msg_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_load_front_end(
        update_time: time_t,
        resp: *mut *mut front_end_info_msg_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_free_front_end_info_msg(front_end_buffer_ptr: *mut front_end_info_msg_t);
}
unsafe extern "C" {
    pub fn slurm_print_front_end_info_msg(
        out: *mut FILE,
        front_end_info_msg_ptr: *mut front_end_info_msg_t,
        one_liner: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn slurm_print_front_end_table(
        out: *mut FILE,
        front_end_ptr: *mut front_end_info_t,
        one_liner: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn slurm_sprint_front_end_table(
        front_end_ptr: *mut front_end_info_t,
        one_liner: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn slurm_init_update_front_end_msg(update_front_end_msg: *mut update_front_end_msg_t);
}
unsafe extern "C" {
    pub fn slurm_update_front_end(
        front_end_msg: *mut update_front_end_msg_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_load_topo(
        topo_info_msg_pptr: *mut *mut topo_info_response_msg_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_free_topo_info_msg(msg: *mut topo_info_response_msg_t);
}
unsafe extern "C" {
    pub fn slurm_print_topo_info_msg(
        out: *mut FILE,
        topo_info_msg_ptr: *mut topo_info_response_msg_t,
        node_list: *mut ::std::os::raw::c_char,
        one_liner: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn slurm_get_select_nodeinfo(
        nodeinfo: *mut dynamic_plugin_data_t,
        data_type: select_nodedata_type,
        state: node_states,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_init_part_desc_msg(update_part_msg: *mut update_part_msg_t);
}
unsafe extern "C" {
    pub fn slurm_load_partitions(
        update_time: time_t,
        part_buffer_ptr: *mut *mut partition_info_msg_t,
        show_flags: u16,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_load_partitions2(
        update_time: time_t,
        resp: *mut *mut partition_info_msg_t,
        show_flags: u16,
        cluster: *mut slurmdb_cluster_rec_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_free_partition_info_msg(part_info_ptr: *mut partition_info_msg_t);
}
unsafe extern "C" {
    pub fn slurm_print_partition_info_msg(
        out: *mut FILE,
        part_info_ptr: *mut partition_info_msg_t,
        one_liner: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn slurm_print_partition_info(
        out: *mut FILE,
        part_ptr: *mut partition_info_t,
        one_liner: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn slurm_sprint_partition_info(
        part_ptr: *mut partition_info_t,
        one_liner: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn slurm_create_partition(part_msg: *mut update_part_msg_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_update_partition(part_msg: *mut update_part_msg_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_delete_partition(part_msg: *mut delete_part_msg_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_init_resv_desc_msg(update_resv_msg: *mut resv_desc_msg_t);
}
unsafe extern "C" {
    pub fn slurm_create_reservation(resv_msg: *mut resv_desc_msg_t) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn slurm_update_reservation(resv_msg: *mut resv_desc_msg_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_delete_reservation(resv_msg: *mut reservation_name_msg_t)
    -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_load_reservations(
        update_time: time_t,
        resp: *mut *mut reserve_info_msg_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_print_reservation_info_msg(
        out: *mut FILE,
        resv_info_ptr: *mut reserve_info_msg_t,
        one_liner: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn slurm_print_reservation_info(
        out: *mut FILE,
        resv_ptr: *mut reserve_info_t,
        one_liner: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn slurm_sprint_reservation_info(
        resv_ptr: *mut reserve_info_t,
        one_liner: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn slurm_free_reservation_info_msg(resv_info_ptr: *mut reserve_info_msg_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct controller_ping_t {
    pub hostname: *mut ::std::os::raw::c_char,
    pub pinged: bool,
    pub latency: ::std::os::raw::c_long,
    pub offset: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of controller_ping_t"][::std::mem::size_of::<controller_ping_t>() - 32usize];
    ["Alignment of controller_ping_t"][::std::mem::align_of::<controller_ping_t>() - 8usize];
    ["Offset of field: controller_ping_t::hostname"]
        [::std::mem::offset_of!(controller_ping_t, hostname) - 0usize];
    ["Offset of field: controller_ping_t::pinged"]
        [::std::mem::offset_of!(controller_ping_t, pinged) - 8usize];
    ["Offset of field: controller_ping_t::latency"]
        [::std::mem::offset_of!(controller_ping_t, latency) - 16usize];
    ["Offset of field: controller_ping_t::offset"]
        [::std::mem::offset_of!(controller_ping_t, offset) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct slurmdbd_ping_t {
    pub hostname: *mut ::std::os::raw::c_char,
    pub pinged: bool,
    pub latency: ::std::os::raw::c_long,
    pub offset: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of slurmdbd_ping_t"][::std::mem::size_of::<slurmdbd_ping_t>() - 32usize];
    ["Alignment of slurmdbd_ping_t"][::std::mem::align_of::<slurmdbd_ping_t>() - 8usize];
    ["Offset of field: slurmdbd_ping_t::hostname"]
        [::std::mem::offset_of!(slurmdbd_ping_t, hostname) - 0usize];
    ["Offset of field: slurmdbd_ping_t::pinged"]
        [::std::mem::offset_of!(slurmdbd_ping_t, pinged) - 8usize];
    ["Offset of field: slurmdbd_ping_t::latency"]
        [::std::mem::offset_of!(slurmdbd_ping_t, latency) - 16usize];
    ["Offset of field: slurmdbd_ping_t::offset"]
        [::std::mem::offset_of!(slurmdbd_ping_t, offset) - 24usize];
};
unsafe extern "C" {
    pub fn slurm_ping(dest: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ping_all_controllers() -> *mut controller_ping_t;
}
unsafe extern "C" {
    pub fn slurm_reconfigure() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_shutdown(options: u16) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_takeover(backup_inx: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_set_debugflags(
        debug_flags_plus: u64,
        debug_flags_minus: u64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_set_slurmd_debug_flags(
        node_list: *mut ::std::os::raw::c_char,
        debug_flags_plus: u64,
        debug_flags_minus: u64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_set_slurmd_debug_level(
        node_list: *mut ::std::os::raw::c_char,
        debug_level: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_set_debug_level(debug_level: u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_set_schedlog_level(schedlog_level: u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_set_fs_dampeningfactor(factor: u16) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_update_suspend_exc_nodes(
        nodes: *mut ::std::os::raw::c_char,
        mode: update_mode_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_update_suspend_exc_parts(
        parts: *mut ::std::os::raw::c_char,
        mode: update_mode_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_update_suspend_exc_states(
        states: *mut ::std::os::raw::c_char,
        mode: update_mode_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_suspend(job_id: u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_suspend2(
        job_id: *mut ::std::os::raw::c_char,
        resp: *mut *mut job_array_resp_msg_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_resume(job_id: u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_resume2(
        job_id: *mut ::std::os::raw::c_char,
        resp: *mut *mut job_array_resp_msg_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_free_job_array_resp(resp: *mut job_array_resp_msg_t);
}
unsafe extern "C" {
    pub fn slurm_requeue(job_id: u32, flags: u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_requeue2(
        job_id: *mut ::std::os::raw::c_char,
        flags: u32,
        resp: *mut *mut job_array_resp_msg_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_set_trigger(trigger_set: *mut trigger_info_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_clear_trigger(trigger_clear: *mut trigger_info_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_get_triggers(trigger_get: *mut *mut trigger_info_msg_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_pull_trigger(trigger_pull: *mut trigger_info_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_free_trigger_msg(trigger_free: *mut trigger_info_msg_t);
}
unsafe extern "C" {
    pub fn slurm_init_trigger_msg(trigger_info_msg: *mut trigger_info_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct burst_buffer_pool_t {
    pub granularity: u64,
    pub name: *mut ::std::os::raw::c_char,
    pub total_space: u64,
    pub used_space: u64,
    pub unfree_space: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of burst_buffer_pool_t"][::std::mem::size_of::<burst_buffer_pool_t>() - 40usize];
    ["Alignment of burst_buffer_pool_t"][::std::mem::align_of::<burst_buffer_pool_t>() - 8usize];
    ["Offset of field: burst_buffer_pool_t::granularity"]
        [::std::mem::offset_of!(burst_buffer_pool_t, granularity) - 0usize];
    ["Offset of field: burst_buffer_pool_t::name"]
        [::std::mem::offset_of!(burst_buffer_pool_t, name) - 8usize];
    ["Offset of field: burst_buffer_pool_t::total_space"]
        [::std::mem::offset_of!(burst_buffer_pool_t, total_space) - 16usize];
    ["Offset of field: burst_buffer_pool_t::used_space"]
        [::std::mem::offset_of!(burst_buffer_pool_t, used_space) - 24usize];
    ["Offset of field: burst_buffer_pool_t::unfree_space"]
        [::std::mem::offset_of!(burst_buffer_pool_t, unfree_space) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct burst_buffer_resv_t {
    pub account: *mut ::std::os::raw::c_char,
    pub array_job_id: u32,
    pub array_task_id: u32,
    pub create_time: time_t,
    pub job_id: u32,
    pub name: *mut ::std::os::raw::c_char,
    pub partition: *mut ::std::os::raw::c_char,
    pub pool: *mut ::std::os::raw::c_char,
    pub qos: *mut ::std::os::raw::c_char,
    pub size: u64,
    pub state: u16,
    pub user_id: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of burst_buffer_resv_t"][::std::mem::size_of::<burst_buffer_resv_t>() - 80usize];
    ["Alignment of burst_buffer_resv_t"][::std::mem::align_of::<burst_buffer_resv_t>() - 8usize];
    ["Offset of field: burst_buffer_resv_t::account"]
        [::std::mem::offset_of!(burst_buffer_resv_t, account) - 0usize];
    ["Offset of field: burst_buffer_resv_t::array_job_id"]
        [::std::mem::offset_of!(burst_buffer_resv_t, array_job_id) - 8usize];
    ["Offset of field: burst_buffer_resv_t::array_task_id"]
        [::std::mem::offset_of!(burst_buffer_resv_t, array_task_id) - 12usize];
    ["Offset of field: burst_buffer_resv_t::create_time"]
        [::std::mem::offset_of!(burst_buffer_resv_t, create_time) - 16usize];
    ["Offset of field: burst_buffer_resv_t::job_id"]
        [::std::mem::offset_of!(burst_buffer_resv_t, job_id) - 24usize];
    ["Offset of field: burst_buffer_resv_t::name"]
        [::std::mem::offset_of!(burst_buffer_resv_t, name) - 32usize];
    ["Offset of field: burst_buffer_resv_t::partition"]
        [::std::mem::offset_of!(burst_buffer_resv_t, partition) - 40usize];
    ["Offset of field: burst_buffer_resv_t::pool"]
        [::std::mem::offset_of!(burst_buffer_resv_t, pool) - 48usize];
    ["Offset of field: burst_buffer_resv_t::qos"]
        [::std::mem::offset_of!(burst_buffer_resv_t, qos) - 56usize];
    ["Offset of field: burst_buffer_resv_t::size"]
        [::std::mem::offset_of!(burst_buffer_resv_t, size) - 64usize];
    ["Offset of field: burst_buffer_resv_t::state"]
        [::std::mem::offset_of!(burst_buffer_resv_t, state) - 72usize];
    ["Offset of field: burst_buffer_resv_t::user_id"]
        [::std::mem::offset_of!(burst_buffer_resv_t, user_id) - 76usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct burst_buffer_use_t {
    pub user_id: u32,
    pub used: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of burst_buffer_use_t"][::std::mem::size_of::<burst_buffer_use_t>() - 16usize];
    ["Alignment of burst_buffer_use_t"][::std::mem::align_of::<burst_buffer_use_t>() - 8usize];
    ["Offset of field: burst_buffer_use_t::user_id"]
        [::std::mem::offset_of!(burst_buffer_use_t, user_id) - 0usize];
    ["Offset of field: burst_buffer_use_t::used"]
        [::std::mem::offset_of!(burst_buffer_use_t, used) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct burst_buffer_info_t {
    pub allow_users: *mut ::std::os::raw::c_char,
    pub default_pool: *mut ::std::os::raw::c_char,
    pub create_buffer: *mut ::std::os::raw::c_char,
    pub deny_users: *mut ::std::os::raw::c_char,
    pub destroy_buffer: *mut ::std::os::raw::c_char,
    pub flags: u32,
    pub get_sys_state: *mut ::std::os::raw::c_char,
    pub get_sys_status: *mut ::std::os::raw::c_char,
    pub granularity: u64,
    pub pool_cnt: u32,
    pub pool_ptr: *mut burst_buffer_pool_t,
    pub name: *mut ::std::os::raw::c_char,
    pub poll_interval: u32,
    pub other_timeout: u32,
    pub stage_in_timeout: u32,
    pub stage_out_timeout: u32,
    pub start_stage_in: *mut ::std::os::raw::c_char,
    pub start_stage_out: *mut ::std::os::raw::c_char,
    pub stop_stage_in: *mut ::std::os::raw::c_char,
    pub stop_stage_out: *mut ::std::os::raw::c_char,
    pub total_space: u64,
    pub unfree_space: u64,
    pub used_space: u64,
    pub validate_timeout: u32,
    pub buffer_count: u32,
    pub burst_buffer_resv_ptr: *mut burst_buffer_resv_t,
    pub use_count: u32,
    pub burst_buffer_use_ptr: *mut burst_buffer_use_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of burst_buffer_info_t"][::std::mem::size_of::<burst_buffer_info_t>() - 200usize];
    ["Alignment of burst_buffer_info_t"][::std::mem::align_of::<burst_buffer_info_t>() - 8usize];
    ["Offset of field: burst_buffer_info_t::allow_users"]
        [::std::mem::offset_of!(burst_buffer_info_t, allow_users) - 0usize];
    ["Offset of field: burst_buffer_info_t::default_pool"]
        [::std::mem::offset_of!(burst_buffer_info_t, default_pool) - 8usize];
    ["Offset of field: burst_buffer_info_t::create_buffer"]
        [::std::mem::offset_of!(burst_buffer_info_t, create_buffer) - 16usize];
    ["Offset of field: burst_buffer_info_t::deny_users"]
        [::std::mem::offset_of!(burst_buffer_info_t, deny_users) - 24usize];
    ["Offset of field: burst_buffer_info_t::destroy_buffer"]
        [::std::mem::offset_of!(burst_buffer_info_t, destroy_buffer) - 32usize];
    ["Offset of field: burst_buffer_info_t::flags"]
        [::std::mem::offset_of!(burst_buffer_info_t, flags) - 40usize];
    ["Offset of field: burst_buffer_info_t::get_sys_state"]
        [::std::mem::offset_of!(burst_buffer_info_t, get_sys_state) - 48usize];
    ["Offset of field: burst_buffer_info_t::get_sys_status"]
        [::std::mem::offset_of!(burst_buffer_info_t, get_sys_status) - 56usize];
    ["Offset of field: burst_buffer_info_t::granularity"]
        [::std::mem::offset_of!(burst_buffer_info_t, granularity) - 64usize];
    ["Offset of field: burst_buffer_info_t::pool_cnt"]
        [::std::mem::offset_of!(burst_buffer_info_t, pool_cnt) - 72usize];
    ["Offset of field: burst_buffer_info_t::pool_ptr"]
        [::std::mem::offset_of!(burst_buffer_info_t, pool_ptr) - 80usize];
    ["Offset of field: burst_buffer_info_t::name"]
        [::std::mem::offset_of!(burst_buffer_info_t, name) - 88usize];
    ["Offset of field: burst_buffer_info_t::poll_interval"]
        [::std::mem::offset_of!(burst_buffer_info_t, poll_interval) - 96usize];
    ["Offset of field: burst_buffer_info_t::other_timeout"]
        [::std::mem::offset_of!(burst_buffer_info_t, other_timeout) - 100usize];
    ["Offset of field: burst_buffer_info_t::stage_in_timeout"]
        [::std::mem::offset_of!(burst_buffer_info_t, stage_in_timeout) - 104usize];
    ["Offset of field: burst_buffer_info_t::stage_out_timeout"]
        [::std::mem::offset_of!(burst_buffer_info_t, stage_out_timeout) - 108usize];
    ["Offset of field: burst_buffer_info_t::start_stage_in"]
        [::std::mem::offset_of!(burst_buffer_info_t, start_stage_in) - 112usize];
    ["Offset of field: burst_buffer_info_t::start_stage_out"]
        [::std::mem::offset_of!(burst_buffer_info_t, start_stage_out) - 120usize];
    ["Offset of field: burst_buffer_info_t::stop_stage_in"]
        [::std::mem::offset_of!(burst_buffer_info_t, stop_stage_in) - 128usize];
    ["Offset of field: burst_buffer_info_t::stop_stage_out"]
        [::std::mem::offset_of!(burst_buffer_info_t, stop_stage_out) - 136usize];
    ["Offset of field: burst_buffer_info_t::total_space"]
        [::std::mem::offset_of!(burst_buffer_info_t, total_space) - 144usize];
    ["Offset of field: burst_buffer_info_t::unfree_space"]
        [::std::mem::offset_of!(burst_buffer_info_t, unfree_space) - 152usize];
    ["Offset of field: burst_buffer_info_t::used_space"]
        [::std::mem::offset_of!(burst_buffer_info_t, used_space) - 160usize];
    ["Offset of field: burst_buffer_info_t::validate_timeout"]
        [::std::mem::offset_of!(burst_buffer_info_t, validate_timeout) - 168usize];
    ["Offset of field: burst_buffer_info_t::buffer_count"]
        [::std::mem::offset_of!(burst_buffer_info_t, buffer_count) - 172usize];
    ["Offset of field: burst_buffer_info_t::burst_buffer_resv_ptr"]
        [::std::mem::offset_of!(burst_buffer_info_t, burst_buffer_resv_ptr) - 176usize];
    ["Offset of field: burst_buffer_info_t::use_count"]
        [::std::mem::offset_of!(burst_buffer_info_t, use_count) - 184usize];
    ["Offset of field: burst_buffer_info_t::burst_buffer_use_ptr"]
        [::std::mem::offset_of!(burst_buffer_info_t, burst_buffer_use_ptr) - 192usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct burst_buffer_info_msg_t {
    pub burst_buffer_array: *mut burst_buffer_info_t,
    pub record_count: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of burst_buffer_info_msg_t"][::std::mem::size_of::<burst_buffer_info_msg_t>() - 16usize];
    ["Alignment of burst_buffer_info_msg_t"]
        [::std::mem::align_of::<burst_buffer_info_msg_t>() - 8usize];
    ["Offset of field: burst_buffer_info_msg_t::burst_buffer_array"]
        [::std::mem::offset_of!(burst_buffer_info_msg_t, burst_buffer_array) - 0usize];
    ["Offset of field: burst_buffer_info_msg_t::record_count"]
        [::std::mem::offset_of!(burst_buffer_info_msg_t, record_count) - 8usize];
};
unsafe extern "C" {
    pub fn slurm_burst_buffer_state_string(state: u16) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn slurm_load_burst_buffer_stat(
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
        status_resp: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_load_burst_buffer_info(
        burst_buffer_info_msg_pptr: *mut *mut burst_buffer_info_msg_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_free_burst_buffer_info_msg(burst_buffer_info_msg: *mut burst_buffer_info_msg_t);
}
unsafe extern "C" {
    pub fn slurm_print_burst_buffer_info_msg(
        out: *mut FILE,
        info_ptr: *mut burst_buffer_info_msg_t,
        one_liner: ::std::os::raw::c_int,
        verbosity: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn slurm_print_burst_buffer_record(
        out: *mut FILE,
        burst_buffer_ptr: *mut burst_buffer_info_t,
        one_liner: ::std::os::raw::c_int,
        verbose: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn slurm_network_callerid(
        req: network_callerid_msg_t,
        job_id: *mut u32,
        node_name: *mut ::std::os::raw::c_char,
        node_name_size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_top_job(job_id_str: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_fetch_token(
        username: *mut ::std::os::raw::c_char,
        lifespan: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn slurm_load_federation(
        fed_pptr: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurm_print_federation(fed: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn slurm_destroy_federation_rec(fed: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn slurm_request_crontab(
        uid: uid_t,
        crontab: *mut *mut ::std::os::raw::c_char,
        disabled_lines: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct crontab_update_response_msg_t {
    pub err_msg: *mut ::std::os::raw::c_char,
    pub failed_lines: *mut ::std::os::raw::c_char,
    pub jobids: *mut u32,
    pub jobids_count: u32,
    pub job_submit_user_msg: *mut ::std::os::raw::c_char,
    pub return_code: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of crontab_update_response_msg_t"]
        [::std::mem::size_of::<crontab_update_response_msg_t>() - 48usize];
    ["Alignment of crontab_update_response_msg_t"]
        [::std::mem::align_of::<crontab_update_response_msg_t>() - 8usize];
    ["Offset of field: crontab_update_response_msg_t::err_msg"]
        [::std::mem::offset_of!(crontab_update_response_msg_t, err_msg) - 0usize];
    ["Offset of field: crontab_update_response_msg_t::failed_lines"]
        [::std::mem::offset_of!(crontab_update_response_msg_t, failed_lines) - 8usize];
    ["Offset of field: crontab_update_response_msg_t::jobids"]
        [::std::mem::offset_of!(crontab_update_response_msg_t, jobids) - 16usize];
    ["Offset of field: crontab_update_response_msg_t::jobids_count"]
        [::std::mem::offset_of!(crontab_update_response_msg_t, jobids_count) - 24usize];
    ["Offset of field: crontab_update_response_msg_t::job_submit_user_msg"]
        [::std::mem::offset_of!(crontab_update_response_msg_t, job_submit_user_msg) - 32usize];
    ["Offset of field: crontab_update_response_msg_t::return_code"]
        [::std::mem::offset_of!(crontab_update_response_msg_t, return_code) - 40usize];
};
unsafe extern "C" {
    pub fn slurm_update_crontab(
        uid: uid_t,
        gid: gid_t,
        crontab: *mut ::std::os::raw::c_char,
        jobs: *mut list_t,
    ) -> *mut crontab_update_response_msg_t;
}
unsafe extern "C" {
    pub fn slurm_remove_crontab(uid: uid_t, gid: gid_t) -> ::std::os::raw::c_int;
}
pub const slurmdb_admin_level_t_SLURMDB_ADMIN_NOTSET: slurmdb_admin_level_t = 0;
pub const slurmdb_admin_level_t_SLURMDB_ADMIN_NONE: slurmdb_admin_level_t = 1;
pub const slurmdb_admin_level_t_SLURMDB_ADMIN_OPERATOR: slurmdb_admin_level_t = 2;
pub const slurmdb_admin_level_t_SLURMDB_ADMIN_SUPER_USER: slurmdb_admin_level_t = 3;
pub type slurmdb_admin_level_t = ::std::os::raw::c_uint;
pub const slurmdb_classification_type_t_SLURMDB_CLASS_NONE: slurmdb_classification_type_t = 0;
pub const slurmdb_classification_type_t_SLURMDB_CLASS_CAPABILITY: slurmdb_classification_type_t = 1;
pub const slurmdb_classification_type_t_SLURMDB_CLASS_CAPACITY: slurmdb_classification_type_t = 2;
pub const slurmdb_classification_type_t_SLURMDB_CLASS_CAPAPACITY: slurmdb_classification_type_t = 3;
pub type slurmdb_classification_type_t = ::std::os::raw::c_uint;
pub const slurmdb_event_type_t_SLURMDB_EVENT_ALL: slurmdb_event_type_t = 0;
pub const slurmdb_event_type_t_SLURMDB_EVENT_CLUSTER: slurmdb_event_type_t = 1;
pub const slurmdb_event_type_t_SLURMDB_EVENT_NODE: slurmdb_event_type_t = 2;
pub type slurmdb_event_type_t = ::std::os::raw::c_uint;
pub const slurmdb_problem_type_t_SLURMDB_PROBLEM_NOT_SET: slurmdb_problem_type_t = 0;
pub const slurmdb_problem_type_t_SLURMDB_PROBLEM_ACCT_NO_ASSOC: slurmdb_problem_type_t = 1;
pub const slurmdb_problem_type_t_SLURMDB_PROBLEM_ACCT_NO_USERS: slurmdb_problem_type_t = 2;
pub const slurmdb_problem_type_t_SLURMDB_PROBLEM_USER_NO_ASSOC: slurmdb_problem_type_t = 3;
pub const slurmdb_problem_type_t_SLURMDB_PROBLEM_USER_NO_UID: slurmdb_problem_type_t = 4;
pub type slurmdb_problem_type_t = ::std::os::raw::c_uint;
pub const slurmdb_report_sort_t_SLURMDB_REPORT_SORT_TIME: slurmdb_report_sort_t = 0;
pub const slurmdb_report_sort_t_SLURMDB_REPORT_SORT_NAME: slurmdb_report_sort_t = 1;
pub type slurmdb_report_sort_t = ::std::os::raw::c_uint;
pub const slurmdb_report_time_format_t_SLURMDB_REPORT_TIME_SECS: slurmdb_report_time_format_t = 0;
pub const slurmdb_report_time_format_t_SLURMDB_REPORT_TIME_MINS: slurmdb_report_time_format_t = 1;
pub const slurmdb_report_time_format_t_SLURMDB_REPORT_TIME_HOURS: slurmdb_report_time_format_t = 2;
pub const slurmdb_report_time_format_t_SLURMDB_REPORT_TIME_PERCENT: slurmdb_report_time_format_t =
    3;
pub const slurmdb_report_time_format_t_SLURMDB_REPORT_TIME_SECS_PER: slurmdb_report_time_format_t =
    4;
pub const slurmdb_report_time_format_t_SLURMDB_REPORT_TIME_MINS_PER: slurmdb_report_time_format_t =
    5;
pub const slurmdb_report_time_format_t_SLURMDB_REPORT_TIME_HOURS_PER: slurmdb_report_time_format_t =
    6;
pub type slurmdb_report_time_format_t = ::std::os::raw::c_uint;
pub const slurmdb_resource_type_t_SLURMDB_RESOURCE_NOTSET: slurmdb_resource_type_t = 0;
pub const slurmdb_resource_type_t_SLURMDB_RESOURCE_LICENSE: slurmdb_resource_type_t = 1;
pub type slurmdb_resource_type_t = ::std::os::raw::c_uint;
pub const slurmdb_update_type_t_SLURMDB_UPDATE_NOTSET: slurmdb_update_type_t = 0;
pub const slurmdb_update_type_t_SLURMDB_ADD_USER: slurmdb_update_type_t = 1;
pub const slurmdb_update_type_t_SLURMDB_ADD_ASSOC: slurmdb_update_type_t = 2;
pub const slurmdb_update_type_t_SLURMDB_ADD_COORD: slurmdb_update_type_t = 3;
pub const slurmdb_update_type_t_SLURMDB_MODIFY_USER: slurmdb_update_type_t = 4;
pub const slurmdb_update_type_t_SLURMDB_MODIFY_ASSOC: slurmdb_update_type_t = 5;
pub const slurmdb_update_type_t_SLURMDB_REMOVE_USER: slurmdb_update_type_t = 6;
pub const slurmdb_update_type_t_SLURMDB_REMOVE_ASSOC: slurmdb_update_type_t = 7;
pub const slurmdb_update_type_t_SLURMDB_REMOVE_COORD: slurmdb_update_type_t = 8;
pub const slurmdb_update_type_t_SLURMDB_ADD_QOS: slurmdb_update_type_t = 9;
pub const slurmdb_update_type_t_SLURMDB_REMOVE_QOS: slurmdb_update_type_t = 10;
pub const slurmdb_update_type_t_SLURMDB_MODIFY_QOS: slurmdb_update_type_t = 11;
pub const slurmdb_update_type_t_SLURMDB_ADD_WCKEY: slurmdb_update_type_t = 12;
pub const slurmdb_update_type_t_SLURMDB_REMOVE_WCKEY: slurmdb_update_type_t = 13;
pub const slurmdb_update_type_t_SLURMDB_MODIFY_WCKEY: slurmdb_update_type_t = 14;
pub const slurmdb_update_type_t_SLURMDB_ADD_CLUSTER: slurmdb_update_type_t = 15;
pub const slurmdb_update_type_t_SLURMDB_REMOVE_CLUSTER: slurmdb_update_type_t = 16;
pub const slurmdb_update_type_t_SLURMDB_REMOVE_ASSOC_USAGE: slurmdb_update_type_t = 17;
pub const slurmdb_update_type_t_SLURMDB_ADD_RES: slurmdb_update_type_t = 18;
pub const slurmdb_update_type_t_SLURMDB_REMOVE_RES: slurmdb_update_type_t = 19;
pub const slurmdb_update_type_t_SLURMDB_MODIFY_RES: slurmdb_update_type_t = 20;
pub const slurmdb_update_type_t_SLURMDB_UPDATE_QOS_USAGE: slurmdb_update_type_t = 21;
pub const slurmdb_update_type_t_SLURMDB_ADD_TRES: slurmdb_update_type_t = 22;
pub const slurmdb_update_type_t_SLURMDB_UPDATE_FEDS: slurmdb_update_type_t = 23;
pub type slurmdb_update_type_t = ::std::os::raw::c_uint;
pub const cluster_fed_states_CLUSTER_FED_STATE_NA: cluster_fed_states = 0;
pub const cluster_fed_states_CLUSTER_FED_STATE_ACTIVE: cluster_fed_states = 1;
pub const cluster_fed_states_CLUSTER_FED_STATE_INACTIVE: cluster_fed_states = 2;
pub type cluster_fed_states = ::std::os::raw::c_uint;
pub const slurmdb_assoc_flags_t_ASSOC_FLAG_NONE: slurmdb_assoc_flags_t = 0;
pub const slurmdb_assoc_flags_t_ASSOC_FLAG_DELETED: slurmdb_assoc_flags_t = 1;
pub const slurmdb_assoc_flags_t_ASSOC_FLAG_NO_UPDATE: slurmdb_assoc_flags_t = 2;
pub const slurmdb_assoc_flags_t_ASSOC_FLAG_EXACT: slurmdb_assoc_flags_t = 4;
pub const slurmdb_assoc_flags_t_ASSOC_FLAG_USER_COORD_NO: slurmdb_assoc_flags_t = 8;
pub const slurmdb_assoc_flags_t_ASSOC_FLAG_BASE: slurmdb_assoc_flags_t = 65535;
pub const slurmdb_assoc_flags_t_ASSOC_FLAG_USER_COORD: slurmdb_assoc_flags_t = 65536;
pub const slurmdb_assoc_flags_t_ASSOC_FLAG_INVALID: slurmdb_assoc_flags_t = 65537;
pub type slurmdb_assoc_flags_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct slurmdb_tres_rec_t {
    pub alloc_secs: u64,
    pub rec_count: u32,
    pub count: u64,
    pub id: u32,
    pub name: *mut ::std::os::raw::c_char,
    pub type_: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of slurmdb_tres_rec_t"][::std::mem::size_of::<slurmdb_tres_rec_t>() - 48usize];
    ["Alignment of slurmdb_tres_rec_t"][::std::mem::align_of::<slurmdb_tres_rec_t>() - 8usize];
    ["Offset of field: slurmdb_tres_rec_t::alloc_secs"]
        [::std::mem::offset_of!(slurmdb_tres_rec_t, alloc_secs) - 0usize];
    ["Offset of field: slurmdb_tres_rec_t::rec_count"]
        [::std::mem::offset_of!(slurmdb_tres_rec_t, rec_count) - 8usize];
    ["Offset of field: slurmdb_tres_rec_t::count"]
        [::std::mem::offset_of!(slurmdb_tres_rec_t, count) - 16usize];
    ["Offset of field: slurmdb_tres_rec_t::id"]
        [::std::mem::offset_of!(slurmdb_tres_rec_t, id) - 24usize];
    ["Offset of field: slurmdb_tres_rec_t::name"]
        [::std::mem::offset_of!(slurmdb_tres_rec_t, name) - 32usize];
    ["Offset of field: slurmdb_tres_rec_t::type_"]
        [::std::mem::offset_of!(slurmdb_tres_rec_t, type_) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct slurmdb_assoc_cond_t {
    pub acct_list: *mut list_t,
    pub cluster_list: *mut list_t,
    pub def_qos_id_list: *mut list_t,
    pub flags: u32,
    pub format_list: *mut list_t,
    pub id_list: *mut list_t,
    pub parent_acct_list: *mut list_t,
    pub partition_list: *mut list_t,
    pub qos_list: *mut list_t,
    pub usage_end: time_t,
    pub usage_start: time_t,
    pub user_list: *mut list_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of slurmdb_assoc_cond_t"][::std::mem::size_of::<slurmdb_assoc_cond_t>() - 96usize];
    ["Alignment of slurmdb_assoc_cond_t"][::std::mem::align_of::<slurmdb_assoc_cond_t>() - 8usize];
    ["Offset of field: slurmdb_assoc_cond_t::acct_list"]
        [::std::mem::offset_of!(slurmdb_assoc_cond_t, acct_list) - 0usize];
    ["Offset of field: slurmdb_assoc_cond_t::cluster_list"]
        [::std::mem::offset_of!(slurmdb_assoc_cond_t, cluster_list) - 8usize];
    ["Offset of field: slurmdb_assoc_cond_t::def_qos_id_list"]
        [::std::mem::offset_of!(slurmdb_assoc_cond_t, def_qos_id_list) - 16usize];
    ["Offset of field: slurmdb_assoc_cond_t::flags"]
        [::std::mem::offset_of!(slurmdb_assoc_cond_t, flags) - 24usize];
    ["Offset of field: slurmdb_assoc_cond_t::format_list"]
        [::std::mem::offset_of!(slurmdb_assoc_cond_t, format_list) - 32usize];
    ["Offset of field: slurmdb_assoc_cond_t::id_list"]
        [::std::mem::offset_of!(slurmdb_assoc_cond_t, id_list) - 40usize];
    ["Offset of field: slurmdb_assoc_cond_t::parent_acct_list"]
        [::std::mem::offset_of!(slurmdb_assoc_cond_t, parent_acct_list) - 48usize];
    ["Offset of field: slurmdb_assoc_cond_t::partition_list"]
        [::std::mem::offset_of!(slurmdb_assoc_cond_t, partition_list) - 56usize];
    ["Offset of field: slurmdb_assoc_cond_t::qos_list"]
        [::std::mem::offset_of!(slurmdb_assoc_cond_t, qos_list) - 64usize];
    ["Offset of field: slurmdb_assoc_cond_t::usage_end"]
        [::std::mem::offset_of!(slurmdb_assoc_cond_t, usage_end) - 72usize];
    ["Offset of field: slurmdb_assoc_cond_t::usage_start"]
        [::std::mem::offset_of!(slurmdb_assoc_cond_t, usage_start) - 80usize];
    ["Offset of field: slurmdb_assoc_cond_t::user_list"]
        [::std::mem::offset_of!(slurmdb_assoc_cond_t, user_list) - 88usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct slurmdb_job_cond_t {
    pub acct_list: *mut list_t,
    pub associd_list: *mut list_t,
    pub cluster_list: *mut list_t,
    pub constraint_list: *mut list_t,
    pub cpus_max: u32,
    pub cpus_min: u32,
    pub db_flags: u32,
    pub exitcode: i32,
    pub flags: u32,
    pub format_list: *mut list_t,
    pub groupid_list: *mut list_t,
    pub jobname_list: *mut list_t,
    pub nodes_max: u32,
    pub nodes_min: u32,
    pub partition_list: *mut list_t,
    pub qos_list: *mut list_t,
    pub reason_list: *mut list_t,
    pub resv_list: *mut list_t,
    pub resvid_list: *mut list_t,
    pub state_list: *mut list_t,
    pub step_list: *mut list_t,
    pub timelimit_max: u32,
    pub timelimit_min: u32,
    pub usage_end: time_t,
    pub usage_start: time_t,
    pub used_nodes: *mut ::std::os::raw::c_char,
    pub userid_list: *mut list_t,
    pub wckey_list: *mut list_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of slurmdb_job_cond_t"][::std::mem::size_of::<slurmdb_job_cond_t>() - 192usize];
    ["Alignment of slurmdb_job_cond_t"][::std::mem::align_of::<slurmdb_job_cond_t>() - 8usize];
    ["Offset of field: slurmdb_job_cond_t::acct_list"]
        [::std::mem::offset_of!(slurmdb_job_cond_t, acct_list) - 0usize];
    ["Offset of field: slurmdb_job_cond_t::associd_list"]
        [::std::mem::offset_of!(slurmdb_job_cond_t, associd_list) - 8usize];
    ["Offset of field: slurmdb_job_cond_t::cluster_list"]
        [::std::mem::offset_of!(slurmdb_job_cond_t, cluster_list) - 16usize];
    ["Offset of field: slurmdb_job_cond_t::constraint_list"]
        [::std::mem::offset_of!(slurmdb_job_cond_t, constraint_list) - 24usize];
    ["Offset of field: slurmdb_job_cond_t::cpus_max"]
        [::std::mem::offset_of!(slurmdb_job_cond_t, cpus_max) - 32usize];
    ["Offset of field: slurmdb_job_cond_t::cpus_min"]
        [::std::mem::offset_of!(slurmdb_job_cond_t, cpus_min) - 36usize];
    ["Offset of field: slurmdb_job_cond_t::db_flags"]
        [::std::mem::offset_of!(slurmdb_job_cond_t, db_flags) - 40usize];
    ["Offset of field: slurmdb_job_cond_t::exitcode"]
        [::std::mem::offset_of!(slurmdb_job_cond_t, exitcode) - 44usize];
    ["Offset of field: slurmdb_job_cond_t::flags"]
        [::std::mem::offset_of!(slurmdb_job_cond_t, flags) - 48usize];
    ["Offset of field: slurmdb_job_cond_t::format_list"]
        [::std::mem::offset_of!(slurmdb_job_cond_t, format_list) - 56usize];
    ["Offset of field: slurmdb_job_cond_t::groupid_list"]
        [::std::mem::offset_of!(slurmdb_job_cond_t, groupid_list) - 64usize];
    ["Offset of field: slurmdb_job_cond_t::jobname_list"]
        [::std::mem::offset_of!(slurmdb_job_cond_t, jobname_list) - 72usize];
    ["Offset of field: slurmdb_job_cond_t::nodes_max"]
        [::std::mem::offset_of!(slurmdb_job_cond_t, nodes_max) - 80usize];
    ["Offset of field: slurmdb_job_cond_t::nodes_min"]
        [::std::mem::offset_of!(slurmdb_job_cond_t, nodes_min) - 84usize];
    ["Offset of field: slurmdb_job_cond_t::partition_list"]
        [::std::mem::offset_of!(slurmdb_job_cond_t, partition_list) - 88usize];
    ["Offset of field: slurmdb_job_cond_t::qos_list"]
        [::std::mem::offset_of!(slurmdb_job_cond_t, qos_list) - 96usize];
    ["Offset of field: slurmdb_job_cond_t::reason_list"]
        [::std::mem::offset_of!(slurmdb_job_cond_t, reason_list) - 104usize];
    ["Offset of field: slurmdb_job_cond_t::resv_list"]
        [::std::mem::offset_of!(slurmdb_job_cond_t, resv_list) - 112usize];
    ["Offset of field: slurmdb_job_cond_t::resvid_list"]
        [::std::mem::offset_of!(slurmdb_job_cond_t, resvid_list) - 120usize];
    ["Offset of field: slurmdb_job_cond_t::state_list"]
        [::std::mem::offset_of!(slurmdb_job_cond_t, state_list) - 128usize];
    ["Offset of field: slurmdb_job_cond_t::step_list"]
        [::std::mem::offset_of!(slurmdb_job_cond_t, step_list) - 136usize];
    ["Offset of field: slurmdb_job_cond_t::timelimit_max"]
        [::std::mem::offset_of!(slurmdb_job_cond_t, timelimit_max) - 144usize];
    ["Offset of field: slurmdb_job_cond_t::timelimit_min"]
        [::std::mem::offset_of!(slurmdb_job_cond_t, timelimit_min) - 148usize];
    ["Offset of field: slurmdb_job_cond_t::usage_end"]
        [::std::mem::offset_of!(slurmdb_job_cond_t, usage_end) - 152usize];
    ["Offset of field: slurmdb_job_cond_t::usage_start"]
        [::std::mem::offset_of!(slurmdb_job_cond_t, usage_start) - 160usize];
    ["Offset of field: slurmdb_job_cond_t::used_nodes"]
        [::std::mem::offset_of!(slurmdb_job_cond_t, used_nodes) - 168usize];
    ["Offset of field: slurmdb_job_cond_t::userid_list"]
        [::std::mem::offset_of!(slurmdb_job_cond_t, userid_list) - 176usize];
    ["Offset of field: slurmdb_job_cond_t::wckey_list"]
        [::std::mem::offset_of!(slurmdb_job_cond_t, wckey_list) - 184usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct slurmdb_stats_t {
    pub act_cpufreq: f64,
    pub consumed_energy: u64,
    pub tres_usage_in_ave: *mut ::std::os::raw::c_char,
    pub tres_usage_in_max: *mut ::std::os::raw::c_char,
    pub tres_usage_in_max_nodeid: *mut ::std::os::raw::c_char,
    pub tres_usage_in_max_taskid: *mut ::std::os::raw::c_char,
    pub tres_usage_in_min: *mut ::std::os::raw::c_char,
    pub tres_usage_in_min_nodeid: *mut ::std::os::raw::c_char,
    pub tres_usage_in_min_taskid: *mut ::std::os::raw::c_char,
    pub tres_usage_in_tot: *mut ::std::os::raw::c_char,
    pub tres_usage_out_ave: *mut ::std::os::raw::c_char,
    pub tres_usage_out_max: *mut ::std::os::raw::c_char,
    pub tres_usage_out_max_nodeid: *mut ::std::os::raw::c_char,
    pub tres_usage_out_max_taskid: *mut ::std::os::raw::c_char,
    pub tres_usage_out_min: *mut ::std::os::raw::c_char,
    pub tres_usage_out_min_nodeid: *mut ::std::os::raw::c_char,
    pub tres_usage_out_min_taskid: *mut ::std::os::raw::c_char,
    pub tres_usage_out_tot: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of slurmdb_stats_t"][::std::mem::size_of::<slurmdb_stats_t>() - 144usize];
    ["Alignment of slurmdb_stats_t"][::std::mem::align_of::<slurmdb_stats_t>() - 8usize];
    ["Offset of field: slurmdb_stats_t::act_cpufreq"]
        [::std::mem::offset_of!(slurmdb_stats_t, act_cpufreq) - 0usize];
    ["Offset of field: slurmdb_stats_t::consumed_energy"]
        [::std::mem::offset_of!(slurmdb_stats_t, consumed_energy) - 8usize];
    ["Offset of field: slurmdb_stats_t::tres_usage_in_ave"]
        [::std::mem::offset_of!(slurmdb_stats_t, tres_usage_in_ave) - 16usize];
    ["Offset of field: slurmdb_stats_t::tres_usage_in_max"]
        [::std::mem::offset_of!(slurmdb_stats_t, tres_usage_in_max) - 24usize];
    ["Offset of field: slurmdb_stats_t::tres_usage_in_max_nodeid"]
        [::std::mem::offset_of!(slurmdb_stats_t, tres_usage_in_max_nodeid) - 32usize];
    ["Offset of field: slurmdb_stats_t::tres_usage_in_max_taskid"]
        [::std::mem::offset_of!(slurmdb_stats_t, tres_usage_in_max_taskid) - 40usize];
    ["Offset of field: slurmdb_stats_t::tres_usage_in_min"]
        [::std::mem::offset_of!(slurmdb_stats_t, tres_usage_in_min) - 48usize];
    ["Offset of field: slurmdb_stats_t::tres_usage_in_min_nodeid"]
        [::std::mem::offset_of!(slurmdb_stats_t, tres_usage_in_min_nodeid) - 56usize];
    ["Offset of field: slurmdb_stats_t::tres_usage_in_min_taskid"]
        [::std::mem::offset_of!(slurmdb_stats_t, tres_usage_in_min_taskid) - 64usize];
    ["Offset of field: slurmdb_stats_t::tres_usage_in_tot"]
        [::std::mem::offset_of!(slurmdb_stats_t, tres_usage_in_tot) - 72usize];
    ["Offset of field: slurmdb_stats_t::tres_usage_out_ave"]
        [::std::mem::offset_of!(slurmdb_stats_t, tres_usage_out_ave) - 80usize];
    ["Offset of field: slurmdb_stats_t::tres_usage_out_max"]
        [::std::mem::offset_of!(slurmdb_stats_t, tres_usage_out_max) - 88usize];
    ["Offset of field: slurmdb_stats_t::tres_usage_out_max_nodeid"]
        [::std::mem::offset_of!(slurmdb_stats_t, tres_usage_out_max_nodeid) - 96usize];
    ["Offset of field: slurmdb_stats_t::tres_usage_out_max_taskid"]
        [::std::mem::offset_of!(slurmdb_stats_t, tres_usage_out_max_taskid) - 104usize];
    ["Offset of field: slurmdb_stats_t::tres_usage_out_min"]
        [::std::mem::offset_of!(slurmdb_stats_t, tres_usage_out_min) - 112usize];
    ["Offset of field: slurmdb_stats_t::tres_usage_out_min_nodeid"]
        [::std::mem::offset_of!(slurmdb_stats_t, tres_usage_out_min_nodeid) - 120usize];
    ["Offset of field: slurmdb_stats_t::tres_usage_out_min_taskid"]
        [::std::mem::offset_of!(slurmdb_stats_t, tres_usage_out_min_taskid) - 128usize];
    ["Offset of field: slurmdb_stats_t::tres_usage_out_tot"]
        [::std::mem::offset_of!(slurmdb_stats_t, tres_usage_out_tot) - 136usize];
};
pub const slurmdb_acct_flags_t_SLURMDB_ACCT_FLAG_NONE: slurmdb_acct_flags_t = 0;
pub const slurmdb_acct_flags_t_SLURMDB_ACCT_FLAG_DELETED: slurmdb_acct_flags_t = 1;
pub const slurmdb_acct_flags_t_SLURMDB_ACCT_FLAG_WASSOC: slurmdb_acct_flags_t = 2;
pub const slurmdb_acct_flags_t_SLURMDB_ACCT_FLAG_WCOORD: slurmdb_acct_flags_t = 4;
pub const slurmdb_acct_flags_t_SLURMDB_ACCT_FLAG_USER_COORD_NO: slurmdb_acct_flags_t = 8;
pub const slurmdb_acct_flags_t_SLURMDB_ACCT_FLAG_BASE: slurmdb_acct_flags_t = 65535;
pub const slurmdb_acct_flags_t_SLURMDB_ACCT_FLAG_USER_COORD: slurmdb_acct_flags_t = 65536;
pub const slurmdb_acct_flags_t_SLURMDB_ACCT_FLAG_INVALID: slurmdb_acct_flags_t = 65537;
pub type slurmdb_acct_flags_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct slurmdb_account_cond_t {
    pub assoc_cond: *mut slurmdb_assoc_cond_t,
    pub description_list: *mut list_t,
    pub flags: slurmdb_acct_flags_t,
    pub organization_list: *mut list_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of slurmdb_account_cond_t"][::std::mem::size_of::<slurmdb_account_cond_t>() - 32usize];
    ["Alignment of slurmdb_account_cond_t"]
        [::std::mem::align_of::<slurmdb_account_cond_t>() - 8usize];
    ["Offset of field: slurmdb_account_cond_t::assoc_cond"]
        [::std::mem::offset_of!(slurmdb_account_cond_t, assoc_cond) - 0usize];
    ["Offset of field: slurmdb_account_cond_t::description_list"]
        [::std::mem::offset_of!(slurmdb_account_cond_t, description_list) - 8usize];
    ["Offset of field: slurmdb_account_cond_t::flags"]
        [::std::mem::offset_of!(slurmdb_account_cond_t, flags) - 16usize];
    ["Offset of field: slurmdb_account_cond_t::organization_list"]
        [::std::mem::offset_of!(slurmdb_account_cond_t, organization_list) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct slurmdb_account_rec_t {
    pub assoc_list: *mut list_t,
    pub coordinators: *mut list_t,
    pub description: *mut ::std::os::raw::c_char,
    pub flags: slurmdb_acct_flags_t,
    pub name: *mut ::std::os::raw::c_char,
    pub organization: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of slurmdb_account_rec_t"][::std::mem::size_of::<slurmdb_account_rec_t>() - 48usize];
    ["Alignment of slurmdb_account_rec_t"]
        [::std::mem::align_of::<slurmdb_account_rec_t>() - 8usize];
    ["Offset of field: slurmdb_account_rec_t::assoc_list"]
        [::std::mem::offset_of!(slurmdb_account_rec_t, assoc_list) - 0usize];
    ["Offset of field: slurmdb_account_rec_t::coordinators"]
        [::std::mem::offset_of!(slurmdb_account_rec_t, coordinators) - 8usize];
    ["Offset of field: slurmdb_account_rec_t::description"]
        [::std::mem::offset_of!(slurmdb_account_rec_t, description) - 16usize];
    ["Offset of field: slurmdb_account_rec_t::flags"]
        [::std::mem::offset_of!(slurmdb_account_rec_t, flags) - 24usize];
    ["Offset of field: slurmdb_account_rec_t::name"]
        [::std::mem::offset_of!(slurmdb_account_rec_t, name) - 32usize];
    ["Offset of field: slurmdb_account_rec_t::organization"]
        [::std::mem::offset_of!(slurmdb_account_rec_t, organization) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct slurmdb_accounting_rec_t {
    pub alloc_secs: u64,
    pub id: u32,
    pub id_alt: u32,
    pub period_start: time_t,
    pub tres_rec: slurmdb_tres_rec_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of slurmdb_accounting_rec_t"]
        [::std::mem::size_of::<slurmdb_accounting_rec_t>() - 72usize];
    ["Alignment of slurmdb_accounting_rec_t"]
        [::std::mem::align_of::<slurmdb_accounting_rec_t>() - 8usize];
    ["Offset of field: slurmdb_accounting_rec_t::alloc_secs"]
        [::std::mem::offset_of!(slurmdb_accounting_rec_t, alloc_secs) - 0usize];
    ["Offset of field: slurmdb_accounting_rec_t::id"]
        [::std::mem::offset_of!(slurmdb_accounting_rec_t, id) - 8usize];
    ["Offset of field: slurmdb_accounting_rec_t::id_alt"]
        [::std::mem::offset_of!(slurmdb_accounting_rec_t, id_alt) - 12usize];
    ["Offset of field: slurmdb_accounting_rec_t::period_start"]
        [::std::mem::offset_of!(slurmdb_accounting_rec_t, period_start) - 16usize];
    ["Offset of field: slurmdb_accounting_rec_t::tres_rec"]
        [::std::mem::offset_of!(slurmdb_accounting_rec_t, tres_rec) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct slurmdb_archive_cond_t {
    pub archive_dir: *mut ::std::os::raw::c_char,
    pub archive_script: *mut ::std::os::raw::c_char,
    pub job_cond: *mut slurmdb_job_cond_t,
    pub purge_event: u32,
    pub purge_job: u32,
    pub purge_resv: u32,
    pub purge_step: u32,
    pub purge_suspend: u32,
    pub purge_txn: u32,
    pub purge_usage: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of slurmdb_archive_cond_t"][::std::mem::size_of::<slurmdb_archive_cond_t>() - 56usize];
    ["Alignment of slurmdb_archive_cond_t"]
        [::std::mem::align_of::<slurmdb_archive_cond_t>() - 8usize];
    ["Offset of field: slurmdb_archive_cond_t::archive_dir"]
        [::std::mem::offset_of!(slurmdb_archive_cond_t, archive_dir) - 0usize];
    ["Offset of field: slurmdb_archive_cond_t::archive_script"]
        [::std::mem::offset_of!(slurmdb_archive_cond_t, archive_script) - 8usize];
    ["Offset of field: slurmdb_archive_cond_t::job_cond"]
        [::std::mem::offset_of!(slurmdb_archive_cond_t, job_cond) - 16usize];
    ["Offset of field: slurmdb_archive_cond_t::purge_event"]
        [::std::mem::offset_of!(slurmdb_archive_cond_t, purge_event) - 24usize];
    ["Offset of field: slurmdb_archive_cond_t::purge_job"]
        [::std::mem::offset_of!(slurmdb_archive_cond_t, purge_job) - 28usize];
    ["Offset of field: slurmdb_archive_cond_t::purge_resv"]
        [::std::mem::offset_of!(slurmdb_archive_cond_t, purge_resv) - 32usize];
    ["Offset of field: slurmdb_archive_cond_t::purge_step"]
        [::std::mem::offset_of!(slurmdb_archive_cond_t, purge_step) - 36usize];
    ["Offset of field: slurmdb_archive_cond_t::purge_suspend"]
        [::std::mem::offset_of!(slurmdb_archive_cond_t, purge_suspend) - 40usize];
    ["Offset of field: slurmdb_archive_cond_t::purge_txn"]
        [::std::mem::offset_of!(slurmdb_archive_cond_t, purge_txn) - 44usize];
    ["Offset of field: slurmdb_archive_cond_t::purge_usage"]
        [::std::mem::offset_of!(slurmdb_archive_cond_t, purge_usage) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct slurmdb_archive_rec_t {
    pub archive_file: *mut ::std::os::raw::c_char,
    pub insert: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of slurmdb_archive_rec_t"][::std::mem::size_of::<slurmdb_archive_rec_t>() - 16usize];
    ["Alignment of slurmdb_archive_rec_t"]
        [::std::mem::align_of::<slurmdb_archive_rec_t>() - 8usize];
    ["Offset of field: slurmdb_archive_rec_t::archive_file"]
        [::std::mem::offset_of!(slurmdb_archive_rec_t, archive_file) - 0usize];
    ["Offset of field: slurmdb_archive_rec_t::insert"]
        [::std::mem::offset_of!(slurmdb_archive_rec_t, insert) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct slurmdb_tres_cond_t {
    pub count: u64,
    pub format_list: *mut list_t,
    pub id_list: *mut list_t,
    pub name_list: *mut list_t,
    pub type_list: *mut list_t,
    pub with_deleted: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of slurmdb_tres_cond_t"][::std::mem::size_of::<slurmdb_tres_cond_t>() - 48usize];
    ["Alignment of slurmdb_tres_cond_t"][::std::mem::align_of::<slurmdb_tres_cond_t>() - 8usize];
    ["Offset of field: slurmdb_tres_cond_t::count"]
        [::std::mem::offset_of!(slurmdb_tres_cond_t, count) - 0usize];
    ["Offset of field: slurmdb_tres_cond_t::format_list"]
        [::std::mem::offset_of!(slurmdb_tres_cond_t, format_list) - 8usize];
    ["Offset of field: slurmdb_tres_cond_t::id_list"]
        [::std::mem::offset_of!(slurmdb_tres_cond_t, id_list) - 16usize];
    ["Offset of field: slurmdb_tres_cond_t::name_list"]
        [::std::mem::offset_of!(slurmdb_tres_cond_t, name_list) - 24usize];
    ["Offset of field: slurmdb_tres_cond_t::type_list"]
        [::std::mem::offset_of!(slurmdb_tres_cond_t, type_list) - 32usize];
    ["Offset of field: slurmdb_tres_cond_t::with_deleted"]
        [::std::mem::offset_of!(slurmdb_tres_cond_t, with_deleted) - 40usize];
};
pub type slurmdb_assoc_usage_t = slurmdb_assoc_usage;
pub type slurmdb_bf_usage_t = slurmdb_bf_usage;
pub type slurmdb_user_rec_t = slurmdb_user_rec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct slurmdb_assoc_rec {
    pub accounting_list: *mut list_t,
    pub acct: *mut ::std::os::raw::c_char,
    pub assoc_next: *mut slurmdb_assoc_rec,
    pub assoc_next_id: *mut slurmdb_assoc_rec,
    pub bf_usage: *mut slurmdb_bf_usage_t,
    pub cluster: *mut ::std::os::raw::c_char,
    pub comment: *mut ::std::os::raw::c_char,
    pub def_qos_id: u32,
    pub flags: slurmdb_assoc_flags_t,
    pub grp_jobs: u32,
    pub grp_jobs_accrue: u32,
    pub grp_submit_jobs: u32,
    pub grp_tres: *mut ::std::os::raw::c_char,
    pub grp_tres_ctld: *mut u64,
    pub grp_tres_mins: *mut ::std::os::raw::c_char,
    pub grp_tres_mins_ctld: *mut u64,
    pub grp_tres_run_mins: *mut ::std::os::raw::c_char,
    pub grp_tres_run_mins_ctld: *mut u64,
    pub grp_wall: u32,
    pub id: u32,
    pub is_def: u16,
    pub leaf_usage: *mut slurmdb_assoc_usage_t,
    pub lft: u32,
    pub lineage: *mut ::std::os::raw::c_char,
    pub max_jobs: u32,
    pub max_jobs_accrue: u32,
    pub max_submit_jobs: u32,
    pub max_tres_mins_pj: *mut ::std::os::raw::c_char,
    pub max_tres_mins_ctld: *mut u64,
    pub max_tres_run_mins: *mut ::std::os::raw::c_char,
    pub max_tres_run_mins_ctld: *mut u64,
    pub max_tres_pj: *mut ::std::os::raw::c_char,
    pub max_tres_ctld: *mut u64,
    pub max_tres_pn: *mut ::std::os::raw::c_char,
    pub max_tres_pn_ctld: *mut u64,
    pub max_wall_pj: u32,
    pub min_prio_thresh: u32,
    pub parent_acct: *mut ::std::os::raw::c_char,
    pub parent_id: u32,
    pub partition: *mut ::std::os::raw::c_char,
    pub priority: u32,
    pub qos_list: *mut list_t,
    pub rgt: u32,
    pub shares_raw: u32,
    pub uid: u32,
    pub usage: *mut slurmdb_assoc_usage_t,
    pub user: *mut ::std::os::raw::c_char,
    pub user_rec: *mut slurmdb_user_rec_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of slurmdb_assoc_rec"][::std::mem::size_of::<slurmdb_assoc_rec>() - 336usize];
    ["Alignment of slurmdb_assoc_rec"][::std::mem::align_of::<slurmdb_assoc_rec>() - 8usize];
    ["Offset of field: slurmdb_assoc_rec::accounting_list"]
        [::std::mem::offset_of!(slurmdb_assoc_rec, accounting_list) - 0usize];
    ["Offset of field: slurmdb_assoc_rec::acct"]
        [::std::mem::offset_of!(slurmdb_assoc_rec, acct) - 8usize];
    ["Offset of field: slurmdb_assoc_rec::assoc_next"]
        [::std::mem::offset_of!(slurmdb_assoc_rec, assoc_next) - 16usize];
    ["Offset of field: slurmdb_assoc_rec::assoc_next_id"]
        [::std::mem::offset_of!(slurmdb_assoc_rec, assoc_next_id) - 24usize];
    ["Offset of field: slurmdb_assoc_rec::bf_usage"]
        [::std::mem::offset_of!(slurmdb_assoc_rec, bf_usage) - 32usize];
    ["Offset of field: slurmdb_assoc_rec::cluster"]
        [::std::mem::offset_of!(slurmdb_assoc_rec, cluster) - 40usize];
    ["Offset of field: slurmdb_assoc_rec::comment"]
        [::std::mem::offset_of!(slurmdb_assoc_rec, comment) - 48usize];
    ["Offset of field: slurmdb_assoc_rec::def_qos_id"]
        [::std::mem::offset_of!(slurmdb_assoc_rec, def_qos_id) - 56usize];
    ["Offset of field: slurmdb_assoc_rec::flags"]
        [::std::mem::offset_of!(slurmdb_assoc_rec, flags) - 60usize];
    ["Offset of field: slurmdb_assoc_rec::grp_jobs"]
        [::std::mem::offset_of!(slurmdb_assoc_rec, grp_jobs) - 64usize];
    ["Offset of field: slurmdb_assoc_rec::grp_jobs_accrue"]
        [::std::mem::offset_of!(slurmdb_assoc_rec, grp_jobs_accrue) - 68usize];
    ["Offset of field: slurmdb_assoc_rec::grp_submit_jobs"]
        [::std::mem::offset_of!(slurmdb_assoc_rec, grp_submit_jobs) - 72usize];
    ["Offset of field: slurmdb_assoc_rec::grp_tres"]
        [::std::mem::offset_of!(slurmdb_assoc_rec, grp_tres) - 80usize];
    ["Offset of field: slurmdb_assoc_rec::grp_tres_ctld"]
        [::std::mem::offset_of!(slurmdb_assoc_rec, grp_tres_ctld) - 88usize];
    ["Offset of field: slurmdb_assoc_rec::grp_tres_mins"]
        [::std::mem::offset_of!(slurmdb_assoc_rec, grp_tres_mins) - 96usize];
    ["Offset of field: slurmdb_assoc_rec::grp_tres_mins_ctld"]
        [::std::mem::offset_of!(slurmdb_assoc_rec, grp_tres_mins_ctld) - 104usize];
    ["Offset of field: slurmdb_assoc_rec::grp_tres_run_mins"]
        [::std::mem::offset_of!(slurmdb_assoc_rec, grp_tres_run_mins) - 112usize];
    ["Offset of field: slurmdb_assoc_rec::grp_tres_run_mins_ctld"]
        [::std::mem::offset_of!(slurmdb_assoc_rec, grp_tres_run_mins_ctld) - 120usize];
    ["Offset of field: slurmdb_assoc_rec::grp_wall"]
        [::std::mem::offset_of!(slurmdb_assoc_rec, grp_wall) - 128usize];
    ["Offset of field: slurmdb_assoc_rec::id"]
        [::std::mem::offset_of!(slurmdb_assoc_rec, id) - 132usize];
    ["Offset of field: slurmdb_assoc_rec::is_def"]
        [::std::mem::offset_of!(slurmdb_assoc_rec, is_def) - 136usize];
    ["Offset of field: slurmdb_assoc_rec::leaf_usage"]
        [::std::mem::offset_of!(slurmdb_assoc_rec, leaf_usage) - 144usize];
    ["Offset of field: slurmdb_assoc_rec::lft"]
        [::std::mem::offset_of!(slurmdb_assoc_rec, lft) - 152usize];
    ["Offset of field: slurmdb_assoc_rec::lineage"]
        [::std::mem::offset_of!(slurmdb_assoc_rec, lineage) - 160usize];
    ["Offset of field: slurmdb_assoc_rec::max_jobs"]
        [::std::mem::offset_of!(slurmdb_assoc_rec, max_jobs) - 168usize];
    ["Offset of field: slurmdb_assoc_rec::max_jobs_accrue"]
        [::std::mem::offset_of!(slurmdb_assoc_rec, max_jobs_accrue) - 172usize];
    ["Offset of field: slurmdb_assoc_rec::max_submit_jobs"]
        [::std::mem::offset_of!(slurmdb_assoc_rec, max_submit_jobs) - 176usize];
    ["Offset of field: slurmdb_assoc_rec::max_tres_mins_pj"]
        [::std::mem::offset_of!(slurmdb_assoc_rec, max_tres_mins_pj) - 184usize];
    ["Offset of field: slurmdb_assoc_rec::max_tres_mins_ctld"]
        [::std::mem::offset_of!(slurmdb_assoc_rec, max_tres_mins_ctld) - 192usize];
    ["Offset of field: slurmdb_assoc_rec::max_tres_run_mins"]
        [::std::mem::offset_of!(slurmdb_assoc_rec, max_tres_run_mins) - 200usize];
    ["Offset of field: slurmdb_assoc_rec::max_tres_run_mins_ctld"]
        [::std::mem::offset_of!(slurmdb_assoc_rec, max_tres_run_mins_ctld) - 208usize];
    ["Offset of field: slurmdb_assoc_rec::max_tres_pj"]
        [::std::mem::offset_of!(slurmdb_assoc_rec, max_tres_pj) - 216usize];
    ["Offset of field: slurmdb_assoc_rec::max_tres_ctld"]
        [::std::mem::offset_of!(slurmdb_assoc_rec, max_tres_ctld) - 224usize];
    ["Offset of field: slurmdb_assoc_rec::max_tres_pn"]
        [::std::mem::offset_of!(slurmdb_assoc_rec, max_tres_pn) - 232usize];
    ["Offset of field: slurmdb_assoc_rec::max_tres_pn_ctld"]
        [::std::mem::offset_of!(slurmdb_assoc_rec, max_tres_pn_ctld) - 240usize];
    ["Offset of field: slurmdb_assoc_rec::max_wall_pj"]
        [::std::mem::offset_of!(slurmdb_assoc_rec, max_wall_pj) - 248usize];
    ["Offset of field: slurmdb_assoc_rec::min_prio_thresh"]
        [::std::mem::offset_of!(slurmdb_assoc_rec, min_prio_thresh) - 252usize];
    ["Offset of field: slurmdb_assoc_rec::parent_acct"]
        [::std::mem::offset_of!(slurmdb_assoc_rec, parent_acct) - 256usize];
    ["Offset of field: slurmdb_assoc_rec::parent_id"]
        [::std::mem::offset_of!(slurmdb_assoc_rec, parent_id) - 264usize];
    ["Offset of field: slurmdb_assoc_rec::partition"]
        [::std::mem::offset_of!(slurmdb_assoc_rec, partition) - 272usize];
    ["Offset of field: slurmdb_assoc_rec::priority"]
        [::std::mem::offset_of!(slurmdb_assoc_rec, priority) - 280usize];
    ["Offset of field: slurmdb_assoc_rec::qos_list"]
        [::std::mem::offset_of!(slurmdb_assoc_rec, qos_list) - 288usize];
    ["Offset of field: slurmdb_assoc_rec::rgt"]
        [::std::mem::offset_of!(slurmdb_assoc_rec, rgt) - 296usize];
    ["Offset of field: slurmdb_assoc_rec::shares_raw"]
        [::std::mem::offset_of!(slurmdb_assoc_rec, shares_raw) - 300usize];
    ["Offset of field: slurmdb_assoc_rec::uid"]
        [::std::mem::offset_of!(slurmdb_assoc_rec, uid) - 304usize];
    ["Offset of field: slurmdb_assoc_rec::usage"]
        [::std::mem::offset_of!(slurmdb_assoc_rec, usage) - 312usize];
    ["Offset of field: slurmdb_assoc_rec::user"]
        [::std::mem::offset_of!(slurmdb_assoc_rec, user) - 320usize];
    ["Offset of field: slurmdb_assoc_rec::user_rec"]
        [::std::mem::offset_of!(slurmdb_assoc_rec, user_rec) - 328usize];
};
pub type slurmdb_assoc_rec_t = slurmdb_assoc_rec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct slurmdb_add_assoc_cond_t {
    pub acct_list: *mut list_t,
    pub assoc: slurmdb_assoc_rec_t,
    pub cluster_list: *mut list_t,
    pub default_acct: *mut ::std::os::raw::c_char,
    pub partition_list: *mut list_t,
    pub user_list: *mut list_t,
    pub wckey_list: *mut list_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of slurmdb_add_assoc_cond_t"]
        [::std::mem::size_of::<slurmdb_add_assoc_cond_t>() - 384usize];
    ["Alignment of slurmdb_add_assoc_cond_t"]
        [::std::mem::align_of::<slurmdb_add_assoc_cond_t>() - 8usize];
    ["Offset of field: slurmdb_add_assoc_cond_t::acct_list"]
        [::std::mem::offset_of!(slurmdb_add_assoc_cond_t, acct_list) - 0usize];
    ["Offset of field: slurmdb_add_assoc_cond_t::assoc"]
        [::std::mem::offset_of!(slurmdb_add_assoc_cond_t, assoc) - 8usize];
    ["Offset of field: slurmdb_add_assoc_cond_t::cluster_list"]
        [::std::mem::offset_of!(slurmdb_add_assoc_cond_t, cluster_list) - 344usize];
    ["Offset of field: slurmdb_add_assoc_cond_t::default_acct"]
        [::std::mem::offset_of!(slurmdb_add_assoc_cond_t, default_acct) - 352usize];
    ["Offset of field: slurmdb_add_assoc_cond_t::partition_list"]
        [::std::mem::offset_of!(slurmdb_add_assoc_cond_t, partition_list) - 360usize];
    ["Offset of field: slurmdb_add_assoc_cond_t::user_list"]
        [::std::mem::offset_of!(slurmdb_add_assoc_cond_t, user_list) - 368usize];
    ["Offset of field: slurmdb_add_assoc_cond_t::wckey_list"]
        [::std::mem::offset_of!(slurmdb_add_assoc_cond_t, wckey_list) - 376usize];
};
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct slurmdb_assoc_usage {
    pub accrue_cnt: u32,
    pub children_list: *mut list_t,
    pub grp_node_bitmap: *mut bitstr_t,
    pub grp_node_job_cnt: *mut u16,
    pub grp_used_tres: *mut u64,
    pub grp_used_tres_run_secs: *mut u64,
    pub grp_used_wall: f64,
    pub fs_factor: f64,
    pub level_shares: u32,
    pub parent_assoc_ptr: *mut slurmdb_assoc_rec_t,
    pub priority_norm: f64,
    pub fs_assoc_ptr: *mut slurmdb_assoc_rec_t,
    pub shares_norm: f64,
    pub tres_cnt: u32,
    pub __bindgen_padding_0: [u64; 0usize],
    pub usage_efctv: u128,
    pub usage_norm: u128,
    pub usage_raw: u128,
    pub usage_tres_raw: *mut u128,
    pub used_jobs: u32,
    pub used_submit_jobs: u32,
    pub level_fs: u128,
    pub valid_qos: *mut bitstr_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of slurmdb_assoc_usage"][::std::mem::size_of::<slurmdb_assoc_usage>() - 208usize];
    ["Alignment of slurmdb_assoc_usage"][::std::mem::align_of::<slurmdb_assoc_usage>() - 16usize];
    ["Offset of field: slurmdb_assoc_usage::accrue_cnt"]
        [::std::mem::offset_of!(slurmdb_assoc_usage, accrue_cnt) - 0usize];
    ["Offset of field: slurmdb_assoc_usage::children_list"]
        [::std::mem::offset_of!(slurmdb_assoc_usage, children_list) - 8usize];
    ["Offset of field: slurmdb_assoc_usage::grp_node_bitmap"]
        [::std::mem::offset_of!(slurmdb_assoc_usage, grp_node_bitmap) - 16usize];
    ["Offset of field: slurmdb_assoc_usage::grp_node_job_cnt"]
        [::std::mem::offset_of!(slurmdb_assoc_usage, grp_node_job_cnt) - 24usize];
    ["Offset of field: slurmdb_assoc_usage::grp_used_tres"]
        [::std::mem::offset_of!(slurmdb_assoc_usage, grp_used_tres) - 32usize];
    ["Offset of field: slurmdb_assoc_usage::grp_used_tres_run_secs"]
        [::std::mem::offset_of!(slurmdb_assoc_usage, grp_used_tres_run_secs) - 40usize];
    ["Offset of field: slurmdb_assoc_usage::grp_used_wall"]
        [::std::mem::offset_of!(slurmdb_assoc_usage, grp_used_wall) - 48usize];
    ["Offset of field: slurmdb_assoc_usage::fs_factor"]
        [::std::mem::offset_of!(slurmdb_assoc_usage, fs_factor) - 56usize];
    ["Offset of field: slurmdb_assoc_usage::level_shares"]
        [::std::mem::offset_of!(slurmdb_assoc_usage, level_shares) - 64usize];
    ["Offset of field: slurmdb_assoc_usage::parent_assoc_ptr"]
        [::std::mem::offset_of!(slurmdb_assoc_usage, parent_assoc_ptr) - 72usize];
    ["Offset of field: slurmdb_assoc_usage::priority_norm"]
        [::std::mem::offset_of!(slurmdb_assoc_usage, priority_norm) - 80usize];
    ["Offset of field: slurmdb_assoc_usage::fs_assoc_ptr"]
        [::std::mem::offset_of!(slurmdb_assoc_usage, fs_assoc_ptr) - 88usize];
    ["Offset of field: slurmdb_assoc_usage::shares_norm"]
        [::std::mem::offset_of!(slurmdb_assoc_usage, shares_norm) - 96usize];
    ["Offset of field: slurmdb_assoc_usage::tres_cnt"]
        [::std::mem::offset_of!(slurmdb_assoc_usage, tres_cnt) - 104usize];
    ["Offset of field: slurmdb_assoc_usage::usage_efctv"]
        [::std::mem::offset_of!(slurmdb_assoc_usage, usage_efctv) - 112usize];
    ["Offset of field: slurmdb_assoc_usage::usage_norm"]
        [::std::mem::offset_of!(slurmdb_assoc_usage, usage_norm) - 128usize];
    ["Offset of field: slurmdb_assoc_usage::usage_raw"]
        [::std::mem::offset_of!(slurmdb_assoc_usage, usage_raw) - 144usize];
    ["Offset of field: slurmdb_assoc_usage::usage_tres_raw"]
        [::std::mem::offset_of!(slurmdb_assoc_usage, usage_tres_raw) - 160usize];
    ["Offset of field: slurmdb_assoc_usage::used_jobs"]
        [::std::mem::offset_of!(slurmdb_assoc_usage, used_jobs) - 168usize];
    ["Offset of field: slurmdb_assoc_usage::used_submit_jobs"]
        [::std::mem::offset_of!(slurmdb_assoc_usage, used_submit_jobs) - 172usize];
    ["Offset of field: slurmdb_assoc_usage::level_fs"]
        [::std::mem::offset_of!(slurmdb_assoc_usage, level_fs) - 176usize];
    ["Offset of field: slurmdb_assoc_usage::valid_qos"]
        [::std::mem::offset_of!(slurmdb_assoc_usage, valid_qos) - 192usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct slurmdb_bf_usage {
    pub count: u64,
    pub last_sched: time_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of slurmdb_bf_usage"][::std::mem::size_of::<slurmdb_bf_usage>() - 16usize];
    ["Alignment of slurmdb_bf_usage"][::std::mem::align_of::<slurmdb_bf_usage>() - 8usize];
    ["Offset of field: slurmdb_bf_usage::count"]
        [::std::mem::offset_of!(slurmdb_bf_usage, count) - 0usize];
    ["Offset of field: slurmdb_bf_usage::last_sched"]
        [::std::mem::offset_of!(slurmdb_bf_usage, last_sched) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct slurmdb_cluster_cond_t {
    pub classification: u16,
    pub cluster_list: *mut list_t,
    pub federation_list: *mut list_t,
    pub flags: u32,
    pub format_list: *mut list_t,
    pub rpc_version_list: *mut list_t,
    pub usage_end: time_t,
    pub usage_start: time_t,
    pub with_deleted: u16,
    pub with_usage: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of slurmdb_cluster_cond_t"][::std::mem::size_of::<slurmdb_cluster_cond_t>() - 72usize];
    ["Alignment of slurmdb_cluster_cond_t"]
        [::std::mem::align_of::<slurmdb_cluster_cond_t>() - 8usize];
    ["Offset of field: slurmdb_cluster_cond_t::classification"]
        [::std::mem::offset_of!(slurmdb_cluster_cond_t, classification) - 0usize];
    ["Offset of field: slurmdb_cluster_cond_t::cluster_list"]
        [::std::mem::offset_of!(slurmdb_cluster_cond_t, cluster_list) - 8usize];
    ["Offset of field: slurmdb_cluster_cond_t::federation_list"]
        [::std::mem::offset_of!(slurmdb_cluster_cond_t, federation_list) - 16usize];
    ["Offset of field: slurmdb_cluster_cond_t::flags"]
        [::std::mem::offset_of!(slurmdb_cluster_cond_t, flags) - 24usize];
    ["Offset of field: slurmdb_cluster_cond_t::format_list"]
        [::std::mem::offset_of!(slurmdb_cluster_cond_t, format_list) - 32usize];
    ["Offset of field: slurmdb_cluster_cond_t::rpc_version_list"]
        [::std::mem::offset_of!(slurmdb_cluster_cond_t, rpc_version_list) - 40usize];
    ["Offset of field: slurmdb_cluster_cond_t::usage_end"]
        [::std::mem::offset_of!(slurmdb_cluster_cond_t, usage_end) - 48usize];
    ["Offset of field: slurmdb_cluster_cond_t::usage_start"]
        [::std::mem::offset_of!(slurmdb_cluster_cond_t, usage_start) - 56usize];
    ["Offset of field: slurmdb_cluster_cond_t::with_deleted"]
        [::std::mem::offset_of!(slurmdb_cluster_cond_t, with_deleted) - 64usize];
    ["Offset of field: slurmdb_cluster_cond_t::with_usage"]
        [::std::mem::offset_of!(slurmdb_cluster_cond_t, with_usage) - 66usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct slurmdb_cluster_fed_t {
    pub feature_list: *mut list_t,
    pub id: u32,
    pub name: *mut ::std::os::raw::c_char,
    pub recv: *mut ::std::os::raw::c_void,
    pub send: *mut ::std::os::raw::c_void,
    pub state: u32,
    pub sync_recvd: bool,
    pub sync_sent: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of slurmdb_cluster_fed_t"][::std::mem::size_of::<slurmdb_cluster_fed_t>() - 48usize];
    ["Alignment of slurmdb_cluster_fed_t"]
        [::std::mem::align_of::<slurmdb_cluster_fed_t>() - 8usize];
    ["Offset of field: slurmdb_cluster_fed_t::feature_list"]
        [::std::mem::offset_of!(slurmdb_cluster_fed_t, feature_list) - 0usize];
    ["Offset of field: slurmdb_cluster_fed_t::id"]
        [::std::mem::offset_of!(slurmdb_cluster_fed_t, id) - 8usize];
    ["Offset of field: slurmdb_cluster_fed_t::name"]
        [::std::mem::offset_of!(slurmdb_cluster_fed_t, name) - 16usize];
    ["Offset of field: slurmdb_cluster_fed_t::recv"]
        [::std::mem::offset_of!(slurmdb_cluster_fed_t, recv) - 24usize];
    ["Offset of field: slurmdb_cluster_fed_t::send"]
        [::std::mem::offset_of!(slurmdb_cluster_fed_t, send) - 32usize];
    ["Offset of field: slurmdb_cluster_fed_t::state"]
        [::std::mem::offset_of!(slurmdb_cluster_fed_t, state) - 40usize];
    ["Offset of field: slurmdb_cluster_fed_t::sync_recvd"]
        [::std::mem::offset_of!(slurmdb_cluster_fed_t, sync_recvd) - 44usize];
    ["Offset of field: slurmdb_cluster_fed_t::sync_sent"]
        [::std::mem::offset_of!(slurmdb_cluster_fed_t, sync_sent) - 45usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct slurmdb_cluster_rec {
    pub accounting_list: *mut list_t,
    pub classification: u16,
    pub comm_fail_time: time_t,
    pub control_addr: slurm_addr_t,
    pub control_host: *mut ::std::os::raw::c_char,
    pub control_port: u32,
    pub dimensions: u16,
    pub dim_size: *mut ::std::os::raw::c_int,
    pub id: u16,
    pub fed: slurmdb_cluster_fed_t,
    pub flags: u32,
    pub lock: pthread_mutex_t,
    pub name: *mut ::std::os::raw::c_char,
    pub nodes: *mut ::std::os::raw::c_char,
    pub root_assoc: *mut slurmdb_assoc_rec_t,
    pub rpc_version: u16,
    pub send_rpc: *mut list_t,
    pub tres_str: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of slurmdb_cluster_rec"][::std::mem::size_of::<slurmdb_cluster_rec>() - 328usize];
    ["Alignment of slurmdb_cluster_rec"][::std::mem::align_of::<slurmdb_cluster_rec>() - 8usize];
    ["Offset of field: slurmdb_cluster_rec::accounting_list"]
        [::std::mem::offset_of!(slurmdb_cluster_rec, accounting_list) - 0usize];
    ["Offset of field: slurmdb_cluster_rec::classification"]
        [::std::mem::offset_of!(slurmdb_cluster_rec, classification) - 8usize];
    ["Offset of field: slurmdb_cluster_rec::comm_fail_time"]
        [::std::mem::offset_of!(slurmdb_cluster_rec, comm_fail_time) - 16usize];
    ["Offset of field: slurmdb_cluster_rec::control_addr"]
        [::std::mem::offset_of!(slurmdb_cluster_rec, control_addr) - 24usize];
    ["Offset of field: slurmdb_cluster_rec::control_host"]
        [::std::mem::offset_of!(slurmdb_cluster_rec, control_host) - 152usize];
    ["Offset of field: slurmdb_cluster_rec::control_port"]
        [::std::mem::offset_of!(slurmdb_cluster_rec, control_port) - 160usize];
    ["Offset of field: slurmdb_cluster_rec::dimensions"]
        [::std::mem::offset_of!(slurmdb_cluster_rec, dimensions) - 164usize];
    ["Offset of field: slurmdb_cluster_rec::dim_size"]
        [::std::mem::offset_of!(slurmdb_cluster_rec, dim_size) - 168usize];
    ["Offset of field: slurmdb_cluster_rec::id"]
        [::std::mem::offset_of!(slurmdb_cluster_rec, id) - 176usize];
    ["Offset of field: slurmdb_cluster_rec::fed"]
        [::std::mem::offset_of!(slurmdb_cluster_rec, fed) - 184usize];
    ["Offset of field: slurmdb_cluster_rec::flags"]
        [::std::mem::offset_of!(slurmdb_cluster_rec, flags) - 232usize];
    ["Offset of field: slurmdb_cluster_rec::lock"]
        [::std::mem::offset_of!(slurmdb_cluster_rec, lock) - 240usize];
    ["Offset of field: slurmdb_cluster_rec::name"]
        [::std::mem::offset_of!(slurmdb_cluster_rec, name) - 280usize];
    ["Offset of field: slurmdb_cluster_rec::nodes"]
        [::std::mem::offset_of!(slurmdb_cluster_rec, nodes) - 288usize];
    ["Offset of field: slurmdb_cluster_rec::root_assoc"]
        [::std::mem::offset_of!(slurmdb_cluster_rec, root_assoc) - 296usize];
    ["Offset of field: slurmdb_cluster_rec::rpc_version"]
        [::std::mem::offset_of!(slurmdb_cluster_rec, rpc_version) - 304usize];
    ["Offset of field: slurmdb_cluster_rec::send_rpc"]
        [::std::mem::offset_of!(slurmdb_cluster_rec, send_rpc) - 312usize];
    ["Offset of field: slurmdb_cluster_rec::tres_str"]
        [::std::mem::offset_of!(slurmdb_cluster_rec, tres_str) - 320usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct slurmdb_cluster_accounting_rec_t {
    pub alloc_secs: u64,
    pub down_secs: u64,
    pub idle_secs: u64,
    pub over_secs: u64,
    pub pdown_secs: u64,
    pub period_start: time_t,
    pub plan_secs: u64,
    pub tres_rec: slurmdb_tres_rec_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of slurmdb_cluster_accounting_rec_t"]
        [::std::mem::size_of::<slurmdb_cluster_accounting_rec_t>() - 104usize];
    ["Alignment of slurmdb_cluster_accounting_rec_t"]
        [::std::mem::align_of::<slurmdb_cluster_accounting_rec_t>() - 8usize];
    ["Offset of field: slurmdb_cluster_accounting_rec_t::alloc_secs"]
        [::std::mem::offset_of!(slurmdb_cluster_accounting_rec_t, alloc_secs) - 0usize];
    ["Offset of field: slurmdb_cluster_accounting_rec_t::down_secs"]
        [::std::mem::offset_of!(slurmdb_cluster_accounting_rec_t, down_secs) - 8usize];
    ["Offset of field: slurmdb_cluster_accounting_rec_t::idle_secs"]
        [::std::mem::offset_of!(slurmdb_cluster_accounting_rec_t, idle_secs) - 16usize];
    ["Offset of field: slurmdb_cluster_accounting_rec_t::over_secs"]
        [::std::mem::offset_of!(slurmdb_cluster_accounting_rec_t, over_secs) - 24usize];
    ["Offset of field: slurmdb_cluster_accounting_rec_t::pdown_secs"]
        [::std::mem::offset_of!(slurmdb_cluster_accounting_rec_t, pdown_secs) - 32usize];
    ["Offset of field: slurmdb_cluster_accounting_rec_t::period_start"]
        [::std::mem::offset_of!(slurmdb_cluster_accounting_rec_t, period_start) - 40usize];
    ["Offset of field: slurmdb_cluster_accounting_rec_t::plan_secs"]
        [::std::mem::offset_of!(slurmdb_cluster_accounting_rec_t, plan_secs) - 48usize];
    ["Offset of field: slurmdb_cluster_accounting_rec_t::tres_rec"]
        [::std::mem::offset_of!(slurmdb_cluster_accounting_rec_t, tres_rec) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct slurmdb_clus_res_rec_t {
    pub cluster: *mut ::std::os::raw::c_char,
    pub allowed: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of slurmdb_clus_res_rec_t"][::std::mem::size_of::<slurmdb_clus_res_rec_t>() - 16usize];
    ["Alignment of slurmdb_clus_res_rec_t"]
        [::std::mem::align_of::<slurmdb_clus_res_rec_t>() - 8usize];
    ["Offset of field: slurmdb_clus_res_rec_t::cluster"]
        [::std::mem::offset_of!(slurmdb_clus_res_rec_t, cluster) - 0usize];
    ["Offset of field: slurmdb_clus_res_rec_t::allowed"]
        [::std::mem::offset_of!(slurmdb_clus_res_rec_t, allowed) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct slurmdb_coord_rec_t {
    pub name: *mut ::std::os::raw::c_char,
    pub direct: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of slurmdb_coord_rec_t"][::std::mem::size_of::<slurmdb_coord_rec_t>() - 16usize];
    ["Alignment of slurmdb_coord_rec_t"][::std::mem::align_of::<slurmdb_coord_rec_t>() - 8usize];
    ["Offset of field: slurmdb_coord_rec_t::name"]
        [::std::mem::offset_of!(slurmdb_coord_rec_t, name) - 0usize];
    ["Offset of field: slurmdb_coord_rec_t::direct"]
        [::std::mem::offset_of!(slurmdb_coord_rec_t, direct) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct slurmdb_event_cond_t {
    pub cluster_list: *mut list_t,
    pub cond_flags: u32,
    pub cpus_max: u32,
    pub cpus_min: u32,
    pub event_type: u16,
    pub format_list: *mut list_t,
    pub node_list: *mut ::std::os::raw::c_char,
    pub period_end: time_t,
    pub period_start: time_t,
    pub reason_list: *mut list_t,
    pub reason_uid_list: *mut list_t,
    pub state_list: *mut list_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of slurmdb_event_cond_t"][::std::mem::size_of::<slurmdb_event_cond_t>() - 80usize];
    ["Alignment of slurmdb_event_cond_t"][::std::mem::align_of::<slurmdb_event_cond_t>() - 8usize];
    ["Offset of field: slurmdb_event_cond_t::cluster_list"]
        [::std::mem::offset_of!(slurmdb_event_cond_t, cluster_list) - 0usize];
    ["Offset of field: slurmdb_event_cond_t::cond_flags"]
        [::std::mem::offset_of!(slurmdb_event_cond_t, cond_flags) - 8usize];
    ["Offset of field: slurmdb_event_cond_t::cpus_max"]
        [::std::mem::offset_of!(slurmdb_event_cond_t, cpus_max) - 12usize];
    ["Offset of field: slurmdb_event_cond_t::cpus_min"]
        [::std::mem::offset_of!(slurmdb_event_cond_t, cpus_min) - 16usize];
    ["Offset of field: slurmdb_event_cond_t::event_type"]
        [::std::mem::offset_of!(slurmdb_event_cond_t, event_type) - 20usize];
    ["Offset of field: slurmdb_event_cond_t::format_list"]
        [::std::mem::offset_of!(slurmdb_event_cond_t, format_list) - 24usize];
    ["Offset of field: slurmdb_event_cond_t::node_list"]
        [::std::mem::offset_of!(slurmdb_event_cond_t, node_list) - 32usize];
    ["Offset of field: slurmdb_event_cond_t::period_end"]
        [::std::mem::offset_of!(slurmdb_event_cond_t, period_end) - 40usize];
    ["Offset of field: slurmdb_event_cond_t::period_start"]
        [::std::mem::offset_of!(slurmdb_event_cond_t, period_start) - 48usize];
    ["Offset of field: slurmdb_event_cond_t::reason_list"]
        [::std::mem::offset_of!(slurmdb_event_cond_t, reason_list) - 56usize];
    ["Offset of field: slurmdb_event_cond_t::reason_uid_list"]
        [::std::mem::offset_of!(slurmdb_event_cond_t, reason_uid_list) - 64usize];
    ["Offset of field: slurmdb_event_cond_t::state_list"]
        [::std::mem::offset_of!(slurmdb_event_cond_t, state_list) - 72usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct slurmdb_event_rec_t {
    pub cluster: *mut ::std::os::raw::c_char,
    pub cluster_nodes: *mut ::std::os::raw::c_char,
    pub event_type: u16,
    pub node_name: *mut ::std::os::raw::c_char,
    pub period_end: time_t,
    pub period_start: time_t,
    pub reason: *mut ::std::os::raw::c_char,
    pub reason_uid: u32,
    pub state: u32,
    pub tres_str: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of slurmdb_event_rec_t"][::std::mem::size_of::<slurmdb_event_rec_t>() - 72usize];
    ["Alignment of slurmdb_event_rec_t"][::std::mem::align_of::<slurmdb_event_rec_t>() - 8usize];
    ["Offset of field: slurmdb_event_rec_t::cluster"]
        [::std::mem::offset_of!(slurmdb_event_rec_t, cluster) - 0usize];
    ["Offset of field: slurmdb_event_rec_t::cluster_nodes"]
        [::std::mem::offset_of!(slurmdb_event_rec_t, cluster_nodes) - 8usize];
    ["Offset of field: slurmdb_event_rec_t::event_type"]
        [::std::mem::offset_of!(slurmdb_event_rec_t, event_type) - 16usize];
    ["Offset of field: slurmdb_event_rec_t::node_name"]
        [::std::mem::offset_of!(slurmdb_event_rec_t, node_name) - 24usize];
    ["Offset of field: slurmdb_event_rec_t::period_end"]
        [::std::mem::offset_of!(slurmdb_event_rec_t, period_end) - 32usize];
    ["Offset of field: slurmdb_event_rec_t::period_start"]
        [::std::mem::offset_of!(slurmdb_event_rec_t, period_start) - 40usize];
    ["Offset of field: slurmdb_event_rec_t::reason"]
        [::std::mem::offset_of!(slurmdb_event_rec_t, reason) - 48usize];
    ["Offset of field: slurmdb_event_rec_t::reason_uid"]
        [::std::mem::offset_of!(slurmdb_event_rec_t, reason_uid) - 56usize];
    ["Offset of field: slurmdb_event_rec_t::state"]
        [::std::mem::offset_of!(slurmdb_event_rec_t, state) - 60usize];
    ["Offset of field: slurmdb_event_rec_t::tres_str"]
        [::std::mem::offset_of!(slurmdb_event_rec_t, tres_str) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct slurmdb_federation_cond_t {
    pub cluster_list: *mut list_t,
    pub federation_list: *mut list_t,
    pub format_list: *mut list_t,
    pub with_deleted: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of slurmdb_federation_cond_t"]
        [::std::mem::size_of::<slurmdb_federation_cond_t>() - 32usize];
    ["Alignment of slurmdb_federation_cond_t"]
        [::std::mem::align_of::<slurmdb_federation_cond_t>() - 8usize];
    ["Offset of field: slurmdb_federation_cond_t::cluster_list"]
        [::std::mem::offset_of!(slurmdb_federation_cond_t, cluster_list) - 0usize];
    ["Offset of field: slurmdb_federation_cond_t::federation_list"]
        [::std::mem::offset_of!(slurmdb_federation_cond_t, federation_list) - 8usize];
    ["Offset of field: slurmdb_federation_cond_t::format_list"]
        [::std::mem::offset_of!(slurmdb_federation_cond_t, format_list) - 16usize];
    ["Offset of field: slurmdb_federation_cond_t::with_deleted"]
        [::std::mem::offset_of!(slurmdb_federation_cond_t, with_deleted) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct slurmdb_federation_rec_t {
    pub name: *mut ::std::os::raw::c_char,
    pub flags: u32,
    pub cluster_list: *mut list_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of slurmdb_federation_rec_t"]
        [::std::mem::size_of::<slurmdb_federation_rec_t>() - 24usize];
    ["Alignment of slurmdb_federation_rec_t"]
        [::std::mem::align_of::<slurmdb_federation_rec_t>() - 8usize];
    ["Offset of field: slurmdb_federation_rec_t::name"]
        [::std::mem::offset_of!(slurmdb_federation_rec_t, name) - 0usize];
    ["Offset of field: slurmdb_federation_rec_t::flags"]
        [::std::mem::offset_of!(slurmdb_federation_rec_t, flags) - 8usize];
    ["Offset of field: slurmdb_federation_rec_t::cluster_list"]
        [::std::mem::offset_of!(slurmdb_federation_rec_t, cluster_list) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct slurmdb_instance_cond_t {
    pub cluster_list: *mut list_t,
    pub extra_list: *mut list_t,
    pub format_list: *mut list_t,
    pub instance_id_list: *mut list_t,
    pub instance_type_list: *mut list_t,
    pub node_list: *mut ::std::os::raw::c_char,
    pub time_end: time_t,
    pub time_start: time_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of slurmdb_instance_cond_t"][::std::mem::size_of::<slurmdb_instance_cond_t>() - 64usize];
    ["Alignment of slurmdb_instance_cond_t"]
        [::std::mem::align_of::<slurmdb_instance_cond_t>() - 8usize];
    ["Offset of field: slurmdb_instance_cond_t::cluster_list"]
        [::std::mem::offset_of!(slurmdb_instance_cond_t, cluster_list) - 0usize];
    ["Offset of field: slurmdb_instance_cond_t::extra_list"]
        [::std::mem::offset_of!(slurmdb_instance_cond_t, extra_list) - 8usize];
    ["Offset of field: slurmdb_instance_cond_t::format_list"]
        [::std::mem::offset_of!(slurmdb_instance_cond_t, format_list) - 16usize];
    ["Offset of field: slurmdb_instance_cond_t::instance_id_list"]
        [::std::mem::offset_of!(slurmdb_instance_cond_t, instance_id_list) - 24usize];
    ["Offset of field: slurmdb_instance_cond_t::instance_type_list"]
        [::std::mem::offset_of!(slurmdb_instance_cond_t, instance_type_list) - 32usize];
    ["Offset of field: slurmdb_instance_cond_t::node_list"]
        [::std::mem::offset_of!(slurmdb_instance_cond_t, node_list) - 40usize];
    ["Offset of field: slurmdb_instance_cond_t::time_end"]
        [::std::mem::offset_of!(slurmdb_instance_cond_t, time_end) - 48usize];
    ["Offset of field: slurmdb_instance_cond_t::time_start"]
        [::std::mem::offset_of!(slurmdb_instance_cond_t, time_start) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct slurmdb_instance_rec_t {
    pub cluster: *mut ::std::os::raw::c_char,
    pub extra: *mut ::std::os::raw::c_char,
    pub instance_id: *mut ::std::os::raw::c_char,
    pub instance_type: *mut ::std::os::raw::c_char,
    pub node_name: *mut ::std::os::raw::c_char,
    pub time_end: time_t,
    pub time_start: time_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of slurmdb_instance_rec_t"][::std::mem::size_of::<slurmdb_instance_rec_t>() - 56usize];
    ["Alignment of slurmdb_instance_rec_t"]
        [::std::mem::align_of::<slurmdb_instance_rec_t>() - 8usize];
    ["Offset of field: slurmdb_instance_rec_t::cluster"]
        [::std::mem::offset_of!(slurmdb_instance_rec_t, cluster) - 0usize];
    ["Offset of field: slurmdb_instance_rec_t::extra"]
        [::std::mem::offset_of!(slurmdb_instance_rec_t, extra) - 8usize];
    ["Offset of field: slurmdb_instance_rec_t::instance_id"]
        [::std::mem::offset_of!(slurmdb_instance_rec_t, instance_id) - 16usize];
    ["Offset of field: slurmdb_instance_rec_t::instance_type"]
        [::std::mem::offset_of!(slurmdb_instance_rec_t, instance_type) - 24usize];
    ["Offset of field: slurmdb_instance_rec_t::node_name"]
        [::std::mem::offset_of!(slurmdb_instance_rec_t, node_name) - 32usize];
    ["Offset of field: slurmdb_instance_rec_t::time_end"]
        [::std::mem::offset_of!(slurmdb_instance_rec_t, time_end) - 40usize];
    ["Offset of field: slurmdb_instance_rec_t::time_start"]
        [::std::mem::offset_of!(slurmdb_instance_rec_t, time_start) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct slurmdb_job_rec_t {
    pub account: *mut ::std::os::raw::c_char,
    pub admin_comment: *mut ::std::os::raw::c_char,
    pub alloc_nodes: u32,
    pub array_job_id: u32,
    pub array_max_tasks: u32,
    pub array_task_id: u32,
    pub array_task_str: *mut ::std::os::raw::c_char,
    pub associd: u32,
    pub blockid: *mut ::std::os::raw::c_char,
    pub cluster: *mut ::std::os::raw::c_char,
    pub constraints: *mut ::std::os::raw::c_char,
    pub container: *mut ::std::os::raw::c_char,
    pub db_index: u64,
    pub derived_ec: u32,
    pub derived_es: *mut ::std::os::raw::c_char,
    pub elapsed: u32,
    pub eligible: time_t,
    pub end: time_t,
    pub env: *mut ::std::os::raw::c_char,
    pub exitcode: u32,
    pub extra: *mut ::std::os::raw::c_char,
    pub failed_node: *mut ::std::os::raw::c_char,
    pub flags: u32,
    pub first_step_ptr: *mut ::std::os::raw::c_void,
    pub gid: u32,
    pub het_job_id: u32,
    pub het_job_offset: u32,
    pub jobid: u32,
    pub jobname: *mut ::std::os::raw::c_char,
    pub lft: u32,
    pub lineage: *mut ::std::os::raw::c_char,
    pub licenses: *mut ::std::os::raw::c_char,
    pub mcs_label: *mut ::std::os::raw::c_char,
    pub nodes: *mut ::std::os::raw::c_char,
    pub partition: *mut ::std::os::raw::c_char,
    pub priority: u32,
    pub qosid: u32,
    pub qos_req: *mut ::std::os::raw::c_char,
    pub req_cpus: u32,
    pub req_mem: u64,
    pub requid: u32,
    pub restart_cnt: u16,
    pub resvid: u32,
    pub resv_name: *mut ::std::os::raw::c_char,
    pub script: *mut ::std::os::raw::c_char,
    pub show_full: u32,
    pub start: time_t,
    pub state: u32,
    pub state_reason_prev: u32,
    pub steps: *mut list_t,
    pub std_err: *mut ::std::os::raw::c_char,
    pub std_in: *mut ::std::os::raw::c_char,
    pub std_out: *mut ::std::os::raw::c_char,
    pub submit: time_t,
    pub submit_line: *mut ::std::os::raw::c_char,
    pub suspended: u32,
    pub system_comment: *mut ::std::os::raw::c_char,
    pub sys_cpu_sec: u64,
    pub sys_cpu_usec: u64,
    pub timelimit: u32,
    pub tot_cpu_sec: u64,
    pub tot_cpu_usec: u64,
    pub tres_alloc_str: *mut ::std::os::raw::c_char,
    pub tres_req_str: *mut ::std::os::raw::c_char,
    pub uid: u32,
    pub used_gres: *mut ::std::os::raw::c_char,
    pub user: *mut ::std::os::raw::c_char,
    pub user_cpu_sec: u64,
    pub user_cpu_usec: u64,
    pub wckey: *mut ::std::os::raw::c_char,
    pub wckeyid: u32,
    pub work_dir: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of slurmdb_job_rec_t"][::std::mem::size_of::<slurmdb_job_rec_t>() - 520usize];
    ["Alignment of slurmdb_job_rec_t"][::std::mem::align_of::<slurmdb_job_rec_t>() - 8usize];
    ["Offset of field: slurmdb_job_rec_t::account"]
        [::std::mem::offset_of!(slurmdb_job_rec_t, account) - 0usize];
    ["Offset of field: slurmdb_job_rec_t::admin_comment"]
        [::std::mem::offset_of!(slurmdb_job_rec_t, admin_comment) - 8usize];
    ["Offset of field: slurmdb_job_rec_t::alloc_nodes"]
        [::std::mem::offset_of!(slurmdb_job_rec_t, alloc_nodes) - 16usize];
    ["Offset of field: slurmdb_job_rec_t::array_job_id"]
        [::std::mem::offset_of!(slurmdb_job_rec_t, array_job_id) - 20usize];
    ["Offset of field: slurmdb_job_rec_t::array_max_tasks"]
        [::std::mem::offset_of!(slurmdb_job_rec_t, array_max_tasks) - 24usize];
    ["Offset of field: slurmdb_job_rec_t::array_task_id"]
        [::std::mem::offset_of!(slurmdb_job_rec_t, array_task_id) - 28usize];
    ["Offset of field: slurmdb_job_rec_t::array_task_str"]
        [::std::mem::offset_of!(slurmdb_job_rec_t, array_task_str) - 32usize];
    ["Offset of field: slurmdb_job_rec_t::associd"]
        [::std::mem::offset_of!(slurmdb_job_rec_t, associd) - 40usize];
    ["Offset of field: slurmdb_job_rec_t::blockid"]
        [::std::mem::offset_of!(slurmdb_job_rec_t, blockid) - 48usize];
    ["Offset of field: slurmdb_job_rec_t::cluster"]
        [::std::mem::offset_of!(slurmdb_job_rec_t, cluster) - 56usize];
    ["Offset of field: slurmdb_job_rec_t::constraints"]
        [::std::mem::offset_of!(slurmdb_job_rec_t, constraints) - 64usize];
    ["Offset of field: slurmdb_job_rec_t::container"]
        [::std::mem::offset_of!(slurmdb_job_rec_t, container) - 72usize];
    ["Offset of field: slurmdb_job_rec_t::db_index"]
        [::std::mem::offset_of!(slurmdb_job_rec_t, db_index) - 80usize];
    ["Offset of field: slurmdb_job_rec_t::derived_ec"]
        [::std::mem::offset_of!(slurmdb_job_rec_t, derived_ec) - 88usize];
    ["Offset of field: slurmdb_job_rec_t::derived_es"]
        [::std::mem::offset_of!(slurmdb_job_rec_t, derived_es) - 96usize];
    ["Offset of field: slurmdb_job_rec_t::elapsed"]
        [::std::mem::offset_of!(slurmdb_job_rec_t, elapsed) - 104usize];
    ["Offset of field: slurmdb_job_rec_t::eligible"]
        [::std::mem::offset_of!(slurmdb_job_rec_t, eligible) - 112usize];
    ["Offset of field: slurmdb_job_rec_t::end"]
        [::std::mem::offset_of!(slurmdb_job_rec_t, end) - 120usize];
    ["Offset of field: slurmdb_job_rec_t::env"]
        [::std::mem::offset_of!(slurmdb_job_rec_t, env) - 128usize];
    ["Offset of field: slurmdb_job_rec_t::exitcode"]
        [::std::mem::offset_of!(slurmdb_job_rec_t, exitcode) - 136usize];
    ["Offset of field: slurmdb_job_rec_t::extra"]
        [::std::mem::offset_of!(slurmdb_job_rec_t, extra) - 144usize];
    ["Offset of field: slurmdb_job_rec_t::failed_node"]
        [::std::mem::offset_of!(slurmdb_job_rec_t, failed_node) - 152usize];
    ["Offset of field: slurmdb_job_rec_t::flags"]
        [::std::mem::offset_of!(slurmdb_job_rec_t, flags) - 160usize];
    ["Offset of field: slurmdb_job_rec_t::first_step_ptr"]
        [::std::mem::offset_of!(slurmdb_job_rec_t, first_step_ptr) - 168usize];
    ["Offset of field: slurmdb_job_rec_t::gid"]
        [::std::mem::offset_of!(slurmdb_job_rec_t, gid) - 176usize];
    ["Offset of field: slurmdb_job_rec_t::het_job_id"]
        [::std::mem::offset_of!(slurmdb_job_rec_t, het_job_id) - 180usize];
    ["Offset of field: slurmdb_job_rec_t::het_job_offset"]
        [::std::mem::offset_of!(slurmdb_job_rec_t, het_job_offset) - 184usize];
    ["Offset of field: slurmdb_job_rec_t::jobid"]
        [::std::mem::offset_of!(slurmdb_job_rec_t, jobid) - 188usize];
    ["Offset of field: slurmdb_job_rec_t::jobname"]
        [::std::mem::offset_of!(slurmdb_job_rec_t, jobname) - 192usize];
    ["Offset of field: slurmdb_job_rec_t::lft"]
        [::std::mem::offset_of!(slurmdb_job_rec_t, lft) - 200usize];
    ["Offset of field: slurmdb_job_rec_t::lineage"]
        [::std::mem::offset_of!(slurmdb_job_rec_t, lineage) - 208usize];
    ["Offset of field: slurmdb_job_rec_t::licenses"]
        [::std::mem::offset_of!(slurmdb_job_rec_t, licenses) - 216usize];
    ["Offset of field: slurmdb_job_rec_t::mcs_label"]
        [::std::mem::offset_of!(slurmdb_job_rec_t, mcs_label) - 224usize];
    ["Offset of field: slurmdb_job_rec_t::nodes"]
        [::std::mem::offset_of!(slurmdb_job_rec_t, nodes) - 232usize];
    ["Offset of field: slurmdb_job_rec_t::partition"]
        [::std::mem::offset_of!(slurmdb_job_rec_t, partition) - 240usize];
    ["Offset of field: slurmdb_job_rec_t::priority"]
        [::std::mem::offset_of!(slurmdb_job_rec_t, priority) - 248usize];
    ["Offset of field: slurmdb_job_rec_t::qosid"]
        [::std::mem::offset_of!(slurmdb_job_rec_t, qosid) - 252usize];
    ["Offset of field: slurmdb_job_rec_t::qos_req"]
        [::std::mem::offset_of!(slurmdb_job_rec_t, qos_req) - 256usize];
    ["Offset of field: slurmdb_job_rec_t::req_cpus"]
        [::std::mem::offset_of!(slurmdb_job_rec_t, req_cpus) - 264usize];
    ["Offset of field: slurmdb_job_rec_t::req_mem"]
        [::std::mem::offset_of!(slurmdb_job_rec_t, req_mem) - 272usize];
    ["Offset of field: slurmdb_job_rec_t::requid"]
        [::std::mem::offset_of!(slurmdb_job_rec_t, requid) - 280usize];
    ["Offset of field: slurmdb_job_rec_t::restart_cnt"]
        [::std::mem::offset_of!(slurmdb_job_rec_t, restart_cnt) - 284usize];
    ["Offset of field: slurmdb_job_rec_t::resvid"]
        [::std::mem::offset_of!(slurmdb_job_rec_t, resvid) - 288usize];
    ["Offset of field: slurmdb_job_rec_t::resv_name"]
        [::std::mem::offset_of!(slurmdb_job_rec_t, resv_name) - 296usize];
    ["Offset of field: slurmdb_job_rec_t::script"]
        [::std::mem::offset_of!(slurmdb_job_rec_t, script) - 304usize];
    ["Offset of field: slurmdb_job_rec_t::show_full"]
        [::std::mem::offset_of!(slurmdb_job_rec_t, show_full) - 312usize];
    ["Offset of field: slurmdb_job_rec_t::start"]
        [::std::mem::offset_of!(slurmdb_job_rec_t, start) - 320usize];
    ["Offset of field: slurmdb_job_rec_t::state"]
        [::std::mem::offset_of!(slurmdb_job_rec_t, state) - 328usize];
    ["Offset of field: slurmdb_job_rec_t::state_reason_prev"]
        [::std::mem::offset_of!(slurmdb_job_rec_t, state_reason_prev) - 332usize];
    ["Offset of field: slurmdb_job_rec_t::steps"]
        [::std::mem::offset_of!(slurmdb_job_rec_t, steps) - 336usize];
    ["Offset of field: slurmdb_job_rec_t::std_err"]
        [::std::mem::offset_of!(slurmdb_job_rec_t, std_err) - 344usize];
    ["Offset of field: slurmdb_job_rec_t::std_in"]
        [::std::mem::offset_of!(slurmdb_job_rec_t, std_in) - 352usize];
    ["Offset of field: slurmdb_job_rec_t::std_out"]
        [::std::mem::offset_of!(slurmdb_job_rec_t, std_out) - 360usize];
    ["Offset of field: slurmdb_job_rec_t::submit"]
        [::std::mem::offset_of!(slurmdb_job_rec_t, submit) - 368usize];
    ["Offset of field: slurmdb_job_rec_t::submit_line"]
        [::std::mem::offset_of!(slurmdb_job_rec_t, submit_line) - 376usize];
    ["Offset of field: slurmdb_job_rec_t::suspended"]
        [::std::mem::offset_of!(slurmdb_job_rec_t, suspended) - 384usize];
    ["Offset of field: slurmdb_job_rec_t::system_comment"]
        [::std::mem::offset_of!(slurmdb_job_rec_t, system_comment) - 392usize];
    ["Offset of field: slurmdb_job_rec_t::sys_cpu_sec"]
        [::std::mem::offset_of!(slurmdb_job_rec_t, sys_cpu_sec) - 400usize];
    ["Offset of field: slurmdb_job_rec_t::sys_cpu_usec"]
        [::std::mem::offset_of!(slurmdb_job_rec_t, sys_cpu_usec) - 408usize];
    ["Offset of field: slurmdb_job_rec_t::timelimit"]
        [::std::mem::offset_of!(slurmdb_job_rec_t, timelimit) - 416usize];
    ["Offset of field: slurmdb_job_rec_t::tot_cpu_sec"]
        [::std::mem::offset_of!(slurmdb_job_rec_t, tot_cpu_sec) - 424usize];
    ["Offset of field: slurmdb_job_rec_t::tot_cpu_usec"]
        [::std::mem::offset_of!(slurmdb_job_rec_t, tot_cpu_usec) - 432usize];
    ["Offset of field: slurmdb_job_rec_t::tres_alloc_str"]
        [::std::mem::offset_of!(slurmdb_job_rec_t, tres_alloc_str) - 440usize];
    ["Offset of field: slurmdb_job_rec_t::tres_req_str"]
        [::std::mem::offset_of!(slurmdb_job_rec_t, tres_req_str) - 448usize];
    ["Offset of field: slurmdb_job_rec_t::uid"]
        [::std::mem::offset_of!(slurmdb_job_rec_t, uid) - 456usize];
    ["Offset of field: slurmdb_job_rec_t::used_gres"]
        [::std::mem::offset_of!(slurmdb_job_rec_t, used_gres) - 464usize];
    ["Offset of field: slurmdb_job_rec_t::user"]
        [::std::mem::offset_of!(slurmdb_job_rec_t, user) - 472usize];
    ["Offset of field: slurmdb_job_rec_t::user_cpu_sec"]
        [::std::mem::offset_of!(slurmdb_job_rec_t, user_cpu_sec) - 480usize];
    ["Offset of field: slurmdb_job_rec_t::user_cpu_usec"]
        [::std::mem::offset_of!(slurmdb_job_rec_t, user_cpu_usec) - 488usize];
    ["Offset of field: slurmdb_job_rec_t::wckey"]
        [::std::mem::offset_of!(slurmdb_job_rec_t, wckey) - 496usize];
    ["Offset of field: slurmdb_job_rec_t::wckeyid"]
        [::std::mem::offset_of!(slurmdb_job_rec_t, wckeyid) - 504usize];
    ["Offset of field: slurmdb_job_rec_t::work_dir"]
        [::std::mem::offset_of!(slurmdb_job_rec_t, work_dir) - 512usize];
};
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct slurmdb_qos_usage_t {
    pub accrue_cnt: u32,
    pub acct_limit_list: *mut list_t,
    pub job_list: *mut list_t,
    pub grp_node_bitmap: *mut bitstr_t,
    pub grp_node_job_cnt: *mut u16,
    pub grp_used_jobs: u32,
    pub grp_used_submit_jobs: u32,
    pub grp_used_tres: *mut u64,
    pub grp_used_tres_run_secs: *mut u64,
    pub grp_used_wall: f64,
    pub norm_priority: f64,
    pub tres_cnt: u32,
    pub __bindgen_padding_0: u64,
    pub usage_raw: u128,
    pub usage_tres_raw: *mut u128,
    pub user_limit_list: *mut list_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of slurmdb_qos_usage_t"][::std::mem::size_of::<slurmdb_qos_usage_t>() - 128usize];
    ["Alignment of slurmdb_qos_usage_t"][::std::mem::align_of::<slurmdb_qos_usage_t>() - 16usize];
    ["Offset of field: slurmdb_qos_usage_t::accrue_cnt"]
        [::std::mem::offset_of!(slurmdb_qos_usage_t, accrue_cnt) - 0usize];
    ["Offset of field: slurmdb_qos_usage_t::acct_limit_list"]
        [::std::mem::offset_of!(slurmdb_qos_usage_t, acct_limit_list) - 8usize];
    ["Offset of field: slurmdb_qos_usage_t::job_list"]
        [::std::mem::offset_of!(slurmdb_qos_usage_t, job_list) - 16usize];
    ["Offset of field: slurmdb_qos_usage_t::grp_node_bitmap"]
        [::std::mem::offset_of!(slurmdb_qos_usage_t, grp_node_bitmap) - 24usize];
    ["Offset of field: slurmdb_qos_usage_t::grp_node_job_cnt"]
        [::std::mem::offset_of!(slurmdb_qos_usage_t, grp_node_job_cnt) - 32usize];
    ["Offset of field: slurmdb_qos_usage_t::grp_used_jobs"]
        [::std::mem::offset_of!(slurmdb_qos_usage_t, grp_used_jobs) - 40usize];
    ["Offset of field: slurmdb_qos_usage_t::grp_used_submit_jobs"]
        [::std::mem::offset_of!(slurmdb_qos_usage_t, grp_used_submit_jobs) - 44usize];
    ["Offset of field: slurmdb_qos_usage_t::grp_used_tres"]
        [::std::mem::offset_of!(slurmdb_qos_usage_t, grp_used_tres) - 48usize];
    ["Offset of field: slurmdb_qos_usage_t::grp_used_tres_run_secs"]
        [::std::mem::offset_of!(slurmdb_qos_usage_t, grp_used_tres_run_secs) - 56usize];
    ["Offset of field: slurmdb_qos_usage_t::grp_used_wall"]
        [::std::mem::offset_of!(slurmdb_qos_usage_t, grp_used_wall) - 64usize];
    ["Offset of field: slurmdb_qos_usage_t::norm_priority"]
        [::std::mem::offset_of!(slurmdb_qos_usage_t, norm_priority) - 72usize];
    ["Offset of field: slurmdb_qos_usage_t::tres_cnt"]
        [::std::mem::offset_of!(slurmdb_qos_usage_t, tres_cnt) - 80usize];
    ["Offset of field: slurmdb_qos_usage_t::usage_raw"]
        [::std::mem::offset_of!(slurmdb_qos_usage_t, usage_raw) - 96usize];
    ["Offset of field: slurmdb_qos_usage_t::usage_tres_raw"]
        [::std::mem::offset_of!(slurmdb_qos_usage_t, usage_tres_raw) - 112usize];
    ["Offset of field: slurmdb_qos_usage_t::user_limit_list"]
        [::std::mem::offset_of!(slurmdb_qos_usage_t, user_limit_list) - 120usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct slurmdb_qos_rec_t {
    pub blocked_until: time_t,
    pub description: *mut ::std::os::raw::c_char,
    pub id: u32,
    pub flags: u32,
    pub grace_time: u32,
    pub grp_jobs_accrue: u32,
    pub grp_jobs: u32,
    pub grp_submit_jobs: u32,
    pub grp_tres: *mut ::std::os::raw::c_char,
    pub grp_tres_ctld: *mut u64,
    pub grp_tres_mins: *mut ::std::os::raw::c_char,
    pub grp_tres_mins_ctld: *mut u64,
    pub grp_tres_run_mins: *mut ::std::os::raw::c_char,
    pub grp_tres_run_mins_ctld: *mut u64,
    pub grp_wall: u32,
    pub limit_factor: f64,
    pub max_jobs_pa: u32,
    pub max_jobs_pu: u32,
    pub max_jobs_accrue_pa: u32,
    pub max_jobs_accrue_pu: u32,
    pub max_submit_jobs_pa: u32,
    pub max_submit_jobs_pu: u32,
    pub max_tres_mins_pj: *mut ::std::os::raw::c_char,
    pub max_tres_mins_pj_ctld: *mut u64,
    pub max_tres_pa: *mut ::std::os::raw::c_char,
    pub max_tres_pa_ctld: *mut u64,
    pub max_tres_pj: *mut ::std::os::raw::c_char,
    pub max_tres_pj_ctld: *mut u64,
    pub max_tres_pn: *mut ::std::os::raw::c_char,
    pub max_tres_pn_ctld: *mut u64,
    pub max_tres_pu: *mut ::std::os::raw::c_char,
    pub max_tres_pu_ctld: *mut u64,
    pub max_tres_run_mins_pa: *mut ::std::os::raw::c_char,
    pub max_tres_run_mins_pa_ctld: *mut u64,
    pub max_tres_run_mins_pu: *mut ::std::os::raw::c_char,
    pub max_tres_run_mins_pu_ctld: *mut u64,
    pub max_wall_pj: u32,
    pub min_prio_thresh: u32,
    pub min_tres_pj: *mut ::std::os::raw::c_char,
    pub min_tres_pj_ctld: *mut u64,
    pub name: *mut ::std::os::raw::c_char,
    pub preempt_bitstr: *mut bitstr_t,
    pub preempt_list: *mut list_t,
    pub preempt_mode: u16,
    pub preempt_exempt_time: u32,
    pub priority: u32,
    pub relative_tres_cnt: *mut u64,
    pub usage: *mut slurmdb_qos_usage_t,
    pub usage_factor: f64,
    pub usage_thres: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of slurmdb_qos_rec_t"][::std::mem::size_of::<slurmdb_qos_rec_t>() - 336usize];
    ["Alignment of slurmdb_qos_rec_t"][::std::mem::align_of::<slurmdb_qos_rec_t>() - 8usize];
    ["Offset of field: slurmdb_qos_rec_t::blocked_until"]
        [::std::mem::offset_of!(slurmdb_qos_rec_t, blocked_until) - 0usize];
    ["Offset of field: slurmdb_qos_rec_t::description"]
        [::std::mem::offset_of!(slurmdb_qos_rec_t, description) - 8usize];
    ["Offset of field: slurmdb_qos_rec_t::id"]
        [::std::mem::offset_of!(slurmdb_qos_rec_t, id) - 16usize];
    ["Offset of field: slurmdb_qos_rec_t::flags"]
        [::std::mem::offset_of!(slurmdb_qos_rec_t, flags) - 20usize];
    ["Offset of field: slurmdb_qos_rec_t::grace_time"]
        [::std::mem::offset_of!(slurmdb_qos_rec_t, grace_time) - 24usize];
    ["Offset of field: slurmdb_qos_rec_t::grp_jobs_accrue"]
        [::std::mem::offset_of!(slurmdb_qos_rec_t, grp_jobs_accrue) - 28usize];
    ["Offset of field: slurmdb_qos_rec_t::grp_jobs"]
        [::std::mem::offset_of!(slurmdb_qos_rec_t, grp_jobs) - 32usize];
    ["Offset of field: slurmdb_qos_rec_t::grp_submit_jobs"]
        [::std::mem::offset_of!(slurmdb_qos_rec_t, grp_submit_jobs) - 36usize];
    ["Offset of field: slurmdb_qos_rec_t::grp_tres"]
        [::std::mem::offset_of!(slurmdb_qos_rec_t, grp_tres) - 40usize];
    ["Offset of field: slurmdb_qos_rec_t::grp_tres_ctld"]
        [::std::mem::offset_of!(slurmdb_qos_rec_t, grp_tres_ctld) - 48usize];
    ["Offset of field: slurmdb_qos_rec_t::grp_tres_mins"]
        [::std::mem::offset_of!(slurmdb_qos_rec_t, grp_tres_mins) - 56usize];
    ["Offset of field: slurmdb_qos_rec_t::grp_tres_mins_ctld"]
        [::std::mem::offset_of!(slurmdb_qos_rec_t, grp_tres_mins_ctld) - 64usize];
    ["Offset of field: slurmdb_qos_rec_t::grp_tres_run_mins"]
        [::std::mem::offset_of!(slurmdb_qos_rec_t, grp_tres_run_mins) - 72usize];
    ["Offset of field: slurmdb_qos_rec_t::grp_tres_run_mins_ctld"]
        [::std::mem::offset_of!(slurmdb_qos_rec_t, grp_tres_run_mins_ctld) - 80usize];
    ["Offset of field: slurmdb_qos_rec_t::grp_wall"]
        [::std::mem::offset_of!(slurmdb_qos_rec_t, grp_wall) - 88usize];
    ["Offset of field: slurmdb_qos_rec_t::limit_factor"]
        [::std::mem::offset_of!(slurmdb_qos_rec_t, limit_factor) - 96usize];
    ["Offset of field: slurmdb_qos_rec_t::max_jobs_pa"]
        [::std::mem::offset_of!(slurmdb_qos_rec_t, max_jobs_pa) - 104usize];
    ["Offset of field: slurmdb_qos_rec_t::max_jobs_pu"]
        [::std::mem::offset_of!(slurmdb_qos_rec_t, max_jobs_pu) - 108usize];
    ["Offset of field: slurmdb_qos_rec_t::max_jobs_accrue_pa"]
        [::std::mem::offset_of!(slurmdb_qos_rec_t, max_jobs_accrue_pa) - 112usize];
    ["Offset of field: slurmdb_qos_rec_t::max_jobs_accrue_pu"]
        [::std::mem::offset_of!(slurmdb_qos_rec_t, max_jobs_accrue_pu) - 116usize];
    ["Offset of field: slurmdb_qos_rec_t::max_submit_jobs_pa"]
        [::std::mem::offset_of!(slurmdb_qos_rec_t, max_submit_jobs_pa) - 120usize];
    ["Offset of field: slurmdb_qos_rec_t::max_submit_jobs_pu"]
        [::std::mem::offset_of!(slurmdb_qos_rec_t, max_submit_jobs_pu) - 124usize];
    ["Offset of field: slurmdb_qos_rec_t::max_tres_mins_pj"]
        [::std::mem::offset_of!(slurmdb_qos_rec_t, max_tres_mins_pj) - 128usize];
    ["Offset of field: slurmdb_qos_rec_t::max_tres_mins_pj_ctld"]
        [::std::mem::offset_of!(slurmdb_qos_rec_t, max_tres_mins_pj_ctld) - 136usize];
    ["Offset of field: slurmdb_qos_rec_t::max_tres_pa"]
        [::std::mem::offset_of!(slurmdb_qos_rec_t, max_tres_pa) - 144usize];
    ["Offset of field: slurmdb_qos_rec_t::max_tres_pa_ctld"]
        [::std::mem::offset_of!(slurmdb_qos_rec_t, max_tres_pa_ctld) - 152usize];
    ["Offset of field: slurmdb_qos_rec_t::max_tres_pj"]
        [::std::mem::offset_of!(slurmdb_qos_rec_t, max_tres_pj) - 160usize];
    ["Offset of field: slurmdb_qos_rec_t::max_tres_pj_ctld"]
        [::std::mem::offset_of!(slurmdb_qos_rec_t, max_tres_pj_ctld) - 168usize];
    ["Offset of field: slurmdb_qos_rec_t::max_tres_pn"]
        [::std::mem::offset_of!(slurmdb_qos_rec_t, max_tres_pn) - 176usize];
    ["Offset of field: slurmdb_qos_rec_t::max_tres_pn_ctld"]
        [::std::mem::offset_of!(slurmdb_qos_rec_t, max_tres_pn_ctld) - 184usize];
    ["Offset of field: slurmdb_qos_rec_t::max_tres_pu"]
        [::std::mem::offset_of!(slurmdb_qos_rec_t, max_tres_pu) - 192usize];
    ["Offset of field: slurmdb_qos_rec_t::max_tres_pu_ctld"]
        [::std::mem::offset_of!(slurmdb_qos_rec_t, max_tres_pu_ctld) - 200usize];
    ["Offset of field: slurmdb_qos_rec_t::max_tres_run_mins_pa"]
        [::std::mem::offset_of!(slurmdb_qos_rec_t, max_tres_run_mins_pa) - 208usize];
    ["Offset of field: slurmdb_qos_rec_t::max_tres_run_mins_pa_ctld"]
        [::std::mem::offset_of!(slurmdb_qos_rec_t, max_tres_run_mins_pa_ctld) - 216usize];
    ["Offset of field: slurmdb_qos_rec_t::max_tres_run_mins_pu"]
        [::std::mem::offset_of!(slurmdb_qos_rec_t, max_tres_run_mins_pu) - 224usize];
    ["Offset of field: slurmdb_qos_rec_t::max_tres_run_mins_pu_ctld"]
        [::std::mem::offset_of!(slurmdb_qos_rec_t, max_tres_run_mins_pu_ctld) - 232usize];
    ["Offset of field: slurmdb_qos_rec_t::max_wall_pj"]
        [::std::mem::offset_of!(slurmdb_qos_rec_t, max_wall_pj) - 240usize];
    ["Offset of field: slurmdb_qos_rec_t::min_prio_thresh"]
        [::std::mem::offset_of!(slurmdb_qos_rec_t, min_prio_thresh) - 244usize];
    ["Offset of field: slurmdb_qos_rec_t::min_tres_pj"]
        [::std::mem::offset_of!(slurmdb_qos_rec_t, min_tres_pj) - 248usize];
    ["Offset of field: slurmdb_qos_rec_t::min_tres_pj_ctld"]
        [::std::mem::offset_of!(slurmdb_qos_rec_t, min_tres_pj_ctld) - 256usize];
    ["Offset of field: slurmdb_qos_rec_t::name"]
        [::std::mem::offset_of!(slurmdb_qos_rec_t, name) - 264usize];
    ["Offset of field: slurmdb_qos_rec_t::preempt_bitstr"]
        [::std::mem::offset_of!(slurmdb_qos_rec_t, preempt_bitstr) - 272usize];
    ["Offset of field: slurmdb_qos_rec_t::preempt_list"]
        [::std::mem::offset_of!(slurmdb_qos_rec_t, preempt_list) - 280usize];
    ["Offset of field: slurmdb_qos_rec_t::preempt_mode"]
        [::std::mem::offset_of!(slurmdb_qos_rec_t, preempt_mode) - 288usize];
    ["Offset of field: slurmdb_qos_rec_t::preempt_exempt_time"]
        [::std::mem::offset_of!(slurmdb_qos_rec_t, preempt_exempt_time) - 292usize];
    ["Offset of field: slurmdb_qos_rec_t::priority"]
        [::std::mem::offset_of!(slurmdb_qos_rec_t, priority) - 296usize];
    ["Offset of field: slurmdb_qos_rec_t::relative_tres_cnt"]
        [::std::mem::offset_of!(slurmdb_qos_rec_t, relative_tres_cnt) - 304usize];
    ["Offset of field: slurmdb_qos_rec_t::usage"]
        [::std::mem::offset_of!(slurmdb_qos_rec_t, usage) - 312usize];
    ["Offset of field: slurmdb_qos_rec_t::usage_factor"]
        [::std::mem::offset_of!(slurmdb_qos_rec_t, usage_factor) - 320usize];
    ["Offset of field: slurmdb_qos_rec_t::usage_thres"]
        [::std::mem::offset_of!(slurmdb_qos_rec_t, usage_thres) - 328usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct slurmdb_qos_cond_t {
    pub description_list: *mut list_t,
    pub flags: u16,
    pub id_list: *mut list_t,
    pub format_list: *mut list_t,
    pub name_list: *mut list_t,
    pub preempt_mode: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of slurmdb_qos_cond_t"][::std::mem::size_of::<slurmdb_qos_cond_t>() - 48usize];
    ["Alignment of slurmdb_qos_cond_t"][::std::mem::align_of::<slurmdb_qos_cond_t>() - 8usize];
    ["Offset of field: slurmdb_qos_cond_t::description_list"]
        [::std::mem::offset_of!(slurmdb_qos_cond_t, description_list) - 0usize];
    ["Offset of field: slurmdb_qos_cond_t::flags"]
        [::std::mem::offset_of!(slurmdb_qos_cond_t, flags) - 8usize];
    ["Offset of field: slurmdb_qos_cond_t::id_list"]
        [::std::mem::offset_of!(slurmdb_qos_cond_t, id_list) - 16usize];
    ["Offset of field: slurmdb_qos_cond_t::format_list"]
        [::std::mem::offset_of!(slurmdb_qos_cond_t, format_list) - 24usize];
    ["Offset of field: slurmdb_qos_cond_t::name_list"]
        [::std::mem::offset_of!(slurmdb_qos_cond_t, name_list) - 32usize];
    ["Offset of field: slurmdb_qos_cond_t::preempt_mode"]
        [::std::mem::offset_of!(slurmdb_qos_cond_t, preempt_mode) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct slurmdb_reservation_cond_t {
    pub cluster_list: *mut list_t,
    pub flags: u64,
    pub format_list: *mut list_t,
    pub id_list: *mut list_t,
    pub name_list: *mut list_t,
    pub nodes: *mut ::std::os::raw::c_char,
    pub time_end: time_t,
    pub time_start: time_t,
    pub with_usage: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of slurmdb_reservation_cond_t"]
        [::std::mem::size_of::<slurmdb_reservation_cond_t>() - 72usize];
    ["Alignment of slurmdb_reservation_cond_t"]
        [::std::mem::align_of::<slurmdb_reservation_cond_t>() - 8usize];
    ["Offset of field: slurmdb_reservation_cond_t::cluster_list"]
        [::std::mem::offset_of!(slurmdb_reservation_cond_t, cluster_list) - 0usize];
    ["Offset of field: slurmdb_reservation_cond_t::flags"]
        [::std::mem::offset_of!(slurmdb_reservation_cond_t, flags) - 8usize];
    ["Offset of field: slurmdb_reservation_cond_t::format_list"]
        [::std::mem::offset_of!(slurmdb_reservation_cond_t, format_list) - 16usize];
    ["Offset of field: slurmdb_reservation_cond_t::id_list"]
        [::std::mem::offset_of!(slurmdb_reservation_cond_t, id_list) - 24usize];
    ["Offset of field: slurmdb_reservation_cond_t::name_list"]
        [::std::mem::offset_of!(slurmdb_reservation_cond_t, name_list) - 32usize];
    ["Offset of field: slurmdb_reservation_cond_t::nodes"]
        [::std::mem::offset_of!(slurmdb_reservation_cond_t, nodes) - 40usize];
    ["Offset of field: slurmdb_reservation_cond_t::time_end"]
        [::std::mem::offset_of!(slurmdb_reservation_cond_t, time_end) - 48usize];
    ["Offset of field: slurmdb_reservation_cond_t::time_start"]
        [::std::mem::offset_of!(slurmdb_reservation_cond_t, time_start) - 56usize];
    ["Offset of field: slurmdb_reservation_cond_t::with_usage"]
        [::std::mem::offset_of!(slurmdb_reservation_cond_t, with_usage) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct slurmdb_reservation_rec_t {
    pub assocs: *mut ::std::os::raw::c_char,
    pub cluster: *mut ::std::os::raw::c_char,
    pub comment: *mut ::std::os::raw::c_char,
    pub flags: u64,
    pub id: u32,
    pub name: *mut ::std::os::raw::c_char,
    pub nodes: *mut ::std::os::raw::c_char,
    pub node_inx: *mut ::std::os::raw::c_char,
    pub time_end: time_t,
    pub time_start: time_t,
    pub time_start_prev: time_t,
    pub tres_str: *mut ::std::os::raw::c_char,
    pub unused_wall: f64,
    pub tres_list: *mut list_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of slurmdb_reservation_rec_t"]
        [::std::mem::size_of::<slurmdb_reservation_rec_t>() - 112usize];
    ["Alignment of slurmdb_reservation_rec_t"]
        [::std::mem::align_of::<slurmdb_reservation_rec_t>() - 8usize];
    ["Offset of field: slurmdb_reservation_rec_t::assocs"]
        [::std::mem::offset_of!(slurmdb_reservation_rec_t, assocs) - 0usize];
    ["Offset of field: slurmdb_reservation_rec_t::cluster"]
        [::std::mem::offset_of!(slurmdb_reservation_rec_t, cluster) - 8usize];
    ["Offset of field: slurmdb_reservation_rec_t::comment"]
        [::std::mem::offset_of!(slurmdb_reservation_rec_t, comment) - 16usize];
    ["Offset of field: slurmdb_reservation_rec_t::flags"]
        [::std::mem::offset_of!(slurmdb_reservation_rec_t, flags) - 24usize];
    ["Offset of field: slurmdb_reservation_rec_t::id"]
        [::std::mem::offset_of!(slurmdb_reservation_rec_t, id) - 32usize];
    ["Offset of field: slurmdb_reservation_rec_t::name"]
        [::std::mem::offset_of!(slurmdb_reservation_rec_t, name) - 40usize];
    ["Offset of field: slurmdb_reservation_rec_t::nodes"]
        [::std::mem::offset_of!(slurmdb_reservation_rec_t, nodes) - 48usize];
    ["Offset of field: slurmdb_reservation_rec_t::node_inx"]
        [::std::mem::offset_of!(slurmdb_reservation_rec_t, node_inx) - 56usize];
    ["Offset of field: slurmdb_reservation_rec_t::time_end"]
        [::std::mem::offset_of!(slurmdb_reservation_rec_t, time_end) - 64usize];
    ["Offset of field: slurmdb_reservation_rec_t::time_start"]
        [::std::mem::offset_of!(slurmdb_reservation_rec_t, time_start) - 72usize];
    ["Offset of field: slurmdb_reservation_rec_t::time_start_prev"]
        [::std::mem::offset_of!(slurmdb_reservation_rec_t, time_start_prev) - 80usize];
    ["Offset of field: slurmdb_reservation_rec_t::tres_str"]
        [::std::mem::offset_of!(slurmdb_reservation_rec_t, tres_str) - 88usize];
    ["Offset of field: slurmdb_reservation_rec_t::unused_wall"]
        [::std::mem::offset_of!(slurmdb_reservation_rec_t, unused_wall) - 96usize];
    ["Offset of field: slurmdb_reservation_rec_t::tres_list"]
        [::std::mem::offset_of!(slurmdb_reservation_rec_t, tres_list) - 104usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct slurmdb_step_rec_t {
    pub container: *mut ::std::os::raw::c_char,
    pub elapsed: u32,
    pub end: time_t,
    pub exitcode: i32,
    pub job_ptr: *mut slurmdb_job_rec_t,
    pub nnodes: u32,
    pub nodes: *mut ::std::os::raw::c_char,
    pub ntasks: u32,
    pub pid_str: *mut ::std::os::raw::c_char,
    pub req_cpufreq_min: u32,
    pub req_cpufreq_max: u32,
    pub req_cpufreq_gov: u32,
    pub requid: u32,
    pub start: time_t,
    pub state: u32,
    pub stats: slurmdb_stats_t,
    pub step_id: slurm_step_id_t,
    pub stepname: *mut ::std::os::raw::c_char,
    pub submit_line: *mut ::std::os::raw::c_char,
    pub suspended: u32,
    pub sys_cpu_sec: u64,
    pub sys_cpu_usec: u32,
    pub task_dist: u32,
    pub tot_cpu_sec: u64,
    pub tot_cpu_usec: u32,
    pub tres_alloc_str: *mut ::std::os::raw::c_char,
    pub user_cpu_sec: u64,
    pub user_cpu_usec: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of slurmdb_step_rec_t"][::std::mem::size_of::<slurmdb_step_rec_t>() - 352usize];
    ["Alignment of slurmdb_step_rec_t"][::std::mem::align_of::<slurmdb_step_rec_t>() - 8usize];
    ["Offset of field: slurmdb_step_rec_t::container"]
        [::std::mem::offset_of!(slurmdb_step_rec_t, container) - 0usize];
    ["Offset of field: slurmdb_step_rec_t::elapsed"]
        [::std::mem::offset_of!(slurmdb_step_rec_t, elapsed) - 8usize];
    ["Offset of field: slurmdb_step_rec_t::end"]
        [::std::mem::offset_of!(slurmdb_step_rec_t, end) - 16usize];
    ["Offset of field: slurmdb_step_rec_t::exitcode"]
        [::std::mem::offset_of!(slurmdb_step_rec_t, exitcode) - 24usize];
    ["Offset of field: slurmdb_step_rec_t::job_ptr"]
        [::std::mem::offset_of!(slurmdb_step_rec_t, job_ptr) - 32usize];
    ["Offset of field: slurmdb_step_rec_t::nnodes"]
        [::std::mem::offset_of!(slurmdb_step_rec_t, nnodes) - 40usize];
    ["Offset of field: slurmdb_step_rec_t::nodes"]
        [::std::mem::offset_of!(slurmdb_step_rec_t, nodes) - 48usize];
    ["Offset of field: slurmdb_step_rec_t::ntasks"]
        [::std::mem::offset_of!(slurmdb_step_rec_t, ntasks) - 56usize];
    ["Offset of field: slurmdb_step_rec_t::pid_str"]
        [::std::mem::offset_of!(slurmdb_step_rec_t, pid_str) - 64usize];
    ["Offset of field: slurmdb_step_rec_t::req_cpufreq_min"]
        [::std::mem::offset_of!(slurmdb_step_rec_t, req_cpufreq_min) - 72usize];
    ["Offset of field: slurmdb_step_rec_t::req_cpufreq_max"]
        [::std::mem::offset_of!(slurmdb_step_rec_t, req_cpufreq_max) - 76usize];
    ["Offset of field: slurmdb_step_rec_t::req_cpufreq_gov"]
        [::std::mem::offset_of!(slurmdb_step_rec_t, req_cpufreq_gov) - 80usize];
    ["Offset of field: slurmdb_step_rec_t::requid"]
        [::std::mem::offset_of!(slurmdb_step_rec_t, requid) - 84usize];
    ["Offset of field: slurmdb_step_rec_t::start"]
        [::std::mem::offset_of!(slurmdb_step_rec_t, start) - 88usize];
    ["Offset of field: slurmdb_step_rec_t::state"]
        [::std::mem::offset_of!(slurmdb_step_rec_t, state) - 96usize];
    ["Offset of field: slurmdb_step_rec_t::stats"]
        [::std::mem::offset_of!(slurmdb_step_rec_t, stats) - 104usize];
    ["Offset of field: slurmdb_step_rec_t::step_id"]
        [::std::mem::offset_of!(slurmdb_step_rec_t, step_id) - 248usize];
    ["Offset of field: slurmdb_step_rec_t::stepname"]
        [::std::mem::offset_of!(slurmdb_step_rec_t, stepname) - 272usize];
    ["Offset of field: slurmdb_step_rec_t::submit_line"]
        [::std::mem::offset_of!(slurmdb_step_rec_t, submit_line) - 280usize];
    ["Offset of field: slurmdb_step_rec_t::suspended"]
        [::std::mem::offset_of!(slurmdb_step_rec_t, suspended) - 288usize];
    ["Offset of field: slurmdb_step_rec_t::sys_cpu_sec"]
        [::std::mem::offset_of!(slurmdb_step_rec_t, sys_cpu_sec) - 296usize];
    ["Offset of field: slurmdb_step_rec_t::sys_cpu_usec"]
        [::std::mem::offset_of!(slurmdb_step_rec_t, sys_cpu_usec) - 304usize];
    ["Offset of field: slurmdb_step_rec_t::task_dist"]
        [::std::mem::offset_of!(slurmdb_step_rec_t, task_dist) - 308usize];
    ["Offset of field: slurmdb_step_rec_t::tot_cpu_sec"]
        [::std::mem::offset_of!(slurmdb_step_rec_t, tot_cpu_sec) - 312usize];
    ["Offset of field: slurmdb_step_rec_t::tot_cpu_usec"]
        [::std::mem::offset_of!(slurmdb_step_rec_t, tot_cpu_usec) - 320usize];
    ["Offset of field: slurmdb_step_rec_t::tres_alloc_str"]
        [::std::mem::offset_of!(slurmdb_step_rec_t, tres_alloc_str) - 328usize];
    ["Offset of field: slurmdb_step_rec_t::user_cpu_sec"]
        [::std::mem::offset_of!(slurmdb_step_rec_t, user_cpu_sec) - 336usize];
    ["Offset of field: slurmdb_step_rec_t::user_cpu_usec"]
        [::std::mem::offset_of!(slurmdb_step_rec_t, user_cpu_usec) - 344usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct slurmdb_res_cond_t {
    pub allowed_list: *mut list_t,
    pub cluster_list: *mut list_t,
    pub description_list: *mut list_t,
    pub flags: u32,
    pub format_list: *mut list_t,
    pub id_list: *mut list_t,
    pub manager_list: *mut list_t,
    pub name_list: *mut list_t,
    pub server_list: *mut list_t,
    pub type_list: *mut list_t,
    pub with_deleted: u16,
    pub with_clusters: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of slurmdb_res_cond_t"][::std::mem::size_of::<slurmdb_res_cond_t>() - 88usize];
    ["Alignment of slurmdb_res_cond_t"][::std::mem::align_of::<slurmdb_res_cond_t>() - 8usize];
    ["Offset of field: slurmdb_res_cond_t::allowed_list"]
        [::std::mem::offset_of!(slurmdb_res_cond_t, allowed_list) - 0usize];
    ["Offset of field: slurmdb_res_cond_t::cluster_list"]
        [::std::mem::offset_of!(slurmdb_res_cond_t, cluster_list) - 8usize];
    ["Offset of field: slurmdb_res_cond_t::description_list"]
        [::std::mem::offset_of!(slurmdb_res_cond_t, description_list) - 16usize];
    ["Offset of field: slurmdb_res_cond_t::flags"]
        [::std::mem::offset_of!(slurmdb_res_cond_t, flags) - 24usize];
    ["Offset of field: slurmdb_res_cond_t::format_list"]
        [::std::mem::offset_of!(slurmdb_res_cond_t, format_list) - 32usize];
    ["Offset of field: slurmdb_res_cond_t::id_list"]
        [::std::mem::offset_of!(slurmdb_res_cond_t, id_list) - 40usize];
    ["Offset of field: slurmdb_res_cond_t::manager_list"]
        [::std::mem::offset_of!(slurmdb_res_cond_t, manager_list) - 48usize];
    ["Offset of field: slurmdb_res_cond_t::name_list"]
        [::std::mem::offset_of!(slurmdb_res_cond_t, name_list) - 56usize];
    ["Offset of field: slurmdb_res_cond_t::server_list"]
        [::std::mem::offset_of!(slurmdb_res_cond_t, server_list) - 64usize];
    ["Offset of field: slurmdb_res_cond_t::type_list"]
        [::std::mem::offset_of!(slurmdb_res_cond_t, type_list) - 72usize];
    ["Offset of field: slurmdb_res_cond_t::with_deleted"]
        [::std::mem::offset_of!(slurmdb_res_cond_t, with_deleted) - 80usize];
    ["Offset of field: slurmdb_res_cond_t::with_clusters"]
        [::std::mem::offset_of!(slurmdb_res_cond_t, with_clusters) - 82usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct slurmdb_res_rec_t {
    pub allocated: u32,
    pub last_consumed: u32,
    pub clus_res_list: *mut list_t,
    pub clus_res_rec: *mut slurmdb_clus_res_rec_t,
    pub count: u32,
    pub description: *mut ::std::os::raw::c_char,
    pub flags: u32,
    pub id: u32,
    pub last_update: time_t,
    pub manager: *mut ::std::os::raw::c_char,
    pub name: *mut ::std::os::raw::c_char,
    pub server: *mut ::std::os::raw::c_char,
    pub type_: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of slurmdb_res_rec_t"][::std::mem::size_of::<slurmdb_res_rec_t>() - 88usize];
    ["Alignment of slurmdb_res_rec_t"][::std::mem::align_of::<slurmdb_res_rec_t>() - 8usize];
    ["Offset of field: slurmdb_res_rec_t::allocated"]
        [::std::mem::offset_of!(slurmdb_res_rec_t, allocated) - 0usize];
    ["Offset of field: slurmdb_res_rec_t::last_consumed"]
        [::std::mem::offset_of!(slurmdb_res_rec_t, last_consumed) - 4usize];
    ["Offset of field: slurmdb_res_rec_t::clus_res_list"]
        [::std::mem::offset_of!(slurmdb_res_rec_t, clus_res_list) - 8usize];
    ["Offset of field: slurmdb_res_rec_t::clus_res_rec"]
        [::std::mem::offset_of!(slurmdb_res_rec_t, clus_res_rec) - 16usize];
    ["Offset of field: slurmdb_res_rec_t::count"]
        [::std::mem::offset_of!(slurmdb_res_rec_t, count) - 24usize];
    ["Offset of field: slurmdb_res_rec_t::description"]
        [::std::mem::offset_of!(slurmdb_res_rec_t, description) - 32usize];
    ["Offset of field: slurmdb_res_rec_t::flags"]
        [::std::mem::offset_of!(slurmdb_res_rec_t, flags) - 40usize];
    ["Offset of field: slurmdb_res_rec_t::id"]
        [::std::mem::offset_of!(slurmdb_res_rec_t, id) - 44usize];
    ["Offset of field: slurmdb_res_rec_t::last_update"]
        [::std::mem::offset_of!(slurmdb_res_rec_t, last_update) - 48usize];
    ["Offset of field: slurmdb_res_rec_t::manager"]
        [::std::mem::offset_of!(slurmdb_res_rec_t, manager) - 56usize];
    ["Offset of field: slurmdb_res_rec_t::name"]
        [::std::mem::offset_of!(slurmdb_res_rec_t, name) - 64usize];
    ["Offset of field: slurmdb_res_rec_t::server"]
        [::std::mem::offset_of!(slurmdb_res_rec_t, server) - 72usize];
    ["Offset of field: slurmdb_res_rec_t::type_"]
        [::std::mem::offset_of!(slurmdb_res_rec_t, type_) - 80usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct slurmdb_txn_cond_t {
    pub acct_list: *mut list_t,
    pub action_list: *mut list_t,
    pub actor_list: *mut list_t,
    pub cluster_list: *mut list_t,
    pub format_list: *mut list_t,
    pub id_list: *mut list_t,
    pub info_list: *mut list_t,
    pub name_list: *mut list_t,
    pub time_end: time_t,
    pub time_start: time_t,
    pub user_list: *mut list_t,
    pub with_assoc_info: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of slurmdb_txn_cond_t"][::std::mem::size_of::<slurmdb_txn_cond_t>() - 96usize];
    ["Alignment of slurmdb_txn_cond_t"][::std::mem::align_of::<slurmdb_txn_cond_t>() - 8usize];
    ["Offset of field: slurmdb_txn_cond_t::acct_list"]
        [::std::mem::offset_of!(slurmdb_txn_cond_t, acct_list) - 0usize];
    ["Offset of field: slurmdb_txn_cond_t::action_list"]
        [::std::mem::offset_of!(slurmdb_txn_cond_t, action_list) - 8usize];
    ["Offset of field: slurmdb_txn_cond_t::actor_list"]
        [::std::mem::offset_of!(slurmdb_txn_cond_t, actor_list) - 16usize];
    ["Offset of field: slurmdb_txn_cond_t::cluster_list"]
        [::std::mem::offset_of!(slurmdb_txn_cond_t, cluster_list) - 24usize];
    ["Offset of field: slurmdb_txn_cond_t::format_list"]
        [::std::mem::offset_of!(slurmdb_txn_cond_t, format_list) - 32usize];
    ["Offset of field: slurmdb_txn_cond_t::id_list"]
        [::std::mem::offset_of!(slurmdb_txn_cond_t, id_list) - 40usize];
    ["Offset of field: slurmdb_txn_cond_t::info_list"]
        [::std::mem::offset_of!(slurmdb_txn_cond_t, info_list) - 48usize];
    ["Offset of field: slurmdb_txn_cond_t::name_list"]
        [::std::mem::offset_of!(slurmdb_txn_cond_t, name_list) - 56usize];
    ["Offset of field: slurmdb_txn_cond_t::time_end"]
        [::std::mem::offset_of!(slurmdb_txn_cond_t, time_end) - 64usize];
    ["Offset of field: slurmdb_txn_cond_t::time_start"]
        [::std::mem::offset_of!(slurmdb_txn_cond_t, time_start) - 72usize];
    ["Offset of field: slurmdb_txn_cond_t::user_list"]
        [::std::mem::offset_of!(slurmdb_txn_cond_t, user_list) - 80usize];
    ["Offset of field: slurmdb_txn_cond_t::with_assoc_info"]
        [::std::mem::offset_of!(slurmdb_txn_cond_t, with_assoc_info) - 88usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct slurmdb_txn_rec_t {
    pub accts: *mut ::std::os::raw::c_char,
    pub action: u16,
    pub actor_name: *mut ::std::os::raw::c_char,
    pub clusters: *mut ::std::os::raw::c_char,
    pub id: u32,
    pub set_info: *mut ::std::os::raw::c_char,
    pub timestamp: time_t,
    pub users: *mut ::std::os::raw::c_char,
    pub where_query: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of slurmdb_txn_rec_t"][::std::mem::size_of::<slurmdb_txn_rec_t>() - 72usize];
    ["Alignment of slurmdb_txn_rec_t"][::std::mem::align_of::<slurmdb_txn_rec_t>() - 8usize];
    ["Offset of field: slurmdb_txn_rec_t::accts"]
        [::std::mem::offset_of!(slurmdb_txn_rec_t, accts) - 0usize];
    ["Offset of field: slurmdb_txn_rec_t::action"]
        [::std::mem::offset_of!(slurmdb_txn_rec_t, action) - 8usize];
    ["Offset of field: slurmdb_txn_rec_t::actor_name"]
        [::std::mem::offset_of!(slurmdb_txn_rec_t, actor_name) - 16usize];
    ["Offset of field: slurmdb_txn_rec_t::clusters"]
        [::std::mem::offset_of!(slurmdb_txn_rec_t, clusters) - 24usize];
    ["Offset of field: slurmdb_txn_rec_t::id"]
        [::std::mem::offset_of!(slurmdb_txn_rec_t, id) - 32usize];
    ["Offset of field: slurmdb_txn_rec_t::set_info"]
        [::std::mem::offset_of!(slurmdb_txn_rec_t, set_info) - 40usize];
    ["Offset of field: slurmdb_txn_rec_t::timestamp"]
        [::std::mem::offset_of!(slurmdb_txn_rec_t, timestamp) - 48usize];
    ["Offset of field: slurmdb_txn_rec_t::users"]
        [::std::mem::offset_of!(slurmdb_txn_rec_t, users) - 56usize];
    ["Offset of field: slurmdb_txn_rec_t::where_query"]
        [::std::mem::offset_of!(slurmdb_txn_rec_t, where_query) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct slurmdb_used_limits_t {
    pub accrue_cnt: u32,
    pub acct: *mut ::std::os::raw::c_char,
    pub jobs: u32,
    pub submit_jobs: u32,
    pub tres: *mut u64,
    pub tres_run_secs: *mut u64,
    pub node_bitmap: *mut bitstr_t,
    pub node_job_cnt: *mut u16,
    pub uid: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of slurmdb_used_limits_t"][::std::mem::size_of::<slurmdb_used_limits_t>() - 64usize];
    ["Alignment of slurmdb_used_limits_t"]
        [::std::mem::align_of::<slurmdb_used_limits_t>() - 8usize];
    ["Offset of field: slurmdb_used_limits_t::accrue_cnt"]
        [::std::mem::offset_of!(slurmdb_used_limits_t, accrue_cnt) - 0usize];
    ["Offset of field: slurmdb_used_limits_t::acct"]
        [::std::mem::offset_of!(slurmdb_used_limits_t, acct) - 8usize];
    ["Offset of field: slurmdb_used_limits_t::jobs"]
        [::std::mem::offset_of!(slurmdb_used_limits_t, jobs) - 16usize];
    ["Offset of field: slurmdb_used_limits_t::submit_jobs"]
        [::std::mem::offset_of!(slurmdb_used_limits_t, submit_jobs) - 20usize];
    ["Offset of field: slurmdb_used_limits_t::tres"]
        [::std::mem::offset_of!(slurmdb_used_limits_t, tres) - 24usize];
    ["Offset of field: slurmdb_used_limits_t::tres_run_secs"]
        [::std::mem::offset_of!(slurmdb_used_limits_t, tres_run_secs) - 32usize];
    ["Offset of field: slurmdb_used_limits_t::node_bitmap"]
        [::std::mem::offset_of!(slurmdb_used_limits_t, node_bitmap) - 40usize];
    ["Offset of field: slurmdb_used_limits_t::node_job_cnt"]
        [::std::mem::offset_of!(slurmdb_used_limits_t, node_job_cnt) - 48usize];
    ["Offset of field: slurmdb_used_limits_t::uid"]
        [::std::mem::offset_of!(slurmdb_used_limits_t, uid) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct slurmdb_user_cond_t {
    pub admin_level: u16,
    pub assoc_cond: *mut slurmdb_assoc_cond_t,
    pub def_acct_list: *mut list_t,
    pub def_wckey_list: *mut list_t,
    pub with_assocs: u16,
    pub with_coords: u16,
    pub with_deleted: u16,
    pub with_wckeys: u16,
    pub without_defaults: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of slurmdb_user_cond_t"][::std::mem::size_of::<slurmdb_user_cond_t>() - 48usize];
    ["Alignment of slurmdb_user_cond_t"][::std::mem::align_of::<slurmdb_user_cond_t>() - 8usize];
    ["Offset of field: slurmdb_user_cond_t::admin_level"]
        [::std::mem::offset_of!(slurmdb_user_cond_t, admin_level) - 0usize];
    ["Offset of field: slurmdb_user_cond_t::assoc_cond"]
        [::std::mem::offset_of!(slurmdb_user_cond_t, assoc_cond) - 8usize];
    ["Offset of field: slurmdb_user_cond_t::def_acct_list"]
        [::std::mem::offset_of!(slurmdb_user_cond_t, def_acct_list) - 16usize];
    ["Offset of field: slurmdb_user_cond_t::def_wckey_list"]
        [::std::mem::offset_of!(slurmdb_user_cond_t, def_wckey_list) - 24usize];
    ["Offset of field: slurmdb_user_cond_t::with_assocs"]
        [::std::mem::offset_of!(slurmdb_user_cond_t, with_assocs) - 32usize];
    ["Offset of field: slurmdb_user_cond_t::with_coords"]
        [::std::mem::offset_of!(slurmdb_user_cond_t, with_coords) - 34usize];
    ["Offset of field: slurmdb_user_cond_t::with_deleted"]
        [::std::mem::offset_of!(slurmdb_user_cond_t, with_deleted) - 36usize];
    ["Offset of field: slurmdb_user_cond_t::with_wckeys"]
        [::std::mem::offset_of!(slurmdb_user_cond_t, with_wckeys) - 38usize];
    ["Offset of field: slurmdb_user_cond_t::without_defaults"]
        [::std::mem::offset_of!(slurmdb_user_cond_t, without_defaults) - 40usize];
};
pub const SLURMDB_USER_FLAG_NONE: _bindgen_ty_10 = 0;
pub const SLURMDB_USER_FLAG_DELETED: _bindgen_ty_10 = 1;
pub type _bindgen_ty_10 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct slurmdb_user_rec {
    pub admin_level: u16,
    pub assoc_list: *mut list_t,
    pub bf_usage: *mut slurmdb_bf_usage_t,
    pub coord_accts: *mut list_t,
    pub default_acct: *mut ::std::os::raw::c_char,
    pub default_wckey: *mut ::std::os::raw::c_char,
    pub flags: u32,
    pub name: *mut ::std::os::raw::c_char,
    pub old_name: *mut ::std::os::raw::c_char,
    pub uid: u32,
    pub wckey_list: *mut list_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of slurmdb_user_rec"][::std::mem::size_of::<slurmdb_user_rec>() - 88usize];
    ["Alignment of slurmdb_user_rec"][::std::mem::align_of::<slurmdb_user_rec>() - 8usize];
    ["Offset of field: slurmdb_user_rec::admin_level"]
        [::std::mem::offset_of!(slurmdb_user_rec, admin_level) - 0usize];
    ["Offset of field: slurmdb_user_rec::assoc_list"]
        [::std::mem::offset_of!(slurmdb_user_rec, assoc_list) - 8usize];
    ["Offset of field: slurmdb_user_rec::bf_usage"]
        [::std::mem::offset_of!(slurmdb_user_rec, bf_usage) - 16usize];
    ["Offset of field: slurmdb_user_rec::coord_accts"]
        [::std::mem::offset_of!(slurmdb_user_rec, coord_accts) - 24usize];
    ["Offset of field: slurmdb_user_rec::default_acct"]
        [::std::mem::offset_of!(slurmdb_user_rec, default_acct) - 32usize];
    ["Offset of field: slurmdb_user_rec::default_wckey"]
        [::std::mem::offset_of!(slurmdb_user_rec, default_wckey) - 40usize];
    ["Offset of field: slurmdb_user_rec::flags"]
        [::std::mem::offset_of!(slurmdb_user_rec, flags) - 48usize];
    ["Offset of field: slurmdb_user_rec::name"]
        [::std::mem::offset_of!(slurmdb_user_rec, name) - 56usize];
    ["Offset of field: slurmdb_user_rec::old_name"]
        [::std::mem::offset_of!(slurmdb_user_rec, old_name) - 64usize];
    ["Offset of field: slurmdb_user_rec::uid"]
        [::std::mem::offset_of!(slurmdb_user_rec, uid) - 72usize];
    ["Offset of field: slurmdb_user_rec::wckey_list"]
        [::std::mem::offset_of!(slurmdb_user_rec, wckey_list) - 80usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct slurmdb_update_object_t {
    pub objects: *mut list_t,
    pub type_: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of slurmdb_update_object_t"][::std::mem::size_of::<slurmdb_update_object_t>() - 16usize];
    ["Alignment of slurmdb_update_object_t"]
        [::std::mem::align_of::<slurmdb_update_object_t>() - 8usize];
    ["Offset of field: slurmdb_update_object_t::objects"]
        [::std::mem::offset_of!(slurmdb_update_object_t, objects) - 0usize];
    ["Offset of field: slurmdb_update_object_t::type_"]
        [::std::mem::offset_of!(slurmdb_update_object_t, type_) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct slurmdb_wckey_cond_t {
    pub cluster_list: *mut list_t,
    pub format_list: *mut list_t,
    pub id_list: *mut list_t,
    pub name_list: *mut list_t,
    pub only_defs: u16,
    pub usage_end: time_t,
    pub usage_start: time_t,
    pub user_list: *mut list_t,
    pub with_usage: u16,
    pub with_deleted: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of slurmdb_wckey_cond_t"][::std::mem::size_of::<slurmdb_wckey_cond_t>() - 72usize];
    ["Alignment of slurmdb_wckey_cond_t"][::std::mem::align_of::<slurmdb_wckey_cond_t>() - 8usize];
    ["Offset of field: slurmdb_wckey_cond_t::cluster_list"]
        [::std::mem::offset_of!(slurmdb_wckey_cond_t, cluster_list) - 0usize];
    ["Offset of field: slurmdb_wckey_cond_t::format_list"]
        [::std::mem::offset_of!(slurmdb_wckey_cond_t, format_list) - 8usize];
    ["Offset of field: slurmdb_wckey_cond_t::id_list"]
        [::std::mem::offset_of!(slurmdb_wckey_cond_t, id_list) - 16usize];
    ["Offset of field: slurmdb_wckey_cond_t::name_list"]
        [::std::mem::offset_of!(slurmdb_wckey_cond_t, name_list) - 24usize];
    ["Offset of field: slurmdb_wckey_cond_t::only_defs"]
        [::std::mem::offset_of!(slurmdb_wckey_cond_t, only_defs) - 32usize];
    ["Offset of field: slurmdb_wckey_cond_t::usage_end"]
        [::std::mem::offset_of!(slurmdb_wckey_cond_t, usage_end) - 40usize];
    ["Offset of field: slurmdb_wckey_cond_t::usage_start"]
        [::std::mem::offset_of!(slurmdb_wckey_cond_t, usage_start) - 48usize];
    ["Offset of field: slurmdb_wckey_cond_t::user_list"]
        [::std::mem::offset_of!(slurmdb_wckey_cond_t, user_list) - 56usize];
    ["Offset of field: slurmdb_wckey_cond_t::with_usage"]
        [::std::mem::offset_of!(slurmdb_wckey_cond_t, with_usage) - 64usize];
    ["Offset of field: slurmdb_wckey_cond_t::with_deleted"]
        [::std::mem::offset_of!(slurmdb_wckey_cond_t, with_deleted) - 66usize];
};
pub const SLURMDB_WCKEY_FLAG_NONE: _bindgen_ty_11 = 0;
pub const SLURMDB_WCKEY_FLAG_DELETED: _bindgen_ty_11 = 1;
pub type _bindgen_ty_11 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct slurmdb_wckey_rec_t {
    pub accounting_list: *mut list_t,
    pub cluster: *mut ::std::os::raw::c_char,
    pub flags: u32,
    pub id: u32,
    pub is_def: u16,
    pub name: *mut ::std::os::raw::c_char,
    pub uid: u32,
    pub user: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of slurmdb_wckey_rec_t"][::std::mem::size_of::<slurmdb_wckey_rec_t>() - 56usize];
    ["Alignment of slurmdb_wckey_rec_t"][::std::mem::align_of::<slurmdb_wckey_rec_t>() - 8usize];
    ["Offset of field: slurmdb_wckey_rec_t::accounting_list"]
        [::std::mem::offset_of!(slurmdb_wckey_rec_t, accounting_list) - 0usize];
    ["Offset of field: slurmdb_wckey_rec_t::cluster"]
        [::std::mem::offset_of!(slurmdb_wckey_rec_t, cluster) - 8usize];
    ["Offset of field: slurmdb_wckey_rec_t::flags"]
        [::std::mem::offset_of!(slurmdb_wckey_rec_t, flags) - 16usize];
    ["Offset of field: slurmdb_wckey_rec_t::id"]
        [::std::mem::offset_of!(slurmdb_wckey_rec_t, id) - 20usize];
    ["Offset of field: slurmdb_wckey_rec_t::is_def"]
        [::std::mem::offset_of!(slurmdb_wckey_rec_t, is_def) - 24usize];
    ["Offset of field: slurmdb_wckey_rec_t::name"]
        [::std::mem::offset_of!(slurmdb_wckey_rec_t, name) - 32usize];
    ["Offset of field: slurmdb_wckey_rec_t::uid"]
        [::std::mem::offset_of!(slurmdb_wckey_rec_t, uid) - 40usize];
    ["Offset of field: slurmdb_wckey_rec_t::user"]
        [::std::mem::offset_of!(slurmdb_wckey_rec_t, user) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct slurmdb_print_tree_t {
    pub name: *mut ::std::os::raw::c_char,
    pub print_name: *mut ::std::os::raw::c_char,
    pub spaces: *mut ::std::os::raw::c_char,
    pub user: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of slurmdb_print_tree_t"][::std::mem::size_of::<slurmdb_print_tree_t>() - 32usize];
    ["Alignment of slurmdb_print_tree_t"][::std::mem::align_of::<slurmdb_print_tree_t>() - 8usize];
    ["Offset of field: slurmdb_print_tree_t::name"]
        [::std::mem::offset_of!(slurmdb_print_tree_t, name) - 0usize];
    ["Offset of field: slurmdb_print_tree_t::print_name"]
        [::std::mem::offset_of!(slurmdb_print_tree_t, print_name) - 8usize];
    ["Offset of field: slurmdb_print_tree_t::spaces"]
        [::std::mem::offset_of!(slurmdb_print_tree_t, spaces) - 16usize];
    ["Offset of field: slurmdb_print_tree_t::user"]
        [::std::mem::offset_of!(slurmdb_print_tree_t, user) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct slurmdb_hierarchical_rec_t {
    pub assoc: *mut slurmdb_assoc_rec_t,
    pub key: *mut ::std::os::raw::c_char,
    pub sort_name: *mut ::std::os::raw::c_char,
    pub children: *mut list_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of slurmdb_hierarchical_rec_t"]
        [::std::mem::size_of::<slurmdb_hierarchical_rec_t>() - 32usize];
    ["Alignment of slurmdb_hierarchical_rec_t"]
        [::std::mem::align_of::<slurmdb_hierarchical_rec_t>() - 8usize];
    ["Offset of field: slurmdb_hierarchical_rec_t::assoc"]
        [::std::mem::offset_of!(slurmdb_hierarchical_rec_t, assoc) - 0usize];
    ["Offset of field: slurmdb_hierarchical_rec_t::key"]
        [::std::mem::offset_of!(slurmdb_hierarchical_rec_t, key) - 8usize];
    ["Offset of field: slurmdb_hierarchical_rec_t::sort_name"]
        [::std::mem::offset_of!(slurmdb_hierarchical_rec_t, sort_name) - 16usize];
    ["Offset of field: slurmdb_hierarchical_rec_t::children"]
        [::std::mem::offset_of!(slurmdb_hierarchical_rec_t, children) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct slurmdb_report_assoc_rec_t {
    pub acct: *mut ::std::os::raw::c_char,
    pub cluster: *mut ::std::os::raw::c_char,
    pub id: u32,
    pub id_alt: u32,
    pub parent_acct: *mut ::std::os::raw::c_char,
    pub tres_list: *mut list_t,
    pub user: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of slurmdb_report_assoc_rec_t"]
        [::std::mem::size_of::<slurmdb_report_assoc_rec_t>() - 48usize];
    ["Alignment of slurmdb_report_assoc_rec_t"]
        [::std::mem::align_of::<slurmdb_report_assoc_rec_t>() - 8usize];
    ["Offset of field: slurmdb_report_assoc_rec_t::acct"]
        [::std::mem::offset_of!(slurmdb_report_assoc_rec_t, acct) - 0usize];
    ["Offset of field: slurmdb_report_assoc_rec_t::cluster"]
        [::std::mem::offset_of!(slurmdb_report_assoc_rec_t, cluster) - 8usize];
    ["Offset of field: slurmdb_report_assoc_rec_t::id"]
        [::std::mem::offset_of!(slurmdb_report_assoc_rec_t, id) - 16usize];
    ["Offset of field: slurmdb_report_assoc_rec_t::id_alt"]
        [::std::mem::offset_of!(slurmdb_report_assoc_rec_t, id_alt) - 20usize];
    ["Offset of field: slurmdb_report_assoc_rec_t::parent_acct"]
        [::std::mem::offset_of!(slurmdb_report_assoc_rec_t, parent_acct) - 24usize];
    ["Offset of field: slurmdb_report_assoc_rec_t::tres_list"]
        [::std::mem::offset_of!(slurmdb_report_assoc_rec_t, tres_list) - 32usize];
    ["Offset of field: slurmdb_report_assoc_rec_t::user"]
        [::std::mem::offset_of!(slurmdb_report_assoc_rec_t, user) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct slurmdb_report_user_rec_t {
    pub acct: *mut ::std::os::raw::c_char,
    pub acct_list: *mut list_t,
    pub assoc_list: *mut list_t,
    pub name: *mut ::std::os::raw::c_char,
    pub tres_list: *mut list_t,
    pub uid: uid_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of slurmdb_report_user_rec_t"]
        [::std::mem::size_of::<slurmdb_report_user_rec_t>() - 48usize];
    ["Alignment of slurmdb_report_user_rec_t"]
        [::std::mem::align_of::<slurmdb_report_user_rec_t>() - 8usize];
    ["Offset of field: slurmdb_report_user_rec_t::acct"]
        [::std::mem::offset_of!(slurmdb_report_user_rec_t, acct) - 0usize];
    ["Offset of field: slurmdb_report_user_rec_t::acct_list"]
        [::std::mem::offset_of!(slurmdb_report_user_rec_t, acct_list) - 8usize];
    ["Offset of field: slurmdb_report_user_rec_t::assoc_list"]
        [::std::mem::offset_of!(slurmdb_report_user_rec_t, assoc_list) - 16usize];
    ["Offset of field: slurmdb_report_user_rec_t::name"]
        [::std::mem::offset_of!(slurmdb_report_user_rec_t, name) - 24usize];
    ["Offset of field: slurmdb_report_user_rec_t::tres_list"]
        [::std::mem::offset_of!(slurmdb_report_user_rec_t, tres_list) - 32usize];
    ["Offset of field: slurmdb_report_user_rec_t::uid"]
        [::std::mem::offset_of!(slurmdb_report_user_rec_t, uid) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct slurmdb_report_cluster_rec_t {
    pub accounting_list: *mut list_t,
    pub assoc_list: *mut list_t,
    pub name: *mut ::std::os::raw::c_char,
    pub tres_list: *mut list_t,
    pub user_list: *mut list_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of slurmdb_report_cluster_rec_t"]
        [::std::mem::size_of::<slurmdb_report_cluster_rec_t>() - 40usize];
    ["Alignment of slurmdb_report_cluster_rec_t"]
        [::std::mem::align_of::<slurmdb_report_cluster_rec_t>() - 8usize];
    ["Offset of field: slurmdb_report_cluster_rec_t::accounting_list"]
        [::std::mem::offset_of!(slurmdb_report_cluster_rec_t, accounting_list) - 0usize];
    ["Offset of field: slurmdb_report_cluster_rec_t::assoc_list"]
        [::std::mem::offset_of!(slurmdb_report_cluster_rec_t, assoc_list) - 8usize];
    ["Offset of field: slurmdb_report_cluster_rec_t::name"]
        [::std::mem::offset_of!(slurmdb_report_cluster_rec_t, name) - 16usize];
    ["Offset of field: slurmdb_report_cluster_rec_t::tres_list"]
        [::std::mem::offset_of!(slurmdb_report_cluster_rec_t, tres_list) - 24usize];
    ["Offset of field: slurmdb_report_cluster_rec_t::user_list"]
        [::std::mem::offset_of!(slurmdb_report_cluster_rec_t, user_list) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct slurmdb_report_job_grouping_t {
    pub count: u32,
    pub jobs: *mut list_t,
    pub min_size: u32,
    pub max_size: u32,
    pub tres_list: *mut list_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of slurmdb_report_job_grouping_t"]
        [::std::mem::size_of::<slurmdb_report_job_grouping_t>() - 32usize];
    ["Alignment of slurmdb_report_job_grouping_t"]
        [::std::mem::align_of::<slurmdb_report_job_grouping_t>() - 8usize];
    ["Offset of field: slurmdb_report_job_grouping_t::count"]
        [::std::mem::offset_of!(slurmdb_report_job_grouping_t, count) - 0usize];
    ["Offset of field: slurmdb_report_job_grouping_t::jobs"]
        [::std::mem::offset_of!(slurmdb_report_job_grouping_t, jobs) - 8usize];
    ["Offset of field: slurmdb_report_job_grouping_t::min_size"]
        [::std::mem::offset_of!(slurmdb_report_job_grouping_t, min_size) - 16usize];
    ["Offset of field: slurmdb_report_job_grouping_t::max_size"]
        [::std::mem::offset_of!(slurmdb_report_job_grouping_t, max_size) - 20usize];
    ["Offset of field: slurmdb_report_job_grouping_t::tres_list"]
        [::std::mem::offset_of!(slurmdb_report_job_grouping_t, tres_list) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct slurmdb_report_acct_grouping_t {
    pub acct: *mut ::std::os::raw::c_char,
    pub count: u32,
    pub groups: *mut list_t,
    pub lineage: *mut ::std::os::raw::c_char,
    pub tres_list: *mut list_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of slurmdb_report_acct_grouping_t"]
        [::std::mem::size_of::<slurmdb_report_acct_grouping_t>() - 40usize];
    ["Alignment of slurmdb_report_acct_grouping_t"]
        [::std::mem::align_of::<slurmdb_report_acct_grouping_t>() - 8usize];
    ["Offset of field: slurmdb_report_acct_grouping_t::acct"]
        [::std::mem::offset_of!(slurmdb_report_acct_grouping_t, acct) - 0usize];
    ["Offset of field: slurmdb_report_acct_grouping_t::count"]
        [::std::mem::offset_of!(slurmdb_report_acct_grouping_t, count) - 8usize];
    ["Offset of field: slurmdb_report_acct_grouping_t::groups"]
        [::std::mem::offset_of!(slurmdb_report_acct_grouping_t, groups) - 16usize];
    ["Offset of field: slurmdb_report_acct_grouping_t::lineage"]
        [::std::mem::offset_of!(slurmdb_report_acct_grouping_t, lineage) - 24usize];
    ["Offset of field: slurmdb_report_acct_grouping_t::tres_list"]
        [::std::mem::offset_of!(slurmdb_report_acct_grouping_t, tres_list) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct slurmdb_report_cluster_grouping_t {
    pub acct_list: *mut list_t,
    pub cluster: *mut ::std::os::raw::c_char,
    pub count: u32,
    pub tres_list: *mut list_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of slurmdb_report_cluster_grouping_t"]
        [::std::mem::size_of::<slurmdb_report_cluster_grouping_t>() - 32usize];
    ["Alignment of slurmdb_report_cluster_grouping_t"]
        [::std::mem::align_of::<slurmdb_report_cluster_grouping_t>() - 8usize];
    ["Offset of field: slurmdb_report_cluster_grouping_t::acct_list"]
        [::std::mem::offset_of!(slurmdb_report_cluster_grouping_t, acct_list) - 0usize];
    ["Offset of field: slurmdb_report_cluster_grouping_t::cluster"]
        [::std::mem::offset_of!(slurmdb_report_cluster_grouping_t, cluster) - 8usize];
    ["Offset of field: slurmdb_report_cluster_grouping_t::count"]
        [::std::mem::offset_of!(slurmdb_report_cluster_grouping_t, count) - 16usize];
    ["Offset of field: slurmdb_report_cluster_grouping_t::tres_list"]
        [::std::mem::offset_of!(slurmdb_report_cluster_grouping_t, tres_list) - 24usize];
};
pub const DBD_ROLLUP_HOUR: _bindgen_ty_12 = 0;
pub const DBD_ROLLUP_DAY: _bindgen_ty_12 = 1;
pub const DBD_ROLLUP_MONTH: _bindgen_ty_12 = 2;
pub const DBD_ROLLUP_COUNT: _bindgen_ty_12 = 3;
pub type _bindgen_ty_12 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct slurmdb_rollup_stats_t {
    pub cluster_name: *mut ::std::os::raw::c_char,
    pub count: [u16; 3usize],
    pub timestamp: [time_t; 3usize],
    pub time_last: [u64; 3usize],
    pub time_max: [u64; 3usize],
    pub time_total: [u64; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of slurmdb_rollup_stats_t"][::std::mem::size_of::<slurmdb_rollup_stats_t>() - 112usize];
    ["Alignment of slurmdb_rollup_stats_t"]
        [::std::mem::align_of::<slurmdb_rollup_stats_t>() - 8usize];
    ["Offset of field: slurmdb_rollup_stats_t::cluster_name"]
        [::std::mem::offset_of!(slurmdb_rollup_stats_t, cluster_name) - 0usize];
    ["Offset of field: slurmdb_rollup_stats_t::count"]
        [::std::mem::offset_of!(slurmdb_rollup_stats_t, count) - 8usize];
    ["Offset of field: slurmdb_rollup_stats_t::timestamp"]
        [::std::mem::offset_of!(slurmdb_rollup_stats_t, timestamp) - 16usize];
    ["Offset of field: slurmdb_rollup_stats_t::time_last"]
        [::std::mem::offset_of!(slurmdb_rollup_stats_t, time_last) - 40usize];
    ["Offset of field: slurmdb_rollup_stats_t::time_max"]
        [::std::mem::offset_of!(slurmdb_rollup_stats_t, time_max) - 64usize];
    ["Offset of field: slurmdb_rollup_stats_t::time_total"]
        [::std::mem::offset_of!(slurmdb_rollup_stats_t, time_total) - 88usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct slurmdb_rpc_obj_t {
    pub cnt: u32,
    pub id: u32,
    pub time: u64,
    pub time_ave: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of slurmdb_rpc_obj_t"][::std::mem::size_of::<slurmdb_rpc_obj_t>() - 24usize];
    ["Alignment of slurmdb_rpc_obj_t"][::std::mem::align_of::<slurmdb_rpc_obj_t>() - 8usize];
    ["Offset of field: slurmdb_rpc_obj_t::cnt"]
        [::std::mem::offset_of!(slurmdb_rpc_obj_t, cnt) - 0usize];
    ["Offset of field: slurmdb_rpc_obj_t::id"]
        [::std::mem::offset_of!(slurmdb_rpc_obj_t, id) - 4usize];
    ["Offset of field: slurmdb_rpc_obj_t::time"]
        [::std::mem::offset_of!(slurmdb_rpc_obj_t, time) - 8usize];
    ["Offset of field: slurmdb_rpc_obj_t::time_ave"]
        [::std::mem::offset_of!(slurmdb_rpc_obj_t, time_ave) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct slurmdb_stats_rec_t {
    pub dbd_rollup_stats: *mut slurmdb_rollup_stats_t,
    pub rollup_stats: *mut list_t,
    pub rpc_list: *mut list_t,
    pub time_start: time_t,
    pub user_list: *mut list_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of slurmdb_stats_rec_t"][::std::mem::size_of::<slurmdb_stats_rec_t>() - 40usize];
    ["Alignment of slurmdb_stats_rec_t"][::std::mem::align_of::<slurmdb_stats_rec_t>() - 8usize];
    ["Offset of field: slurmdb_stats_rec_t::dbd_rollup_stats"]
        [::std::mem::offset_of!(slurmdb_stats_rec_t, dbd_rollup_stats) - 0usize];
    ["Offset of field: slurmdb_stats_rec_t::rollup_stats"]
        [::std::mem::offset_of!(slurmdb_stats_rec_t, rollup_stats) - 8usize];
    ["Offset of field: slurmdb_stats_rec_t::rpc_list"]
        [::std::mem::offset_of!(slurmdb_stats_rec_t, rpc_list) - 16usize];
    ["Offset of field: slurmdb_stats_rec_t::time_start"]
        [::std::mem::offset_of!(slurmdb_stats_rec_t, time_start) - 24usize];
    ["Offset of field: slurmdb_stats_rec_t::user_list"]
        [::std::mem::offset_of!(slurmdb_stats_rec_t, user_list) - 32usize];
};
unsafe extern "C" {
    pub static mut working_cluster_rec: *mut slurmdb_cluster_rec_t;
}
unsafe extern "C" {
    pub fn slurmdb_accounts_add(
        db_conn: *mut ::std::os::raw::c_void,
        acct_list: *mut list_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurmdb_accounts_add_cond(
        db_conn: *mut ::std::os::raw::c_void,
        add_assoc: *mut slurmdb_add_assoc_cond_t,
        acct: *mut slurmdb_account_rec_t,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn slurmdb_accounts_get(
        db_conn: *mut ::std::os::raw::c_void,
        acct_cond: *mut slurmdb_account_cond_t,
    ) -> *mut list_t;
}
unsafe extern "C" {
    pub fn slurmdb_accounts_modify(
        db_conn: *mut ::std::os::raw::c_void,
        acct_cond: *mut slurmdb_account_cond_t,
        acct: *mut slurmdb_account_rec_t,
    ) -> *mut list_t;
}
unsafe extern "C" {
    pub fn slurmdb_accounts_remove(
        db_conn: *mut ::std::os::raw::c_void,
        acct_cond: *mut slurmdb_account_cond_t,
    ) -> *mut list_t;
}
unsafe extern "C" {
    pub fn slurmdb_archive(
        db_conn: *mut ::std::os::raw::c_void,
        arch_cond: *mut slurmdb_archive_cond_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurmdb_archive_load(
        db_conn: *mut ::std::os::raw::c_void,
        arch_rec: *mut slurmdb_archive_rec_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurmdb_associations_add(
        db_conn: *mut ::std::os::raw::c_void,
        assoc_list: *mut list_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurmdb_associations_get(
        db_conn: *mut ::std::os::raw::c_void,
        assoc_cond: *mut slurmdb_assoc_cond_t,
    ) -> *mut list_t;
}
unsafe extern "C" {
    pub fn slurmdb_associations_modify(
        db_conn: *mut ::std::os::raw::c_void,
        assoc_cond: *mut slurmdb_assoc_cond_t,
        assoc: *mut slurmdb_assoc_rec_t,
    ) -> *mut list_t;
}
unsafe extern "C" {
    pub fn slurmdb_associations_remove(
        db_conn: *mut ::std::os::raw::c_void,
        assoc_cond: *mut slurmdb_assoc_cond_t,
    ) -> *mut list_t;
}
unsafe extern "C" {
    pub fn slurmdb_clusters_add(
        db_conn: *mut ::std::os::raw::c_void,
        cluster_list: *mut list_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurmdb_clusters_get(
        db_conn: *mut ::std::os::raw::c_void,
        cluster_cond: *mut slurmdb_cluster_cond_t,
    ) -> *mut list_t;
}
unsafe extern "C" {
    pub fn slurmdb_clusters_modify(
        db_conn: *mut ::std::os::raw::c_void,
        cluster_cond: *mut slurmdb_cluster_cond_t,
        cluster: *mut slurmdb_cluster_rec_t,
    ) -> *mut list_t;
}
unsafe extern "C" {
    pub fn slurmdb_clusters_remove(
        db_conn: *mut ::std::os::raw::c_void,
        cluster_cond: *mut slurmdb_cluster_cond_t,
    ) -> *mut list_t;
}
unsafe extern "C" {
    pub fn slurmdb_report_cluster_account_by_user(
        db_conn: *mut ::std::os::raw::c_void,
        assoc_cond: *mut slurmdb_assoc_cond_t,
    ) -> *mut list_t;
}
unsafe extern "C" {
    pub fn slurmdb_report_cluster_user_by_account(
        db_conn: *mut ::std::os::raw::c_void,
        assoc_cond: *mut slurmdb_assoc_cond_t,
    ) -> *mut list_t;
}
unsafe extern "C" {
    pub fn slurmdb_report_cluster_wckey_by_user(
        db_conn: *mut ::std::os::raw::c_void,
        wckey_cond: *mut slurmdb_wckey_cond_t,
    ) -> *mut list_t;
}
unsafe extern "C" {
    pub fn slurmdb_report_cluster_user_by_wckey(
        db_conn: *mut ::std::os::raw::c_void,
        wckey_cond: *mut slurmdb_wckey_cond_t,
    ) -> *mut list_t;
}
unsafe extern "C" {
    pub fn slurmdb_report_job_sizes_grouped_by_account(
        db_conn: *mut ::std::os::raw::c_void,
        job_cond: *mut slurmdb_job_cond_t,
        grouping_list: *mut list_t,
        flat_view: bool,
        acct_as_parent: bool,
    ) -> *mut list_t;
}
unsafe extern "C" {
    pub fn slurmdb_report_job_sizes_grouped_by_wckey(
        db_conn: *mut ::std::os::raw::c_void,
        job_cond: *mut slurmdb_job_cond_t,
        grouping_list: *mut list_t,
    ) -> *mut list_t;
}
unsafe extern "C" {
    pub fn slurmdb_report_job_sizes_grouped_by_account_then_wckey(
        db_conn: *mut ::std::os::raw::c_void,
        job_cond: *mut slurmdb_job_cond_t,
        grouping_list: *mut list_t,
        flat_view: bool,
        acct_as_parent: bool,
    ) -> *mut list_t;
}
unsafe extern "C" {
    pub fn slurmdb_report_user_top_usage(
        db_conn: *mut ::std::os::raw::c_void,
        user_cond: *mut slurmdb_user_cond_t,
        group_accounts: bool,
    ) -> *mut list_t;
}
unsafe extern "C" {
    pub fn slurmdb_connection_get(persist_conn_flags: *mut u16) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn slurmdb_connection_close(
        db_conn: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurmdb_connection_commit(
        db_conn: *mut ::std::os::raw::c_void,
        commit: bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurmdb_coord_add(
        db_conn: *mut ::std::os::raw::c_void,
        acct_list: *mut list_t,
        user_cond: *mut slurmdb_user_cond_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurmdb_coord_remove(
        db_conn: *mut ::std::os::raw::c_void,
        acct_list: *mut list_t,
        user_cond: *mut slurmdb_user_cond_t,
    ) -> *mut list_t;
}
unsafe extern "C" {
    pub fn slurmdb_federations_add(
        db_conn: *mut ::std::os::raw::c_void,
        federation_list: *mut list_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurmdb_federations_modify(
        db_conn: *mut ::std::os::raw::c_void,
        fed_cond: *mut slurmdb_federation_cond_t,
        fed: *mut slurmdb_federation_rec_t,
    ) -> *mut list_t;
}
unsafe extern "C" {
    pub fn slurmdb_federations_remove(
        db_conn: *mut ::std::os::raw::c_void,
        fed_cond: *mut slurmdb_federation_cond_t,
    ) -> *mut list_t;
}
unsafe extern "C" {
    pub fn slurmdb_federations_get(
        db_conn: *mut ::std::os::raw::c_void,
        fed_cond: *mut slurmdb_federation_cond_t,
    ) -> *mut list_t;
}
unsafe extern "C" {
    pub fn slurmdb_job_modify(
        db_conn: *mut ::std::os::raw::c_void,
        job_cond: *mut slurmdb_job_cond_t,
        job: *mut slurmdb_job_rec_t,
    ) -> *mut list_t;
}
unsafe extern "C" {
    pub fn slurmdb_jobs_get(
        db_conn: *mut ::std::os::raw::c_void,
        job_cond: *mut slurmdb_job_cond_t,
    ) -> *mut list_t;
}
unsafe extern "C" {
    pub fn slurmdb_jobs_fix_runaway(
        db_conn: *mut ::std::os::raw::c_void,
        jobs: *mut list_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurmdb_jobcomp_init() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurmdb_jobcomp_fini() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurmdb_jobcomp_jobs_get(job_cond: *mut slurmdb_job_cond_t) -> *mut list_t;
}
unsafe extern "C" {
    pub fn slurmdb_reconfig(db_conn: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurmdb_shutdown(db_conn: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurmdb_clear_stats(db_conn: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurmdb_get_stats(
        db_conn: *mut ::std::os::raw::c_void,
        stats_pptr: *mut *mut slurmdb_stats_rec_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurmdb_config_get(db_conn: *mut ::std::os::raw::c_void) -> *mut list_t;
}
unsafe extern "C" {
    pub fn slurmdb_events_get(
        db_conn: *mut ::std::os::raw::c_void,
        event_cond: *mut slurmdb_event_cond_t,
    ) -> *mut list_t;
}
unsafe extern "C" {
    pub fn slurmdb_instances_get(
        db_conn: *mut ::std::os::raw::c_void,
        instance_cond: *mut slurmdb_instance_cond_t,
    ) -> *mut list_t;
}
unsafe extern "C" {
    pub fn slurmdb_problems_get(
        db_conn: *mut ::std::os::raw::c_void,
        assoc_cond: *mut slurmdb_assoc_cond_t,
    ) -> *mut list_t;
}
unsafe extern "C" {
    pub fn slurmdb_reservations_get(
        db_conn: *mut ::std::os::raw::c_void,
        resv_cond: *mut slurmdb_reservation_cond_t,
    ) -> *mut list_t;
}
unsafe extern "C" {
    pub fn slurmdb_txn_get(
        db_conn: *mut ::std::os::raw::c_void,
        txn_cond: *mut slurmdb_txn_cond_t,
    ) -> *mut list_t;
}
unsafe extern "C" {
    pub fn slurmdb_get_info_cluster(cluster_names: *mut ::std::os::raw::c_char) -> *mut list_t;
}
unsafe extern "C" {
    pub fn slurmdb_get_first_avail_cluster(
        req: *mut job_desc_msg_t,
        cluster_names: *mut ::std::os::raw::c_char,
        cluster_rec: *mut *mut slurmdb_cluster_rec_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurmdb_get_first_het_job_cluster(
        job_req_list: *mut list_t,
        cluster_names: *mut ::std::os::raw::c_char,
        cluster_rec: *mut *mut slurmdb_cluster_rec_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurmdb_destroy_assoc_usage(object: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn slurmdb_destroy_bf_usage(object: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn slurmdb_destroy_bf_usage_members(object: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn slurmdb_destroy_qos_usage(object: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn slurmdb_free_user_rec_members(slurmdb_user: *mut slurmdb_user_rec_t);
}
unsafe extern "C" {
    pub fn slurmdb_destroy_user_rec(object: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn slurmdb_destroy_account_rec(object: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn slurmdb_destroy_coord_rec(object: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn slurmdb_destroy_clus_res_rec(object: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn slurmdb_destroy_cluster_accounting_rec(object: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn slurmdb_destroy_cluster_rec(object: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn slurmdb_destroy_federation_rec(object: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn slurmdb_destroy_accounting_rec(object: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn slurmdb_free_assoc_mgr_state_msg(object: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn slurmdb_free_assoc_rec_members(assoc: *mut slurmdb_assoc_rec_t);
}
unsafe extern "C" {
    pub fn slurmdb_destroy_assoc_rec(object: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn slurmdb_destroy_event_rec(object: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn slurmdb_destroy_instance_rec(object: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn slurmdb_destroy_job_rec(object: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn slurmdb_free_qos_rec_members(qos: *mut slurmdb_qos_rec_t);
}
unsafe extern "C" {
    pub fn slurmdb_destroy_qos_rec(object: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn slurmdb_destroy_reservation_rec(object: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn slurmdb_destroy_step_rec(object: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn slurmdb_destroy_res_rec(object: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn slurmdb_destroy_txn_rec(object: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn slurmdb_destroy_wckey_rec(object: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn slurmdb_destroy_archive_rec(object: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn slurmdb_destroy_tres_rec_noalloc(object: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn slurmdb_destroy_tres_rec(object: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn slurmdb_destroy_report_assoc_rec(object: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn slurmdb_destroy_report_user_rec(object: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn slurmdb_destroy_report_cluster_rec(object: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn slurmdb_destroy_user_cond(object: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn slurmdb_destroy_account_cond(object: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn slurmdb_destroy_cluster_cond(object: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn slurmdb_destroy_federation_cond(object: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn slurmdb_destroy_tres_cond(object: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn slurmdb_destroy_assoc_cond(object: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn slurmdb_destroy_event_cond(object: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn slurmdb_destroy_instance_cond(object: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn slurmdb_destroy_job_cond(object: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn slurmdb_destroy_job_cond_members(job_cond: *mut slurmdb_job_cond_t);
}
unsafe extern "C" {
    pub fn slurmdb_destroy_qos_cond(object: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn slurmdb_destroy_reservation_cond(object: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn slurmdb_destroy_res_cond(object: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn slurmdb_destroy_txn_cond(object: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn slurmdb_destroy_wckey_cond(object: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn slurmdb_destroy_archive_cond(object: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn slurmdb_free_add_assoc_cond_members(add_assoc: *mut slurmdb_add_assoc_cond_t);
}
unsafe extern "C" {
    pub fn slurmdb_destroy_add_assoc_cond(object: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn slurmdb_destroy_update_object(object: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn slurmdb_destroy_used_limits(object: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn slurmdb_destroy_print_tree(object: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn slurmdb_destroy_hierarchical_rec(object: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn slurmdb_destroy_report_job_grouping(object: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn slurmdb_destroy_report_acct_grouping(object: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn slurmdb_destroy_report_cluster_grouping(object: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn slurmdb_destroy_rpc_obj(object: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn slurmdb_destroy_rollup_stats(object: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn slurmdb_free_stats_rec_members(object: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn slurmdb_destroy_stats_rec(object: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn slurmdb_free_slurmdb_stats_members(stats: *mut slurmdb_stats_t);
}
unsafe extern "C" {
    pub fn slurmdb_destroy_slurmdb_stats(stats: *mut slurmdb_stats_t);
}
unsafe extern "C" {
    pub fn slurmdb_init_assoc_rec(assoc: *mut slurmdb_assoc_rec_t, free_it: bool);
}
unsafe extern "C" {
    pub fn slurmdb_init_clus_res_rec(clus_res: *mut slurmdb_clus_res_rec_t, free_it: bool);
}
unsafe extern "C" {
    pub fn slurmdb_init_cluster_rec(cluster: *mut slurmdb_cluster_rec_t, free_it: bool);
}
unsafe extern "C" {
    pub fn slurmdb_init_federation_rec(federation: *mut slurmdb_federation_rec_t, free_it: bool);
}
unsafe extern "C" {
    pub fn slurmdb_init_instance_rec(instance: *mut slurmdb_instance_rec_t);
}
unsafe extern "C" {
    pub fn slurmdb_init_qos_rec(qos: *mut slurmdb_qos_rec_t, free_it: bool, init_val: u32);
}
unsafe extern "C" {
    pub fn slurmdb_init_res_rec(res: *mut slurmdb_res_rec_t, free_it: bool);
}
unsafe extern "C" {
    pub fn slurmdb_init_wckey_rec(wckey: *mut slurmdb_wckey_rec_t, free_it: bool);
}
unsafe extern "C" {
    pub fn slurmdb_init_add_assoc_cond(add_assoc: *mut slurmdb_add_assoc_cond_t, free_it: bool);
}
unsafe extern "C" {
    pub fn slurmdb_init_tres_cond(tres: *mut slurmdb_tres_cond_t, free_it: bool);
}
unsafe extern "C" {
    pub fn slurmdb_init_cluster_cond(cluster: *mut slurmdb_cluster_cond_t, free_it: bool);
}
unsafe extern "C" {
    pub fn slurmdb_init_federation_cond(federation: *mut slurmdb_federation_cond_t, free_it: bool);
}
unsafe extern "C" {
    pub fn slurmdb_init_res_cond(cluster: *mut slurmdb_res_cond_t, free_it: bool);
}
unsafe extern "C" {
    pub fn slurmdb_ping(rem_host: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurmdb_ping_all() -> *mut slurmdbd_ping_t;
}
unsafe extern "C" {
    pub fn slurmdb_get_hierarchical_sorted_assoc_list(assoc_list: *mut list_t) -> *mut list_t;
}
unsafe extern "C" {
    pub fn slurmdb_get_acct_hierarchical_rec_list(assoc_list: *mut list_t) -> *mut list_t;
}
unsafe extern "C" {
    pub fn slurmdb_tree_name_get(
        name: *mut ::std::os::raw::c_char,
        parent: *mut ::std::os::raw::c_char,
        tree_list: *mut list_t,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn slurmdb_res_add(
        db_conn: *mut ::std::os::raw::c_void,
        res_list: *mut list_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurmdb_res_get(
        db_conn: *mut ::std::os::raw::c_void,
        res_cond: *mut slurmdb_res_cond_t,
    ) -> *mut list_t;
}
unsafe extern "C" {
    pub fn slurmdb_res_modify(
        db_conn: *mut ::std::os::raw::c_void,
        res_cond: *mut slurmdb_res_cond_t,
        res: *mut slurmdb_res_rec_t,
    ) -> *mut list_t;
}
unsafe extern "C" {
    pub fn slurmdb_res_remove(
        db_conn: *mut ::std::os::raw::c_void,
        res_cond: *mut slurmdb_res_cond_t,
    ) -> *mut list_t;
}
unsafe extern "C" {
    pub fn slurmdb_qos_add(
        db_conn: *mut ::std::os::raw::c_void,
        qos_list: *mut list_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurmdb_qos_get(
        db_conn: *mut ::std::os::raw::c_void,
        qos_cond: *mut slurmdb_qos_cond_t,
    ) -> *mut list_t;
}
unsafe extern "C" {
    pub fn slurmdb_qos_modify(
        db_conn: *mut ::std::os::raw::c_void,
        qos_cond: *mut slurmdb_qos_cond_t,
        qos: *mut slurmdb_qos_rec_t,
    ) -> *mut list_t;
}
unsafe extern "C" {
    pub fn slurmdb_qos_remove(
        db_conn: *mut ::std::os::raw::c_void,
        qos_cond: *mut slurmdb_qos_cond_t,
    ) -> *mut list_t;
}
unsafe extern "C" {
    pub fn slurmdb_tres_add(
        db_conn: *mut ::std::os::raw::c_void,
        tres_list: *mut list_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurmdb_tres_get(
        db_conn: *mut ::std::os::raw::c_void,
        tres_cond: *mut slurmdb_tres_cond_t,
    ) -> *mut list_t;
}
unsafe extern "C" {
    pub fn slurmdb_usage_get(
        db_conn: *mut ::std::os::raw::c_void,
        in_: *mut ::std::os::raw::c_void,
        type_: ::std::os::raw::c_int,
        start: time_t,
        end: time_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurmdb_usage_roll(
        db_conn: *mut ::std::os::raw::c_void,
        sent_start: time_t,
        sent_end: time_t,
        archive_data: u16,
        rollup_stats_list_in: *mut *mut list_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurmdb_users_add(
        db_conn: *mut ::std::os::raw::c_void,
        user_list: *mut list_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurmdb_users_add_cond(
        db_conn: *mut ::std::os::raw::c_void,
        add_assoc: *mut slurmdb_add_assoc_cond_t,
        user: *mut slurmdb_user_rec_t,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn slurmdb_users_add_conn(
        db_conn: *mut ::std::os::raw::c_void,
        user: *mut slurmdb_user_rec_t,
        assoc_cond: *mut slurmdb_assoc_cond_t,
        assoc: *mut slurmdb_assoc_rec_t,
    ) -> *mut list_t;
}
unsafe extern "C" {
    pub fn slurmdb_users_get(
        db_conn: *mut ::std::os::raw::c_void,
        user_cond: *mut slurmdb_user_cond_t,
    ) -> *mut list_t;
}
unsafe extern "C" {
    pub fn slurmdb_users_modify(
        db_conn: *mut ::std::os::raw::c_void,
        user_cond: *mut slurmdb_user_cond_t,
        user: *mut slurmdb_user_rec_t,
    ) -> *mut list_t;
}
unsafe extern "C" {
    pub fn slurmdb_users_remove(
        db_conn: *mut ::std::os::raw::c_void,
        user_cond: *mut slurmdb_user_cond_t,
    ) -> *mut list_t;
}
unsafe extern "C" {
    pub fn slurmdb_wckeys_add(
        db_conn: *mut ::std::os::raw::c_void,
        wckey_list: *mut list_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn slurmdb_wckeys_get(
        db_conn: *mut ::std::os::raw::c_void,
        wckey_cond: *mut slurmdb_wckey_cond_t,
    ) -> *mut list_t;
}
unsafe extern "C" {
    pub fn slurmdb_wckeys_modify(
        db_conn: *mut ::std::os::raw::c_void,
        wckey_cond: *mut slurmdb_wckey_cond_t,
        wckey: *mut slurmdb_wckey_rec_t,
    ) -> *mut list_t;
}
unsafe extern "C" {
    pub fn slurmdb_wckeys_remove(
        db_conn: *mut ::std::os::raw::c_void,
        wckey_cond: *mut slurmdb_wckey_cond_t,
    ) -> *mut list_t;
}
pub const bind_node_state_flags_EXTERNAL: bind_node_state_flags = 16;
pub const bind_node_state_flags_RES: bind_node_state_flags = 32;
pub const bind_node_state_flags_UNDRAIN: bind_node_state_flags = 64;
pub const bind_node_state_flags_CLOUD: bind_node_state_flags = 128;
pub const bind_node_state_flags_RESUME: bind_node_state_flags = 256;
pub const bind_node_state_flags_DRAIN: bind_node_state_flags = 512;
pub const bind_node_state_flags_COMPLETING: bind_node_state_flags = 1024;
pub const bind_node_state_flags_NO_RESPOND: bind_node_state_flags = 2048;
pub const bind_node_state_flags_POWERED_DOWN: bind_node_state_flags = 4096;
pub const bind_node_state_flags_FAIL: bind_node_state_flags = 8192;
pub const bind_node_state_flags_POWERING_UP: bind_node_state_flags = 16384;
pub const bind_node_state_flags_MAINT: bind_node_state_flags = 32768;
pub const bind_node_state_flags_REBOOT_REQUESTED: bind_node_state_flags = 65536;
pub const bind_node_state_flags_REBOOT_CANCEL: bind_node_state_flags = 131072;
pub const bind_node_state_flags_POWERING_DOWN: bind_node_state_flags = 262144;
pub const bind_node_state_flags_DYNAMIC_FUTURE: bind_node_state_flags = 524288;
pub const bind_node_state_flags_REBOOT_ISSUED: bind_node_state_flags = 1048576;
pub const bind_node_state_flags_PLANNED: bind_node_state_flags = 2097152;
pub const bind_node_state_flags_INVALID_REG: bind_node_state_flags = 4194304;
pub const bind_node_state_flags_POWER_DOWN: bind_node_state_flags = 8388608;
pub const bind_node_state_flags_POWER_UP: bind_node_state_flags = 16777216;
pub const bind_node_state_flags_POWER_DRAIN: bind_node_state_flags = 33554432;
pub const bind_node_state_flags_DYNAMIC_NORM: bind_node_state_flags = 67108864;
pub const bind_node_state_flags_BLOCKED: bind_node_state_flags = 134217728;
pub type bind_node_state_flags = ::std::os::raw::c_uint;
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __va_list_tag"][::std::mem::size_of::<__va_list_tag>() - 24usize];
    ["Alignment of __va_list_tag"][::std::mem::align_of::<__va_list_tag>() - 8usize];
    ["Offset of field: __va_list_tag::gp_offset"]
        [::std::mem::offset_of!(__va_list_tag, gp_offset) - 0usize];
    ["Offset of field: __va_list_tag::fp_offset"]
        [::std::mem::offset_of!(__va_list_tag, fp_offset) - 4usize];
    ["Offset of field: __va_list_tag::overflow_arg_area"]
        [::std::mem::offset_of!(__va_list_tag, overflow_arg_area) - 8usize];
    ["Offset of field: __va_list_tag::reg_save_area"]
        [::std::mem::offset_of!(__va_list_tag, reg_save_area) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
